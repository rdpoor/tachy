
Tachy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d18  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000e0  20000000  00003d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000134  200000e0  00003df8  000200e0  2**2
                  ALLOC
  3 .stack        00002004  20000214  00003f2c  000200e0  2**0
                  ALLOC
  4 .ARM.attributes 0000002d  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
  5 .comment      000000c7  00000000  00000000  0002010d  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002be97  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000415a  00000000  00000000  0004c06b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00011975  00000000  00000000  000501c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e70  00000000  00000000  00061b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001338  00000000  00000000  000629aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021bea  00000000  00000000  00063ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000177ee  00000000  00000000  000858cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009dfbe  00000000  00000000  0009d0ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002b7c  00000000  00000000  0013b078  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 22 00 20 5d 02 00 00 59 02 00 00 59 02 00 00     .". ]...Y...Y...
	...
      2c:	59 02 00 00 00 00 00 00 00 00 00 00 59 02 00 00     Y...........Y...
      3c:	59 02 00 00 59 02 00 00 59 02 00 00 e1 11 00 00     Y...Y...Y.......
      4c:	59 02 00 00 59 02 00 00 59 02 00 00 59 02 00 00     Y...Y...Y...Y...
      5c:	59 02 00 00 59 02 00 00 59 02 00 00 59 02 00 00     Y...Y...Y...Y...
      6c:	59 02 00 00 59 02 00 00 59 02 00 00 59 02 00 00     Y...Y...Y...Y...
      7c:	59 02 00 00 59 02 00 00 59 02 00 00 59 02 00 00     Y...Y...Y...Y...
      8c:	59 02 00 00 59 02 00 00 59 02 00 00 dd 21 00 00     Y...Y...Y....!..
      9c:	59 02 00 00 59 02 00 00 59 02 00 00                 Y...Y...Y...

000000a8 <__do_global_dtors_aux>:
      a8:	b510      	push	{r4, lr}
      aa:	4c06      	ldr	r4, [pc, #24]	; (c4 <__do_global_dtors_aux+0x1c>)
      ac:	7823      	ldrb	r3, [r4, #0]
      ae:	2b00      	cmp	r3, #0
      b0:	d107      	bne.n	c2 <__do_global_dtors_aux+0x1a>
      b2:	4b05      	ldr	r3, [pc, #20]	; (c8 <__do_global_dtors_aux+0x20>)
      b4:	2b00      	cmp	r3, #0
      b6:	d002      	beq.n	be <__do_global_dtors_aux+0x16>
      b8:	4804      	ldr	r0, [pc, #16]	; (cc <__do_global_dtors_aux+0x24>)
      ba:	e000      	b.n	be <__do_global_dtors_aux+0x16>
      bc:	bf00      	nop
      be:	2301      	movs	r3, #1
      c0:	7023      	strb	r3, [r4, #0]
      c2:	bd10      	pop	{r4, pc}
      c4:	200000e0 	.word	0x200000e0
      c8:	00000000 	.word	0x00000000
      cc:	00003d18 	.word	0x00003d18

000000d0 <frame_dummy>:
      d0:	4b08      	ldr	r3, [pc, #32]	; (f4 <frame_dummy+0x24>)
      d2:	b510      	push	{r4, lr}
      d4:	2b00      	cmp	r3, #0
      d6:	d003      	beq.n	e0 <frame_dummy+0x10>
      d8:	4907      	ldr	r1, [pc, #28]	; (f8 <frame_dummy+0x28>)
      da:	4808      	ldr	r0, [pc, #32]	; (fc <frame_dummy+0x2c>)
      dc:	e000      	b.n	e0 <frame_dummy+0x10>
      de:	bf00      	nop
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x30>)
      e2:	6803      	ldr	r3, [r0, #0]
      e4:	2b00      	cmp	r3, #0
      e6:	d100      	bne.n	ea <frame_dummy+0x1a>
      e8:	bd10      	pop	{r4, pc}
      ea:	4b06      	ldr	r3, [pc, #24]	; (104 <frame_dummy+0x34>)
      ec:	2b00      	cmp	r3, #0
      ee:	d0fb      	beq.n	e8 <frame_dummy+0x18>
      f0:	4798      	blx	r3
      f2:	e7f9      	b.n	e8 <frame_dummy+0x18>
      f4:	00000000 	.word	0x00000000
      f8:	200000e4 	.word	0x200000e4
      fc:	00003d18 	.word	0x00003d18
     100:	00003d18 	.word	0x00003d18
     104:	00000000 	.word	0x00000000

00000108 <adxl345_get_devid_reg>:
}

// ==========================================
// low-level register access

adxl345_err_t adxl345_get_devid_reg(adxl345_t *adxl345, uint8_t *val) {
     108:	b510      	push	{r4, lr}
     10a:	000a      	movs	r2, r1
  return adxl345_dev_read_reg(adxl345->dev, ADXL345_REG_DEVID, val);
     10c:	6800      	ldr	r0, [r0, #0]
     10e:	2100      	movs	r1, #0
     110:	4b01      	ldr	r3, [pc, #4]	; (118 <adxl345_get_devid_reg+0x10>)
     112:	4798      	blx	r3
}
     114:	bd10      	pop	{r4, pc}
     116:	46c0      	nop			; (mov r8, r8)
     118:	000001dd 	.word	0x000001dd

0000011c <adxl345_init>:
adxl345_err_t adxl345_init(adxl345_t *adxl345, adxl345_dev_t * dev) {
     11c:	b500      	push	{lr}
     11e:	b083      	sub	sp, #12
  adxl345->dev = dev;
     120:	6001      	str	r1, [r0, #0]
  if ((err = adxl345_get_devid_reg(adxl345, &reg)) != ADXL345_ERR_NONE) {
     122:	466b      	mov	r3, sp
     124:	1dd9      	adds	r1, r3, #7
     126:	4b06      	ldr	r3, [pc, #24]	; (140 <adxl345_init+0x24>)
     128:	4798      	blx	r3
     12a:	2800      	cmp	r0, #0
     12c:	d105      	bne.n	13a <adxl345_init+0x1e>
  } else if (reg != ADXL345_DEVICE_ID) {
     12e:	466b      	mov	r3, sp
     130:	3307      	adds	r3, #7
     132:	781b      	ldrb	r3, [r3, #0]
     134:	2be5      	cmp	r3, #229	; 0xe5
     136:	d000      	beq.n	13a <adxl345_init+0x1e>
    return ADXL354_ERR_INIT;
     138:	3004      	adds	r0, #4
}
     13a:	b003      	add	sp, #12
     13c:	bd00      	pop	{pc}
     13e:	46c0      	nop			; (mov r8, r8)
     140:	00000109 	.word	0x00000109

00000144 <adxl345_get_power_ctl_reg>:

adxl345_err_t adxl345_set_bw_rate_reg(adxl345_t *adxl345, adxl345_bw_rate_reg val) {
  return adxl345_dev_write_reg(adxl345->dev, ADXL345_REG_BW_RATE, val);
}

adxl345_err_t adxl345_get_power_ctl_reg(adxl345_t *adxl345, adxl345_power_ctl_reg *val) {
     144:	b510      	push	{r4, lr}
     146:	000a      	movs	r2, r1
  return adxl345_dev_read_reg(adxl345->dev, ADXL345_REG_POWER_CTL, val);
     148:	6800      	ldr	r0, [r0, #0]
     14a:	212d      	movs	r1, #45	; 0x2d
     14c:	4b01      	ldr	r3, [pc, #4]	; (154 <adxl345_get_power_ctl_reg+0x10>)
     14e:	4798      	blx	r3
}
     150:	bd10      	pop	{r4, pc}
     152:	46c0      	nop			; (mov r8, r8)
     154:	000001dd 	.word	0x000001dd

00000158 <adxl345_set_power_ctl_reg>:

adxl345_err_t adxl345_set_power_ctl_reg(adxl345_t *adxl345, adxl345_power_ctl_reg val) {
     158:	b510      	push	{r4, lr}
     15a:	000a      	movs	r2, r1
  return adxl345_dev_write_reg(adxl345->dev, ADXL345_REG_POWER_CTL, val);
     15c:	6800      	ldr	r0, [r0, #0]
     15e:	212d      	movs	r1, #45	; 0x2d
     160:	4b01      	ldr	r3, [pc, #4]	; (168 <adxl345_set_power_ctl_reg+0x10>)
     162:	4798      	blx	r3
}
     164:	bd10      	pop	{r4, pc}
     166:	46c0      	nop			; (mov r8, r8)
     168:	000001f5 	.word	0x000001f5

0000016c <adxl345_get_data_regs>:

adxl345_err_t adxl345_set_data_format_reg(adxl345_t *adxl345, adxl345_data_format_reg val) {
  return adxl345_dev_write_reg(adxl345->dev, ADXL345_REG_DATA_FORMAT, val);
}

adxl345_err_t adxl345_get_data_regs(adxl345_t *adxl345, adxl345_data_regs_t *dst) {
     16c:	b510      	push	{r4, lr}
     16e:	000a      	movs	r2, r1
  return adxl345_dev_read_regs(adxl345->dev, ADXL345_REG_DATAX0, (uint8_t *)dst, sizeof(adxl345_data_regs_t));
     170:	6800      	ldr	r0, [r0, #0]
     172:	2306      	movs	r3, #6
     174:	2132      	movs	r1, #50	; 0x32
     176:	4c01      	ldr	r4, [pc, #4]	; (17c <adxl345_get_data_regs+0x10>)
     178:	47a0      	blx	r4
}
     17a:	bd10      	pop	{r4, pc}
     17c:	00000229 	.word	0x00000229

00000180 <adxl345_start>:
// ==========================================
// higher level functions.  In the functions below,
// _g stands for gravity and _s stands for seconds.

/** @brief Enter measurement mode: start measuring */
adxl345_err_t adxl345_start(adxl345_t *adxl345) {
     180:	b510      	push	{r4, lr}
     182:	b082      	sub	sp, #8
     184:	0004      	movs	r4, r0
  uint8_t reg;
  adxl345_err_t err;

  err = adxl345_get_power_ctl_reg(adxl345, &reg);
     186:	466b      	mov	r3, sp
     188:	1dd9      	adds	r1, r3, #7
     18a:	4b07      	ldr	r3, [pc, #28]	; (1a8 <adxl345_start+0x28>)
     18c:	4798      	blx	r3
  if (err != ADXL345_ERR_NONE) return err;
     18e:	2800      	cmp	r0, #0
     190:	d001      	beq.n	196 <adxl345_start+0x16>

  err = adxl345_set_power_ctl_reg(adxl345, reg | ADXL345_MEASURE);
  return err;
}
     192:	b002      	add	sp, #8
     194:	bd10      	pop	{r4, pc}
  err = adxl345_set_power_ctl_reg(adxl345, reg | ADXL345_MEASURE);
     196:	466b      	mov	r3, sp
     198:	79d9      	ldrb	r1, [r3, #7]
     19a:	2308      	movs	r3, #8
     19c:	4319      	orrs	r1, r3
     19e:	0020      	movs	r0, r4
     1a0:	4b02      	ldr	r3, [pc, #8]	; (1ac <adxl345_start+0x2c>)
     1a2:	4798      	blx	r3
  return err;
     1a4:	e7f5      	b.n	192 <adxl345_start+0x12>
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	00000145 	.word	0x00000145
     1ac:	00000159 	.word	0x00000159

000001b0 <adxl345_dev_init>:
// public code

adxl345_err_t adxl345_dev_init(adxl345_dev_t *dev,
                               struct i2c_m_sync_desc *const i2c_descriptor,
                               int16_t slave_addr,
                               int32_t addr_len) {
     1b0:	b570      	push	{r4, r5, r6, lr}
     1b2:	000c      	movs	r4, r1
     1b4:	0015      	movs	r5, r2
     1b6:	001e      	movs	r6, r3
  dev->i2c_descriptor = i2c_descriptor;
     1b8:	6001      	str	r1, [r0, #0]
  dev->slave_addr = slave_addr;
     1ba:	8082      	strh	r2, [r0, #4]
  dev->addr_len = addr_len;
     1bc:	6083      	str	r3, [r0, #8]

  i2c_m_sync_enable(i2c_descriptor);
     1be:	0008      	movs	r0, r1
     1c0:	4b04      	ldr	r3, [pc, #16]	; (1d4 <adxl345_dev_init+0x24>)
     1c2:	4798      	blx	r3
  i2c_m_sync_set_slaveaddr(i2c_descriptor, slave_addr, addr_len);
     1c4:	0032      	movs	r2, r6
     1c6:	0029      	movs	r1, r5
     1c8:	0020      	movs	r0, r4
     1ca:	4b03      	ldr	r3, [pc, #12]	; (1d8 <adxl345_dev_init+0x28>)
     1cc:	4798      	blx	r3

  return ADXL345_ERR_NONE;
}
     1ce:	2000      	movs	r0, #0
     1d0:	bd70      	pop	{r4, r5, r6, pc}
     1d2:	46c0      	nop			; (mov r8, r8)
     1d4:	0000090d 	.word	0x0000090d
     1d8:	00000919 	.word	0x00000919

000001dc <adxl345_dev_read_reg>:
 * @param reg_addr Address of register to be read
 * @param dst Pointer to destination buffer.
 *
 * @return 0 on success, non-zero on error.
 */
adxl345_err_t adxl345_dev_read_reg(adxl345_dev_t *dev, uint8_t reg_addr, uint8_t *dst) {
     1dc:	b510      	push	{r4, lr}
  int32_t err = i2c_m_sync_cmd_read(dev->i2c_descriptor, reg_addr, dst, 1);
     1de:	6800      	ldr	r0, [r0, #0]
     1e0:	2301      	movs	r3, #1
     1e2:	4c03      	ldr	r4, [pc, #12]	; (1f0 <adxl345_dev_read_reg+0x14>)
     1e4:	47a0      	blx	r4
  if (err < 0) {
    return ADXL345_ERR_WRITE;
     1e6:	2303      	movs	r3, #3
  }
  return ADXL345_ERR_NONE;
     1e8:	17c0      	asrs	r0, r0, #31
     1ea:	4003      	ands	r3, r0
}
     1ec:	0018      	movs	r0, r3
     1ee:	bd10      	pop	{r4, pc}
     1f0:	0000092d 	.word	0x0000092d

000001f4 <adxl345_dev_write_reg>:
 * @param reg_addr Address of register to be written.
 * @param val Value to be written.
 *
 * @return 0 on success, non-zero on error.
 */
adxl345_err_t adxl345_dev_write_reg(adxl345_dev_t *dev, uint8_t reg_addr, uint8_t val) {
     1f4:	b500      	push	{lr}
     1f6:	b085      	sub	sp, #20
  uint8_t buf[2];
  buf[0] = reg_addr;
     1f8:	ab03      	add	r3, sp, #12
     1fa:	7019      	strb	r1, [r3, #0]
  buf[1] = val;
     1fc:	705a      	strb	r2, [r3, #1]

  struct _i2c_m_msg msg;
  int32_t ret;
  msg.addr = dev->slave_addr;
     1fe:	8882      	ldrh	r2, [r0, #4]
     200:	4669      	mov	r1, sp
     202:	800a      	strh	r2, [r1, #0]
  msg.len = sizeof(buf);
     204:	2202      	movs	r2, #2
     206:	9201      	str	r2, [sp, #4]
  msg.flags = I2C_M_STOP;
     208:	4a05      	ldr	r2, [pc, #20]	; (220 <adxl345_dev_write_reg+0x2c>)
     20a:	804a      	strh	r2, [r1, #2]
  msg.buffer = buf;
     20c:	9302      	str	r3, [sp, #8]

  ret = i2c_m_sync_transfer(dev->i2c_descriptor, &msg);
     20e:	6800      	ldr	r0, [r0, #0]
     210:	4b04      	ldr	r3, [pc, #16]	; (224 <adxl345_dev_write_reg+0x30>)
     212:	4798      	blx	r3
  if (ret < 0) {
    return ADXL345_ERR_WRITE;
     214:	2303      	movs	r3, #3
  }
  return ADXL345_ERR_NONE;
     216:	17c0      	asrs	r0, r0, #31
     218:	4003      	ands	r3, r0
}
     21a:	0018      	movs	r0, r3
     21c:	b005      	add	sp, #20
     21e:	bd00      	pop	{pc}
     220:	ffff8000 	.word	0xffff8000
     224:	00000975 	.word	0x00000975

00000228 <adxl345_dev_read_regs>:
 * @param dst Pointer to destination buffer.  Must have capacity of n_bytes.
 * @param n_bytes Number of registers to be read.
 *
 * @return 0 on success, non-zero on error.
 */
adxl345_err_t adxl345_dev_read_regs(adxl345_dev_t *dev, uint8_t reg_addr, uint8_t *dst, uint8_t n_bytes) {
     228:	b510      	push	{r4, lr}
  int32_t err = i2c_m_sync_cmd_read(dev->i2c_descriptor, reg_addr, dst, n_bytes);
     22a:	6800      	ldr	r0, [r0, #0]
     22c:	4c02      	ldr	r4, [pc, #8]	; (238 <adxl345_dev_read_regs+0x10>)
     22e:	47a0      	blx	r4
  if (err < 0) {
    return ADXL345_ERR_READ;
  }
  return ADXL345_ERR_NONE;
     230:	0fc0      	lsrs	r0, r0, #31
     232:	0040      	lsls	r0, r0, #1
}
     234:	bd10      	pop	{r4, pc}
     236:	46c0      	nop			; (mov r8, r8)
     238:	0000092d 	.word	0x0000092d

0000023c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     23c:	b510      	push	{r4, lr}
	system_init();
     23e:	4b03      	ldr	r3, [pc, #12]	; (24c <atmel_start_init+0x10>)
     240:	4798      	blx	r3
	stdio_redirect_init();
     242:	4b03      	ldr	r3, [pc, #12]	; (250 <atmel_start_init+0x14>)
     244:	4798      	blx	r3

	touch_init();
     246:	4b03      	ldr	r3, [pc, #12]	; (254 <atmel_start_init+0x18>)
     248:	4798      	blx	r3
}
     24a:	bd10      	pop	{r4, pc}
     24c:	000007c9 	.word	0x000007c9
     250:	000022b5 	.word	0x000022b5
     254:	0000216d 	.word	0x0000216d

00000258 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     258:	e7fe      	b.n	258 <Dummy_Handler>
	...

0000025c <Reset_Handler>:
{
     25c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     25e:	4a17      	ldr	r2, [pc, #92]	; (2bc <Reset_Handler+0x60>)
     260:	4b17      	ldr	r3, [pc, #92]	; (2c0 <Reset_Handler+0x64>)
     262:	429a      	cmp	r2, r3
     264:	d011      	beq.n	28a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     266:	001a      	movs	r2, r3
     268:	4b16      	ldr	r3, [pc, #88]	; (2c4 <Reset_Handler+0x68>)
     26a:	429a      	cmp	r2, r3
     26c:	d20d      	bcs.n	28a <Reset_Handler+0x2e>
     26e:	4a16      	ldr	r2, [pc, #88]	; (2c8 <Reset_Handler+0x6c>)
     270:	3303      	adds	r3, #3
     272:	1a9b      	subs	r3, r3, r2
     274:	089b      	lsrs	r3, r3, #2
     276:	3301      	adds	r3, #1
     278:	009b      	lsls	r3, r3, #2
     27a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     27c:	4810      	ldr	r0, [pc, #64]	; (2c0 <Reset_Handler+0x64>)
     27e:	490f      	ldr	r1, [pc, #60]	; (2bc <Reset_Handler+0x60>)
     280:	588c      	ldr	r4, [r1, r2]
     282:	5084      	str	r4, [r0, r2]
     284:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     286:	429a      	cmp	r2, r3
     288:	d1fa      	bne.n	280 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     28a:	4a10      	ldr	r2, [pc, #64]	; (2cc <Reset_Handler+0x70>)
     28c:	4b10      	ldr	r3, [pc, #64]	; (2d0 <Reset_Handler+0x74>)
     28e:	429a      	cmp	r2, r3
     290:	d20a      	bcs.n	2a8 <Reset_Handler+0x4c>
     292:	43d3      	mvns	r3, r2
     294:	490e      	ldr	r1, [pc, #56]	; (2d0 <Reset_Handler+0x74>)
     296:	185b      	adds	r3, r3, r1
     298:	2103      	movs	r1, #3
     29a:	438b      	bics	r3, r1
     29c:	3304      	adds	r3, #4
     29e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     2a0:	2100      	movs	r1, #0
     2a2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     2a4:	4293      	cmp	r3, r2
     2a6:	d1fc      	bne.n	2a2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     2a8:	4a0a      	ldr	r2, [pc, #40]	; (2d4 <Reset_Handler+0x78>)
     2aa:	21ff      	movs	r1, #255	; 0xff
     2ac:	4b0a      	ldr	r3, [pc, #40]	; (2d8 <Reset_Handler+0x7c>)
     2ae:	438b      	bics	r3, r1
     2b0:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     2b2:	4b0a      	ldr	r3, [pc, #40]	; (2dc <Reset_Handler+0x80>)
     2b4:	4798      	blx	r3
        main();
     2b6:	4b0a      	ldr	r3, [pc, #40]	; (2e0 <Reset_Handler+0x84>)
     2b8:	4798      	blx	r3
     2ba:	e7fe      	b.n	2ba <Reset_Handler+0x5e>
     2bc:	00003d18 	.word	0x00003d18
     2c0:	20000000 	.word	0x20000000
     2c4:	200000e0 	.word	0x200000e0
     2c8:	20000004 	.word	0x20000004
     2cc:	200000e0 	.word	0x200000e0
     2d0:	20000214 	.word	0x20000214
     2d4:	e000ed00 	.word	0xe000ed00
     2d8:	00000000 	.word	0x00000000
     2dc:	000028a5 	.word	0x000028a5
     2e0:	00001f71 	.word	0x00001f71

000002e4 <EDBG_0_PORT_init>:
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
	timer_init(&Timer, RTC, _rtc_get_timer());
}

void EDBG_0_PORT_init(void)
{
     2e4:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2e6:	4b11      	ldr	r3, [pc, #68]	; (32c <EDBG_0_PORT_init+0x48>)
     2e8:	22ac      	movs	r2, #172	; 0xac
     2ea:	0052      	lsls	r2, r2, #1
     2ec:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2ee:	2501      	movs	r5, #1
     2f0:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2f2:	2401      	movs	r4, #1
     2f4:	4321      	orrs	r1, r4
     2f6:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2f8:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2fa:	209e      	movs	r0, #158	; 0x9e
     2fc:	0040      	lsls	r0, r0, #1
     2fe:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     300:	3a4a      	subs	r2, #74	; 0x4a
     302:	3aff      	subs	r2, #255	; 0xff
     304:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     306:	3a0d      	subs	r2, #13
     308:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     30a:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     30c:	215a      	movs	r1, #90	; 0x5a
     30e:	31ff      	adds	r1, #255	; 0xff
     310:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     312:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     314:	4322      	orrs	r2, r4
     316:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     318:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     31a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     31c:	394b      	subs	r1, #75	; 0x4b
     31e:	39ff      	subs	r1, #255	; 0xff
     320:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     322:	3111      	adds	r1, #17
     324:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     326:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PC24, PINMUX_PC24C_SERCOM0_PAD2);

	gpio_set_pin_function(PC25, PINMUX_PC25C_SERCOM0_PAD3);
}
     328:	bd30      	pop	{r4, r5, pc}
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	41006000 	.word	0x41006000

00000330 <EDBG_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     330:	4b06      	ldr	r3, [pc, #24]	; (34c <EDBG_0_CLOCK_init+0x1c>)
     332:	2140      	movs	r1, #64	; 0x40
     334:	22c0      	movs	r2, #192	; 0xc0
     336:	5099      	str	r1, [r3, r2]
     338:	3103      	adds	r1, #3
     33a:	3a04      	subs	r2, #4
     33c:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
     33e:	4a04      	ldr	r2, [pc, #16]	; (350 <EDBG_0_CLOCK_init+0x20>)
     340:	69d3      	ldr	r3, [r2, #28]
     342:	3941      	subs	r1, #65	; 0x41
     344:	430b      	orrs	r3, r1
     346:	61d3      	str	r3, [r2, #28]
void EDBG_0_CLOCK_init(void)
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM0_bit(MCLK);
}
     348:	4770      	bx	lr
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	40001c00 	.word	0x40001c00
     350:	40000800 	.word	0x40000800

00000354 <EDBG_0_init>:

void EDBG_0_init(void)
{
     354:	b510      	push	{r4, lr}
	EDBG_0_CLOCK_init();
     356:	4b05      	ldr	r3, [pc, #20]	; (36c <EDBG_0_init+0x18>)
     358:	4798      	blx	r3
	usart_sync_init(&EDBG_0, SERCOM0, (void *)NULL);
     35a:	2200      	movs	r2, #0
     35c:	4904      	ldr	r1, [pc, #16]	; (370 <EDBG_0_init+0x1c>)
     35e:	4805      	ldr	r0, [pc, #20]	; (374 <EDBG_0_init+0x20>)
     360:	4b05      	ldr	r3, [pc, #20]	; (378 <EDBG_0_init+0x24>)
     362:	4798      	blx	r3
	EDBG_0_PORT_init();
     364:	4b05      	ldr	r3, [pc, #20]	; (37c <EDBG_0_init+0x28>)
     366:	4798      	blx	r3
}
     368:	bd10      	pop	{r4, pc}
     36a:	46c0      	nop			; (mov r8, r8)
     36c:	00000331 	.word	0x00000331
     370:	42000400 	.word	0x42000400
     374:	20000168 	.word	0x20000168
     378:	00000ea1 	.word	0x00000ea1
     37c:	000002e5 	.word	0x000002e5

00000380 <ADXL345_0_PORT_init>:

void ADXL345_0_PORT_init(void)
{
     380:	b5f0      	push	{r4, r5, r6, r7, lr}
     382:	46ce      	mov	lr, r9
     384:	4647      	mov	r7, r8
     386:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     388:	25c0      	movs	r5, #192	; 0xc0
     38a:	05ed      	lsls	r5, r5, #23
     38c:	2484      	movs	r4, #132	; 0x84
     38e:	2180      	movs	r1, #128	; 0x80
     390:	05c9      	lsls	r1, r1, #23
     392:	5129      	str	r1, [r5, r4]
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     394:	4b1a      	ldr	r3, [pc, #104]	; (400 <ADXL345_0_PORT_init+0x80>)
     396:	20de      	movs	r0, #222	; 0xde
     398:	5c1a      	ldrb	r2, [r3, r0]
     39a:	2604      	movs	r6, #4
     39c:	46b4      	mov	ip, r6
     39e:	4666      	mov	r6, ip
     3a0:	4332      	orrs	r2, r6
     3a2:	b2d2      	uxtb	r2, r2
     3a4:	541a      	strb	r2, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3a6:	2298      	movs	r2, #152	; 0x98
     3a8:	4691      	mov	r9, r2
     3aa:	50a9      	str	r1, [r5, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3ac:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3ae:	2701      	movs	r7, #1
     3b0:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3b2:	2601      	movs	r6, #1
     3b4:	4331      	orrs	r1, r6
     3b6:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3b8:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ba:	381f      	subs	r0, #31
     3bc:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3be:	3a89      	subs	r2, #137	; 0x89
     3c0:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     3c2:	3a0d      	subs	r2, #13
     3c4:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3c6:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3c8:	2280      	movs	r2, #128	; 0x80
     3ca:	0612      	lsls	r2, r2, #24
     3cc:	4690      	mov	r8, r2
     3ce:	512a      	str	r2, [r5, r4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     3d0:	345b      	adds	r4, #91	; 0x5b
     3d2:	5d19      	ldrb	r1, [r3, r4]
     3d4:	4662      	mov	r2, ip
     3d6:	4311      	orrs	r1, r2
     3d8:	b2c9      	uxtb	r1, r1
     3da:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3dc:	4642      	mov	r2, r8
     3de:	4649      	mov	r1, r9
     3e0:	506a      	str	r2, [r5, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3e2:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3e4:	43ba      	bics	r2, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e6:	4332      	orrs	r2, r6
     3e8:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ea:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ec:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3ee:	3989      	subs	r1, #137	; 0x89
     3f0:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     3f2:	3111      	adds	r1, #17
     3f4:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f6:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PB31, PINMUX_PB31C_SERCOM1_PAD1);
}
     3f8:	bc0c      	pop	{r2, r3}
     3fa:	4690      	mov	r8, r2
     3fc:	4699      	mov	r9, r3
     3fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     400:	41006000 	.word	0x41006000

00000404 <ADXL345_0_CLOCK_init>:
     404:	4b06      	ldr	r3, [pc, #24]	; (420 <ADXL345_0_CLOCK_init+0x1c>)
     406:	2140      	movs	r1, #64	; 0x40
     408:	22c4      	movs	r2, #196	; 0xc4
     40a:	5099      	str	r1, [r3, r2]
     40c:	3101      	adds	r1, #1
     40e:	3a08      	subs	r2, #8
     410:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM1;
     412:	4a04      	ldr	r2, [pc, #16]	; (424 <ADXL345_0_CLOCK_init+0x20>)
     414:	69d3      	ldr	r3, [r2, #28]
     416:	393d      	subs	r1, #61	; 0x3d
     418:	430b      	orrs	r3, r1
     41a:	61d3      	str	r3, [r2, #28]
void ADXL345_0_CLOCK_init(void)
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM1_bit(MCLK);
}
     41c:	4770      	bx	lr
     41e:	46c0      	nop			; (mov r8, r8)
     420:	40001c00 	.word	0x40001c00
     424:	40000800 	.word	0x40000800

00000428 <ADXL345_0_init>:

void ADXL345_0_init(void)
{
     428:	b510      	push	{r4, lr}
	ADXL345_0_CLOCK_init();
     42a:	4b04      	ldr	r3, [pc, #16]	; (43c <ADXL345_0_init+0x14>)
     42c:	4798      	blx	r3
	i2c_m_sync_init(&ADXL345_0, SERCOM1);
     42e:	4904      	ldr	r1, [pc, #16]	; (440 <ADXL345_0_init+0x18>)
     430:	4804      	ldr	r0, [pc, #16]	; (444 <ADXL345_0_init+0x1c>)
     432:	4b05      	ldr	r3, [pc, #20]	; (448 <ADXL345_0_init+0x20>)
     434:	4798      	blx	r3
	ADXL345_0_PORT_init();
     436:	4b05      	ldr	r3, [pc, #20]	; (44c <ADXL345_0_init+0x24>)
     438:	4798      	blx	r3
}
     43a:	bd10      	pop	{r4, pc}
     43c:	00000405 	.word	0x00000405
     440:	42000800 	.word	0x42000800
     444:	20000174 	.word	0x20000174
     448:	000008cd 	.word	0x000008cd
     44c:	00000381 	.word	0x00000381

00000450 <SEGMENT_LCD_0_PORT_init>:

void SEGMENT_LCD_0_PORT_init(void)
{
     450:	b5f0      	push	{r4, r5, r6, r7, lr}
     452:	46c6      	mov	lr, r8
     454:	b500      	push	{lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     456:	4bd0      	ldr	r3, [pc, #832]	; (798 <SEGMENT_LCD_0_PORT_init+0x348>)
     458:	2446      	movs	r4, #70	; 0x46
     45a:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     45c:	2101      	movs	r1, #1
     45e:	4388      	bics	r0, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     460:	2201      	movs	r2, #1
     462:	4310      	orrs	r0, r2
     464:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     466:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     468:	2733      	movs	r7, #51	; 0x33
     46a:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     46c:	3c37      	subs	r4, #55	; 0x37
     46e:	46a0      	mov	r8, r4
     470:	43a0      	bics	r0, r4
	tmp |= PORT_PMUX_PMUXE(data);
     472:	4310      	orrs	r0, r2
     474:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     476:	55d8      	strb	r0, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     478:	3438      	adds	r4, #56	; 0x38
     47a:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     47c:	4388      	bics	r0, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     47e:	4310      	orrs	r0, r2
     480:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     482:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     484:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     486:	3c38      	subs	r4, #56	; 0x38
     488:	4026      	ands	r6, r4
	tmp |= PORT_PMUX_PMUXO(data);
     48a:	2010      	movs	r0, #16
     48c:	4306      	orrs	r6, r0
     48e:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     490:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     492:	2746      	movs	r7, #70	; 0x46
     494:	37ff      	adds	r7, #255	; 0xff
     496:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     498:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     49a:	4316      	orrs	r6, r2
     49c:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49e:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a0:	3f13      	subs	r7, #19
     4a2:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4a4:	4026      	ands	r6, r4
	tmp |= PORT_PMUX_PMUXO(data);
     4a6:	4306      	orrs	r6, r0
     4a8:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4aa:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ac:	3714      	adds	r7, #20
     4ae:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4b0:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4b2:	4316      	orrs	r6, r2
     4b4:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4b6:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4b8:	2734      	movs	r7, #52	; 0x34
     4ba:	37ff      	adds	r7, #255	; 0xff
     4bc:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4be:	4645      	mov	r5, r8
     4c0:	43ae      	bics	r6, r5
	tmp |= PORT_PMUX_PMUXE(data);
     4c2:	4316      	orrs	r6, r2
     4c4:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4c6:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4c8:	2648      	movs	r6, #72	; 0x48
     4ca:	36ff      	adds	r6, #255	; 0xff
     4cc:	46b4      	mov	ip, r6
     4ce:	5d9e      	ldrb	r6, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4d0:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4d2:	4316      	orrs	r6, r2
     4d4:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d6:	4665      	mov	r5, ip
     4d8:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4da:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4dc:	4026      	ands	r6, r4
	tmp |= PORT_PMUX_PMUXO(data);
     4de:	4306      	orrs	r6, r0
     4e0:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4e2:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4e4:	3feb      	subs	r7, #235	; 0xeb
     4e6:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4e8:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4ea:	4316      	orrs	r6, r2
     4ec:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ee:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4f0:	3f14      	subs	r7, #20
     4f2:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4f4:	4645      	mov	r5, r8
     4f6:	43ae      	bics	r6, r5
	tmp |= PORT_PMUX_PMUXE(data);
     4f8:	4316      	orrs	r6, r2
     4fa:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4fc:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4fe:	353a      	adds	r5, #58	; 0x3a
     500:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     502:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     504:	4316      	orrs	r6, r2
     506:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     508:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     50a:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     50c:	4026      	ands	r6, r4
	tmp |= PORT_PMUX_PMUXO(data);
     50e:	4306      	orrs	r6, r0
     510:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     512:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     514:	3716      	adds	r7, #22
     516:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     518:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     51a:	4316      	orrs	r6, r2
     51c:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     51e:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     520:	3f15      	subs	r7, #21
     522:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     524:	4645      	mov	r5, r8
     526:	43ae      	bics	r6, r5
	tmp |= PORT_PMUX_PMUXE(data);
     528:	4316      	orrs	r6, r2
     52a:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     52c:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     52e:	353c      	adds	r5, #60	; 0x3c
     530:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     532:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     534:	4316      	orrs	r6, r2
     536:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     538:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     53a:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     53c:	4026      	ands	r6, r4
	tmp |= PORT_PMUX_PMUXO(data);
     53e:	4306      	orrs	r6, r0
     540:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     542:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     544:	3714      	adds	r7, #20
     546:	37ff      	adds	r7, #255	; 0xff
     548:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     54a:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     54c:	4316      	orrs	r6, r2
     54e:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     550:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     552:	3f14      	subs	r7, #20
     554:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     556:	4645      	mov	r5, r8
     558:	43ae      	bics	r6, r5
	tmp |= PORT_PMUX_PMUXE(data);
     55a:	4316      	orrs	r6, r2
     55c:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     55e:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     560:	254a      	movs	r5, #74	; 0x4a
     562:	35ff      	adds	r5, #255	; 0xff
     564:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     566:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     568:	4316      	orrs	r6, r2
     56a:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     56c:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     56e:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     570:	4026      	ands	r6, r4
	tmp |= PORT_PMUX_PMUXO(data);
     572:	4306      	orrs	r6, r0
     574:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     576:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     578:	3716      	adds	r7, #22
     57a:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     57c:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57e:	4316      	orrs	r6, r2
     580:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     582:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     584:	2736      	movs	r7, #54	; 0x36
     586:	37ff      	adds	r7, #255	; 0xff
     588:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     58a:	4645      	mov	r5, r8
     58c:	43ae      	bics	r6, r5
	tmp |= PORT_PMUX_PMUXE(data);
     58e:	4316      	orrs	r6, r2
     590:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     592:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     594:	254c      	movs	r5, #76	; 0x4c
     596:	35ff      	adds	r5, #255	; 0xff
     598:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     59a:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     59c:	4316      	orrs	r6, r2
     59e:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5a0:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5a2:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5a4:	4026      	ands	r6, r4
	tmp |= PORT_PMUX_PMUXO(data);
     5a6:	4306      	orrs	r6, r0
     5a8:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5aa:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ac:	3717      	adds	r7, #23
     5ae:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b0:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5b2:	4316      	orrs	r6, r2
     5b4:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5b6:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5b8:	3f16      	subs	r7, #22
     5ba:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5bc:	4645      	mov	r5, r8
     5be:	43ae      	bics	r6, r5
	tmp |= PORT_PMUX_PMUXE(data);
     5c0:	4316      	orrs	r6, r2
     5c2:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5c4:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5c6:	254e      	movs	r5, #78	; 0x4e
     5c8:	35ff      	adds	r5, #255	; 0xff
     5ca:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5cc:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ce:	4316      	orrs	r6, r2
     5d0:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5d2:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5d4:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5d6:	4026      	ands	r6, r4
	tmp |= PORT_PMUX_PMUXO(data);
     5d8:	4306      	orrs	r6, r0
     5da:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5dc:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5de:	3f6b      	subs	r7, #107	; 0x6b
     5e0:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5e2:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5e4:	4316      	orrs	r6, r2
     5e6:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5e8:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5ea:	3f16      	subs	r7, #22
     5ec:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5ee:	4026      	ands	r6, r4
	tmp |= PORT_PMUX_PMUXO(data);
     5f0:	4306      	orrs	r6, r0
     5f2:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5f4:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5f6:	3717      	adds	r7, #23
     5f8:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5fa:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5fc:	4316      	orrs	r6, r2
     5fe:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     600:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     602:	3f16      	subs	r7, #22
     604:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     606:	4645      	mov	r5, r8
     608:	43ae      	bics	r6, r5
	tmp |= PORT_PMUX_PMUXE(data);
     60a:	4316      	orrs	r6, r2
     60c:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60e:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     610:	35be      	adds	r5, #190	; 0xbe
     612:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     614:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     616:	4316      	orrs	r6, r2
     618:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61a:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     61c:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     61e:	4026      	ands	r6, r4
	tmp |= PORT_PMUX_PMUXO(data);
     620:	4306      	orrs	r6, r0
     622:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     624:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     626:	3718      	adds	r7, #24
     628:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     62a:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     62c:	4316      	orrs	r6, r2
     62e:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     630:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     632:	3f17      	subs	r7, #23
     634:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     636:	4645      	mov	r5, r8
     638:	43ae      	bics	r6, r5
	tmp |= PORT_PMUX_PMUXE(data);
     63a:	4316      	orrs	r6, r2
     63c:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     63e:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     640:	35c0      	adds	r5, #192	; 0xc0
     642:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     644:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     646:	4316      	orrs	r6, r2
     648:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     64a:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     64c:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     64e:	4026      	ands	r6, r4
	tmp |= PORT_PMUX_PMUXO(data);
     650:	4306      	orrs	r6, r0
     652:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     654:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     656:	3797      	adds	r7, #151	; 0x97
     658:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     65a:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     65c:	4316      	orrs	r6, r2
     65e:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     660:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     662:	2738      	movs	r7, #56	; 0x38
     664:	37ff      	adds	r7, #255	; 0xff
     666:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     668:	4645      	mov	r5, r8
     66a:	43ae      	bics	r6, r5
	tmp |= PORT_PMUX_PMUXE(data);
     66c:	4316      	orrs	r6, r2
     66e:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     670:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     672:	2550      	movs	r5, #80	; 0x50
     674:	35ff      	adds	r5, #255	; 0xff
     676:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     678:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     67a:	4316      	orrs	r6, r2
     67c:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     67e:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     680:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     682:	4026      	ands	r6, r4
	tmp |= PORT_PMUX_PMUXO(data);
     684:	4306      	orrs	r6, r0
     686:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     688:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     68a:	3fe9      	subs	r7, #233	; 0xe9
     68c:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     68e:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     690:	4316      	orrs	r6, r2
     692:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     694:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     696:	3f17      	subs	r7, #23
     698:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     69a:	4645      	mov	r5, r8
     69c:	43ae      	bics	r6, r5
	tmp |= PORT_PMUX_PMUXE(data);
     69e:	4316      	orrs	r6, r2
     6a0:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6a2:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6a4:	3540      	adds	r5, #64	; 0x40
     6a6:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6a8:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6aa:	4316      	orrs	r6, r2
     6ac:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6ae:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6b0:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6b2:	4026      	ands	r6, r4
	tmp |= PORT_PMUX_PMUXO(data);
     6b4:	4306      	orrs	r6, r0
     6b6:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6b8:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6ba:	371a      	adds	r7, #26
     6bc:	37ff      	adds	r7, #255	; 0xff
     6be:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6c0:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6c2:	4316      	orrs	r6, r2
     6c4:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6c6:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6c8:	3f18      	subs	r7, #24
     6ca:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6cc:	4645      	mov	r5, r8
     6ce:	43ae      	bics	r6, r5
	tmp |= PORT_PMUX_PMUXE(data);
     6d0:	4316      	orrs	r6, r2
     6d2:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6d4:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6d6:	2552      	movs	r5, #82	; 0x52
     6d8:	35ff      	adds	r5, #255	; 0xff
     6da:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6dc:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6de:	4316      	orrs	r6, r2
     6e0:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6e2:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6e4:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6e6:	4026      	ands	r6, r4
	tmp |= PORT_PMUX_PMUXO(data);
     6e8:	4306      	orrs	r6, r0
     6ea:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6ec:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6ee:	371a      	adds	r7, #26
     6f0:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     6f2:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6f4:	4316      	orrs	r6, r2
     6f6:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6f8:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6fa:	273a      	movs	r7, #58	; 0x3a
     6fc:	37ff      	adds	r7, #255	; 0xff
     6fe:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     700:	4645      	mov	r5, r8
     702:	43ae      	bics	r6, r5
	tmp |= PORT_PMUX_PMUXE(data);
     704:	4316      	orrs	r6, r2
     706:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     708:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     70a:	2554      	movs	r5, #84	; 0x54
     70c:	35ff      	adds	r5, #255	; 0xff
     70e:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     710:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     712:	4316      	orrs	r6, r2
     714:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     716:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     718:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     71a:	4026      	ands	r6, r4
	tmp |= PORT_PMUX_PMUXO(data);
     71c:	4306      	orrs	r6, r0
     71e:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     720:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     722:	371b      	adds	r7, #27
     724:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     726:	438e      	bics	r6, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     728:	4316      	orrs	r6, r2
     72a:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     72c:	55de      	strb	r6, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     72e:	269d      	movs	r6, #157	; 0x9d
     730:	0076      	lsls	r6, r6, #1
     732:	5d9f      	ldrb	r7, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     734:	4645      	mov	r5, r8
     736:	43af      	bics	r7, r5
     738:	003d      	movs	r5, r7
	tmp |= PORT_PMUX_PMUXE(data);
     73a:	4315      	orrs	r5, r2
     73c:	b2ed      	uxtb	r5, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     73e:	559d      	strb	r5, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     740:	2756      	movs	r7, #86	; 0x56
     742:	37ff      	adds	r7, #255	; 0xff
     744:	5ddd      	ldrb	r5, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     746:	438d      	bics	r5, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     748:	432a      	orrs	r2, r5
     74a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     74c:	55da      	strb	r2, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     74e:	5d9a      	ldrb	r2, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     750:	4014      	ands	r4, r2
	tmp |= PORT_PMUX_PMUXO(data);
     752:	4320      	orrs	r0, r4
     754:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     756:	5598      	strb	r0, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     758:	22d0      	movs	r2, #208	; 0xd0
     75a:	5c9b      	ldrb	r3, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     75c:	438b      	bics	r3, r1
     75e:	0019      	movs	r1, r3
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     760:	2401      	movs	r4, #1
     762:	4321      	orrs	r1, r4
     764:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     766:	4b0c      	ldr	r3, [pc, #48]	; (798 <SEGMENT_LCD_0_PORT_init+0x348>)
     768:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     76a:	20b8      	movs	r0, #184	; 0xb8
     76c:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     76e:	3ac1      	subs	r2, #193	; 0xc1
     770:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     772:	4321      	orrs	r1, r4
     774:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     776:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     778:	21d1      	movs	r1, #209	; 0xd1
     77a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     77c:	2501      	movs	r5, #1
     77e:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     780:	4322      	orrs	r2, r4
     782:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     784:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     786:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     788:	39c2      	subs	r1, #194	; 0xc2
     78a:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     78c:	3101      	adds	r1, #1
     78e:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     790:	541a      	strb	r2, [r3, r0]
	gpio_set_pin_function(PC21, PINMUX_PC21B_SLCD_LP41);

	gpio_set_pin_function(PB16, PINMUX_PB16B_SLCD_LP42);

	gpio_set_pin_function(PB17, PINMUX_PB17B_SLCD_LP43);
}
     792:	bc04      	pop	{r2}
     794:	4690      	mov	r8, r2
     796:	bdf0      	pop	{r4, r5, r6, r7, pc}
     798:	41006000 	.word	0x41006000

0000079c <SEGMENT_LCD_0_init>:
 * \brief SLCD initialization function
 *
 * Enables SLCD peripheral, clocks and initializes SLCD driver
 */
void SEGMENT_LCD_0_init(void)
{
     79c:	b510      	push	{r4, lr}
}

static inline void hri_mclk_set_APBCMASK_SLCD_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SLCD;
     79e:	4906      	ldr	r1, [pc, #24]	; (7b8 <SEGMENT_LCD_0_init+0x1c>)
     7a0:	69ca      	ldr	r2, [r1, #28]
     7a2:	2380      	movs	r3, #128	; 0x80
     7a4:	021b      	lsls	r3, r3, #8
     7a6:	4313      	orrs	r3, r2
     7a8:	61cb      	str	r3, [r1, #28]
	hri_mclk_set_APBCMASK_SLCD_bit(SLCD);
	slcd_sync_init(&SEGMENT_LCD_0, SLCD);
     7aa:	4804      	ldr	r0, [pc, #16]	; (7bc <SEGMENT_LCD_0_init+0x20>)
     7ac:	4b04      	ldr	r3, [pc, #16]	; (7c0 <SEGMENT_LCD_0_init+0x24>)
     7ae:	4798      	blx	r3
	SEGMENT_LCD_0_PORT_init();
     7b0:	4b04      	ldr	r3, [pc, #16]	; (7c4 <SEGMENT_LCD_0_init+0x28>)
     7b2:	4798      	blx	r3
}
     7b4:	bd10      	pop	{r4, pc}
     7b6:	46c0      	nop			; (mov r8, r8)
     7b8:	42003c00 	.word	0x42003c00
     7bc:	20000164 	.word	0x20000164
     7c0:	000009e9 	.word	0x000009e9
     7c4:	00000451 	.word	0x00000451

000007c8 <system_init>:
	hri_gclk_write_PCHCTRL_reg(GCLK, PTC_GCLK_ID, CONF_GCLK_PTC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_PTC_bit(MCLK);
}

void system_init(void)
{
     7c8:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     7ca:	4b0f      	ldr	r3, [pc, #60]	; (808 <system_init+0x40>)
     7cc:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     7ce:	4c0f      	ldr	r4, [pc, #60]	; (80c <system_init+0x44>)
     7d0:	6962      	ldr	r2, [r4, #20]
     7d2:	2380      	movs	r3, #128	; 0x80
     7d4:	009b      	lsls	r3, r3, #2
     7d6:	4313      	orrs	r3, r2
     7d8:	6163      	str	r3, [r4, #20]
	timer_init(&Timer, RTC, _rtc_get_timer());
     7da:	4b0d      	ldr	r3, [pc, #52]	; (810 <system_init+0x48>)
     7dc:	4798      	blx	r3
     7de:	0002      	movs	r2, r0
     7e0:	490c      	ldr	r1, [pc, #48]	; (814 <system_init+0x4c>)
     7e2:	480d      	ldr	r0, [pc, #52]	; (818 <system_init+0x50>)
     7e4:	4b0d      	ldr	r3, [pc, #52]	; (81c <system_init+0x54>)
     7e6:	4798      	blx	r3
	init_mcu();

	Timer_init();

	EDBG_0_init();
     7e8:	4b0d      	ldr	r3, [pc, #52]	; (820 <system_init+0x58>)
     7ea:	4798      	blx	r3

	ADXL345_0_init();
     7ec:	4b0d      	ldr	r3, [pc, #52]	; (824 <system_init+0x5c>)
     7ee:	4798      	blx	r3
	SEGMENT_LCD_0_init();
     7f0:	4b0d      	ldr	r3, [pc, #52]	; (828 <system_init+0x60>)
     7f2:	4798      	blx	r3
     7f4:	2141      	movs	r1, #65	; 0x41
     7f6:	23ec      	movs	r3, #236	; 0xec
     7f8:	4a0c      	ldr	r2, [pc, #48]	; (82c <system_init+0x64>)
     7fa:	50d1      	str	r1, [r2, r3]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_PTC;
     7fc:	69e2      	ldr	r2, [r4, #28]
     7fe:	2380      	movs	r3, #128	; 0x80
     800:	01db      	lsls	r3, r3, #7
     802:	4313      	orrs	r3, r2
     804:	61e3      	str	r3, [r4, #28]

	PTC_clock_init();
}
     806:	bd10      	pop	{r4, pc}
     808:	00000fe9 	.word	0x00000fe9
     80c:	40000800 	.word	0x40000800
     810:	000011db 	.word	0x000011db
     814:	40002400 	.word	0x40002400
     818:	20000148 	.word	0x20000148
     81c:	00000c91 	.word	0x00000c91
     820:	00000355 	.word	0x00000355
     824:	00000429 	.word	0x00000429
     828:	0000079d 	.word	0x0000079d
     82c:	40001c00 	.word	0x40001c00

00000830 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     830:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     834:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     836:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     838:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     83c:	4770      	bx	lr

0000083e <atomic_leave_critical>:
     83e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     842:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     844:	f383 8810 	msr	PRIMASK, r3
}
     848:	4770      	bx	lr
	...

0000084c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     84c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     84e:	4b04      	ldr	r3, [pc, #16]	; (860 <delay_ms+0x14>)
     850:	681c      	ldr	r4, [r3, #0]
     852:	4b04      	ldr	r3, [pc, #16]	; (864 <delay_ms+0x18>)
     854:	4798      	blx	r3
     856:	0001      	movs	r1, r0
     858:	0020      	movs	r0, r4
     85a:	4b03      	ldr	r3, [pc, #12]	; (868 <delay_ms+0x1c>)
     85c:	4798      	blx	r3
}
     85e:	bd10      	pop	{r4, pc}
     860:	200000fc 	.word	0x200000fc
     864:	00000fc5 	.word	0x00000fc5
     868:	00000fe1 	.word	0x00000fe1

0000086c <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     86c:	b510      	push	{r4, lr}
     86e:	b084      	sub	sp, #16
     870:	0014      	movs	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     872:	ab01      	add	r3, sp, #4
     874:	3814      	subs	r0, #20
     876:	8b82      	ldrh	r2, [r0, #28]
     878:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     87a:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP;
     87c:	4a05      	ldr	r2, [pc, #20]	; (894 <i2c_m_sync_write+0x28>)
     87e:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     880:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     882:	0019      	movs	r1, r3
     884:	4b04      	ldr	r3, [pc, #16]	; (898 <i2c_m_sync_write+0x2c>)
     886:	4798      	blx	r3

	if (ret) {
     888:	2800      	cmp	r0, #0
     88a:	d100      	bne.n	88e <i2c_m_sync_write+0x22>
		return ret;
	}

	return n;
     88c:	0020      	movs	r0, r4
}
     88e:	b004      	add	sp, #16
     890:	bd10      	pop	{r4, pc}
     892:	46c0      	nop			; (mov r8, r8)
     894:	ffff8000 	.word	0xffff8000
     898:	000014d9 	.word	0x000014d9

0000089c <i2c_m_sync_read>:
{
     89c:	b510      	push	{r4, lr}
     89e:	b084      	sub	sp, #16
     8a0:	0014      	movs	r4, r2
	msg.addr   = i2c->slave_addr;
     8a2:	ab01      	add	r3, sp, #4
     8a4:	3814      	subs	r0, #20
     8a6:	8b82      	ldrh	r2, [r0, #28]
     8a8:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     8aa:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     8ac:	4a05      	ldr	r2, [pc, #20]	; (8c4 <i2c_m_sync_read+0x28>)
     8ae:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     8b0:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     8b2:	0019      	movs	r1, r3
     8b4:	4b04      	ldr	r3, [pc, #16]	; (8c8 <i2c_m_sync_read+0x2c>)
     8b6:	4798      	blx	r3
	if (ret) {
     8b8:	2800      	cmp	r0, #0
     8ba:	d100      	bne.n	8be <i2c_m_sync_read+0x22>
	return n;
     8bc:	0020      	movs	r0, r4
}
     8be:	b004      	add	sp, #16
     8c0:	bd10      	pop	{r4, pc}
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	ffff8001 	.word	0xffff8001
     8c8:	000014d9 	.word	0x000014d9

000008cc <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     8cc:	b570      	push	{r4, r5, r6, lr}
     8ce:	0004      	movs	r4, r0
     8d0:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     8d2:	1e43      	subs	r3, r0, #1
     8d4:	4198      	sbcs	r0, r3
     8d6:	b2c0      	uxtb	r0, r0
     8d8:	225e      	movs	r2, #94	; 0x5e
     8da:	4907      	ldr	r1, [pc, #28]	; (8f8 <i2c_m_sync_init+0x2c>)
     8dc:	4b07      	ldr	r3, [pc, #28]	; (8fc <i2c_m_sync_init+0x30>)
     8de:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     8e0:	0029      	movs	r1, r5
     8e2:	0020      	movs	r0, r4
     8e4:	4b06      	ldr	r3, [pc, #24]	; (900 <i2c_m_sync_init+0x34>)
     8e6:	4798      	blx	r3
	if (init_status) {
     8e8:	2800      	cmp	r0, #0
     8ea:	d103      	bne.n	8f4 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     8ec:	4b05      	ldr	r3, [pc, #20]	; (904 <i2c_m_sync_init+0x38>)
     8ee:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     8f0:	4b05      	ldr	r3, [pc, #20]	; (908 <i2c_m_sync_init+0x3c>)
     8f2:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     8f4:	bd70      	pop	{r4, r5, r6, pc}
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	000038e0 	.word	0x000038e0
     8fc:	00000f19 	.word	0x00000f19
     900:	00001425 	.word	0x00001425
     904:	0000089d 	.word	0x0000089d
     908:	0000086d 	.word	0x0000086d

0000090c <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     90c:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
     90e:	4b01      	ldr	r3, [pc, #4]	; (914 <i2c_m_sync_enable+0x8>)
     910:	4798      	blx	r3
}
     912:	bd10      	pop	{r4, pc}
     914:	00001455 	.word	0x00001455

00000918 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     918:	0589      	lsls	r1, r1, #22
     91a:	0d89      	lsrs	r1, r1, #22
     91c:	2380      	movs	r3, #128	; 0x80
     91e:	00db      	lsls	r3, r3, #3
     920:	401a      	ands	r2, r3
     922:	430a      	orrs	r2, r1
     924:	8382      	strh	r2, [r0, #28]
}
     926:	0010      	movs	r0, r2
     928:	4770      	bx	lr
	...

0000092c <i2c_m_sync_cmd_read>:

/**
 * \brief Sync version of i2c read command
 */
int32_t i2c_m_sync_cmd_read(struct i2c_m_sync_desc *i2c, uint8_t reg, uint8_t *buffer, uint8_t length)
{
     92c:	b570      	push	{r4, r5, r6, lr}
     92e:	b086      	sub	sp, #24
     930:	0004      	movs	r4, r0
     932:	0016      	movs	r6, r2
     934:	001d      	movs	r5, r3
     936:	466b      	mov	r3, sp
     938:	71d9      	strb	r1, [r3, #7]
     93a:	3307      	adds	r3, #7
	struct _i2c_m_msg msg;
	int32_t           ret;

	msg.addr   = i2c->slave_addr;
     93c:	a903      	add	r1, sp, #12
     93e:	8b82      	ldrh	r2, [r0, #28]
     940:	800a      	strh	r2, [r1, #0]
	msg.len    = 1;
     942:	2201      	movs	r2, #1
     944:	604a      	str	r2, [r1, #4]
	msg.flags  = 0;
     946:	2200      	movs	r2, #0
     948:	804a      	strh	r2, [r1, #2]
	msg.buffer = &reg;
     94a:	608b      	str	r3, [r1, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     94c:	4b07      	ldr	r3, [pc, #28]	; (96c <i2c_m_sync_cmd_read+0x40>)
     94e:	4798      	blx	r3

	if (ret != 0) {
     950:	2800      	cmp	r0, #0
     952:	d001      	beq.n	958 <i2c_m_sync_cmd_read+0x2c>
		/* error occurred */
		return ret;
	}

	return ERR_NONE;
}
     954:	b006      	add	sp, #24
     956:	bd70      	pop	{r4, r5, r6, pc}
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     958:	a903      	add	r1, sp, #12
     95a:	4b05      	ldr	r3, [pc, #20]	; (970 <i2c_m_sync_cmd_read+0x44>)
     95c:	804b      	strh	r3, [r1, #2]
	msg.buffer = buffer;
     95e:	608e      	str	r6, [r1, #8]
	msg.len    = length;
     960:	604d      	str	r5, [r1, #4]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     962:	0020      	movs	r0, r4
     964:	4b01      	ldr	r3, [pc, #4]	; (96c <i2c_m_sync_cmd_read+0x40>)
     966:	4798      	blx	r3
     968:	e7f4      	b.n	954 <i2c_m_sync_cmd_read+0x28>
     96a:	46c0      	nop			; (mov r8, r8)
     96c:	000014d9 	.word	0x000014d9
     970:	ffff8001 	.word	0xffff8001

00000974 <i2c_m_sync_transfer>:

/**
 * \brief Sync version of i2c transfer command
 */
int32_t i2c_m_sync_transfer(struct i2c_m_sync_desc *const i2c, struct _i2c_m_msg *msg)
{
     974:	b510      	push	{r4, lr}
	return _i2c_m_sync_transfer(&i2c->device, msg);
     976:	4b01      	ldr	r3, [pc, #4]	; (97c <i2c_m_sync_transfer+0x8>)
     978:	4798      	blx	r3
}
     97a:	bd10      	pop	{r4, pc}
     97c:	000014d9 	.word	0x000014d9

00000980 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     980:	b570      	push	{r4, r5, r6, lr}
     982:	0006      	movs	r6, r0
     984:	000c      	movs	r4, r1
     986:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     988:	2800      	cmp	r0, #0
     98a:	d00d      	beq.n	9a8 <io_write+0x28>
     98c:	0008      	movs	r0, r1
     98e:	1e43      	subs	r3, r0, #1
     990:	4198      	sbcs	r0, r3
     992:	b2c0      	uxtb	r0, r0
     994:	2234      	movs	r2, #52	; 0x34
     996:	4905      	ldr	r1, [pc, #20]	; (9ac <io_write+0x2c>)
     998:	4b05      	ldr	r3, [pc, #20]	; (9b0 <io_write+0x30>)
     99a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     99c:	6833      	ldr	r3, [r6, #0]
     99e:	002a      	movs	r2, r5
     9a0:	0021      	movs	r1, r4
     9a2:	0030      	movs	r0, r6
     9a4:	4798      	blx	r3
}
     9a6:	bd70      	pop	{r4, r5, r6, pc}
     9a8:	2000      	movs	r0, #0
     9aa:	e7f3      	b.n	994 <io_write+0x14>
     9ac:	000038fc 	.word	0x000038fc
     9b0:	00000f19 	.word	0x00000f19

000009b4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     9b4:	b570      	push	{r4, r5, r6, lr}
     9b6:	0006      	movs	r6, r0
     9b8:	000c      	movs	r4, r1
     9ba:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     9bc:	2800      	cmp	r0, #0
     9be:	d00d      	beq.n	9dc <io_read+0x28>
     9c0:	0008      	movs	r0, r1
     9c2:	1e43      	subs	r3, r0, #1
     9c4:	4198      	sbcs	r0, r3
     9c6:	b2c0      	uxtb	r0, r0
     9c8:	223d      	movs	r2, #61	; 0x3d
     9ca:	4905      	ldr	r1, [pc, #20]	; (9e0 <io_read+0x2c>)
     9cc:	4b05      	ldr	r3, [pc, #20]	; (9e4 <io_read+0x30>)
     9ce:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     9d0:	6873      	ldr	r3, [r6, #4]
     9d2:	002a      	movs	r2, r5
     9d4:	0021      	movs	r1, r4
     9d6:	0030      	movs	r0, r6
     9d8:	4798      	blx	r3
}
     9da:	bd70      	pop	{r4, r5, r6, pc}
     9dc:	2000      	movs	r0, #0
     9de:	e7f3      	b.n	9c8 <io_read+0x14>
     9e0:	000038fc 	.word	0x000038fc
     9e4:	00000f19 	.word	0x00000f19

000009e8 <slcd_sync_init>:

/**
 * \brief              Initialize SLCD Descriptor
 */
int32_t slcd_sync_init(struct slcd_sync_descriptor *const descr, void *const hw)
{
     9e8:	b570      	push	{r4, r5, r6, lr}
     9ea:	0004      	movs	r4, r0
     9ec:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     9ee:	2800      	cmp	r0, #0
     9f0:	d00c      	beq.n	a0c <slcd_sync_init+0x24>
     9f2:	0008      	movs	r0, r1
     9f4:	1e43      	subs	r3, r0, #1
     9f6:	4198      	sbcs	r0, r3
     9f8:	b2c0      	uxtb	r0, r0
     9fa:	222b      	movs	r2, #43	; 0x2b
     9fc:	4904      	ldr	r1, [pc, #16]	; (a10 <slcd_sync_init+0x28>)
     9fe:	4b05      	ldr	r3, [pc, #20]	; (a14 <slcd_sync_init+0x2c>)
     a00:	4798      	blx	r3
	return _slcd_sync_init(&descr->dev, hw);
     a02:	0029      	movs	r1, r5
     a04:	0020      	movs	r0, r4
     a06:	4b04      	ldr	r3, [pc, #16]	; (a18 <slcd_sync_init+0x30>)
     a08:	4798      	blx	r3
}
     a0a:	bd70      	pop	{r4, r5, r6, pc}
     a0c:	2000      	movs	r0, #0
     a0e:	e7f4      	b.n	9fa <slcd_sync_init+0x12>
     a10:	00003910 	.word	0x00003910
     a14:	00000f19 	.word	0x00000f19
     a18:	00001a85 	.word	0x00001a85

00000a1c <slcd_sync_enable>:
/**
 * \brief              Enable SLCD driver
 *
 */
int32_t slcd_sync_enable(struct slcd_sync_descriptor *const descr)
{
     a1c:	b510      	push	{r4, lr}
     a1e:	0004      	movs	r4, r0
	ASSERT(descr);
     a20:	1e43      	subs	r3, r0, #1
     a22:	4198      	sbcs	r0, r3
     a24:	b2c0      	uxtb	r0, r0
     a26:	223e      	movs	r2, #62	; 0x3e
     a28:	4903      	ldr	r1, [pc, #12]	; (a38 <slcd_sync_enable+0x1c>)
     a2a:	4b04      	ldr	r3, [pc, #16]	; (a3c <slcd_sync_enable+0x20>)
     a2c:	4798      	blx	r3
	return _slcd_sync_enable(&descr->dev);
     a2e:	0020      	movs	r0, r4
     a30:	4b03      	ldr	r3, [pc, #12]	; (a40 <slcd_sync_enable+0x24>)
     a32:	4798      	blx	r3
}
     a34:	bd10      	pop	{r4, pc}
     a36:	46c0      	nop			; (mov r8, r8)
     a38:	00003910 	.word	0x00003910
     a3c:	00000f19 	.word	0x00000f19
     a40:	00001b29 	.word	0x00001b29

00000a44 <slcd_sync_seg_on>:
}
/**
 * \brief              Turn on a Segment
 */
int32_t slcd_sync_seg_on(struct slcd_sync_descriptor *const descr, uint32_t seg)
{
     a44:	b570      	push	{r4, r5, r6, lr}
     a46:	0004      	movs	r4, r0
     a48:	000d      	movs	r5, r1
	ASSERT(descr);
     a4a:	1e43      	subs	r3, r0, #1
     a4c:	4198      	sbcs	r0, r3
     a4e:	b2c0      	uxtb	r0, r0
     a50:	224f      	movs	r2, #79	; 0x4f
     a52:	4904      	ldr	r1, [pc, #16]	; (a64 <slcd_sync_seg_on+0x20>)
     a54:	4b04      	ldr	r3, [pc, #16]	; (a68 <slcd_sync_seg_on+0x24>)
     a56:	4798      	blx	r3
	return _slcd_sync_seg_on(&descr->dev, seg);
     a58:	0029      	movs	r1, r5
     a5a:	0020      	movs	r0, r4
     a5c:	4b03      	ldr	r3, [pc, #12]	; (a6c <slcd_sync_seg_on+0x28>)
     a5e:	4798      	blx	r3
}
     a60:	bd70      	pop	{r4, r5, r6, pc}
     a62:	46c0      	nop			; (mov r8, r8)
     a64:	00003910 	.word	0x00003910
     a68:	00000f19 	.word	0x00000f19
     a6c:	00001b41 	.word	0x00001b41

00000a70 <slcd_sync_seg_blink>:
}
/**
 * \brief              Blink a Segment
 */
int32_t slcd_sync_seg_blink(struct slcd_sync_descriptor *const descr, uint32_t seg, const uint32_t period)
{
     a70:	b570      	push	{r4, r5, r6, lr}
     a72:	0004      	movs	r4, r0
     a74:	000e      	movs	r6, r1
     a76:	0015      	movs	r5, r2
	ASSERT(descr && period);
     a78:	2800      	cmp	r0, #0
     a7a:	d00d      	beq.n	a98 <slcd_sync_seg_blink+0x28>
     a7c:	0010      	movs	r0, r2
     a7e:	1e43      	subs	r3, r0, #1
     a80:	4198      	sbcs	r0, r3
     a82:	b2c0      	uxtb	r0, r0
     a84:	225f      	movs	r2, #95	; 0x5f
     a86:	4905      	ldr	r1, [pc, #20]	; (a9c <slcd_sync_seg_blink+0x2c>)
     a88:	4b05      	ldr	r3, [pc, #20]	; (aa0 <slcd_sync_seg_blink+0x30>)
     a8a:	4798      	blx	r3
	return _slcd_sync_seg_blink(&descr->dev, seg, period);
     a8c:	002a      	movs	r2, r5
     a8e:	0031      	movs	r1, r6
     a90:	0020      	movs	r0, r4
     a92:	4b04      	ldr	r3, [pc, #16]	; (aa4 <slcd_sync_seg_blink+0x34>)
     a94:	4798      	blx	r3
}
     a96:	bd70      	pop	{r4, r5, r6, pc}
     a98:	2000      	movs	r0, #0
     a9a:	e7f3      	b.n	a84 <slcd_sync_seg_blink+0x14>
     a9c:	00003910 	.word	0x00003910
     aa0:	00000f19 	.word	0x00000f19
     aa4:	00001b59 	.word	0x00001b59

00000aa8 <slcd_sync_write_char>:

/**
 * \brief              Displays a character
 */
int32_t slcd_sync_write_char(struct slcd_sync_descriptor *const descr, const uint8_t character, uint32_t index)
{
     aa8:	b570      	push	{r4, r5, r6, lr}
     aaa:	0004      	movs	r4, r0
     aac:	000d      	movs	r5, r1
     aae:	0016      	movs	r6, r2
	ASSERT(descr);
     ab0:	1e43      	subs	r3, r0, #1
     ab2:	4198      	sbcs	r0, r3
     ab4:	b2c0      	uxtb	r0, r0
     ab6:	2268      	movs	r2, #104	; 0x68
     ab8:	4904      	ldr	r1, [pc, #16]	; (acc <slcd_sync_write_char+0x24>)
     aba:	4b05      	ldr	r3, [pc, #20]	; (ad0 <slcd_sync_write_char+0x28>)
     abc:	4798      	blx	r3
	return _slcd_sync_write_char(&descr->dev, character, index);
     abe:	0032      	movs	r2, r6
     ac0:	0029      	movs	r1, r5
     ac2:	0020      	movs	r0, r4
     ac4:	4b03      	ldr	r3, [pc, #12]	; (ad4 <slcd_sync_write_char+0x2c>)
     ac6:	4798      	blx	r3
}
     ac8:	bd70      	pop	{r4, r5, r6, pc}
     aca:	46c0      	nop			; (mov r8, r8)
     acc:	00003910 	.word	0x00003910
     ad0:	00000f19 	.word	0x00000f19
     ad4:	00001c99 	.word	0x00001c99

00000ad8 <slcd_sync_write_string>:
/**
 * \brief              Displays character string string
 */
int32_t slcd_sync_write_string(struct slcd_sync_descriptor *const descr, uint8_t *const str, uint32_t len,
                               uint32_t index)
{
     ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
     ada:	46ce      	mov	lr, r9
     adc:	b500      	push	{lr}
     ade:	b082      	sub	sp, #8
     ae0:	9001      	str	r0, [sp, #4]
     ae2:	000f      	movs	r7, r1
     ae4:	0016      	movs	r6, r2
     ae6:	001d      	movs	r5, r3
	uint32_t i;
	ASSERT(descr && len);
     ae8:	2800      	cmp	r0, #0
     aea:	d008      	beq.n	afe <slcd_sync_write_string+0x26>
     aec:	2a00      	cmp	r2, #0
     aee:	d115      	bne.n	b1c <slcd_sync_write_string+0x44>
     af0:	2273      	movs	r2, #115	; 0x73
     af2:	4913      	ldr	r1, [pc, #76]	; (b40 <slcd_sync_write_string+0x68>)
     af4:	2000      	movs	r0, #0
     af6:	4b13      	ldr	r3, [pc, #76]	; (b44 <slcd_sync_write_string+0x6c>)
     af8:	4798      	blx	r3
	for (i = 0; i < len; i++) {
		if (_slcd_sync_write_char(&descr->dev, *(str + i), index + i) != ERR_NONE) {
			return ERR_INVALID_ARG;
		}
	}
	return ERR_NONE;
     afa:	2000      	movs	r0, #0
     afc:	e00a      	b.n	b14 <slcd_sync_write_string+0x3c>
	ASSERT(descr && len);
     afe:	2273      	movs	r2, #115	; 0x73
     b00:	490f      	ldr	r1, [pc, #60]	; (b40 <slcd_sync_write_string+0x68>)
     b02:	2000      	movs	r0, #0
     b04:	4b0f      	ldr	r3, [pc, #60]	; (b44 <slcd_sync_write_string+0x6c>)
     b06:	4798      	blx	r3
	return ERR_NONE;
     b08:	2000      	movs	r0, #0
	for (i = 0; i < len; i++) {
     b0a:	2e00      	cmp	r6, #0
     b0c:	d10b      	bne.n	b26 <slcd_sync_write_string+0x4e>
     b0e:	e001      	b.n	b14 <slcd_sync_write_string+0x3c>
			return ERR_INVALID_ARG;
     b10:	200d      	movs	r0, #13
     b12:	4240      	negs	r0, r0
}
     b14:	b002      	add	sp, #8
     b16:	bc04      	pop	{r2}
     b18:	4691      	mov	r9, r2
     b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(descr && len);
     b1c:	2273      	movs	r2, #115	; 0x73
     b1e:	4908      	ldr	r1, [pc, #32]	; (b40 <slcd_sync_write_string+0x68>)
     b20:	2001      	movs	r0, #1
     b22:	4b08      	ldr	r3, [pc, #32]	; (b44 <slcd_sync_write_string+0x6c>)
     b24:	4798      	blx	r3
{
     b26:	2400      	movs	r4, #0
		if (_slcd_sync_write_char(&descr->dev, *(str + i), index + i) != ERR_NONE) {
     b28:	4b07      	ldr	r3, [pc, #28]	; (b48 <slcd_sync_write_string+0x70>)
     b2a:	4699      	mov	r9, r3
     b2c:	192a      	adds	r2, r5, r4
     b2e:	5d39      	ldrb	r1, [r7, r4]
     b30:	9801      	ldr	r0, [sp, #4]
     b32:	47c8      	blx	r9
     b34:	2800      	cmp	r0, #0
     b36:	d1eb      	bne.n	b10 <slcd_sync_write_string+0x38>
	for (i = 0; i < len; i++) {
     b38:	3401      	adds	r4, #1
     b3a:	42a6      	cmp	r6, r4
     b3c:	d8f6      	bhi.n	b2c <slcd_sync_write_string+0x54>
     b3e:	e7e9      	b.n	b14 <slcd_sync_write_string+0x3c>
     b40:	00003910 	.word	0x00003910
     b44:	00000f19 	.word	0x00000f19
     b48:	00001c99 	.word	0x00001c99

00000b4c <slcd_sync_start_animation>:
/**
 * \brief               Start animation play by a segment array
 */
int32_t slcd_sync_start_animation(struct slcd_sync_descriptor *const descr, const uint32_t segs[], uint32_t len,
                                  const uint32_t period)
{
     b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b4e:	0004      	movs	r4, r0
     b50:	000d      	movs	r5, r1
     b52:	0016      	movs	r6, r2
     b54:	001f      	movs	r7, r3
	ASSERT(descr && segs && len && period);
     b56:	2800      	cmp	r0, #0
     b58:	d012      	beq.n	b80 <slcd_sync_start_animation+0x34>
     b5a:	2900      	cmp	r1, #0
     b5c:	d012      	beq.n	b84 <slcd_sync_start_animation+0x38>
     b5e:	2000      	movs	r0, #0
     b60:	2a00      	cmp	r2, #0
     b62:	d002      	beq.n	b6a <slcd_sync_start_animation+0x1e>
     b64:	0018      	movs	r0, r3
     b66:	1e43      	subs	r3, r0, #1
     b68:	4198      	sbcs	r0, r3
     b6a:	2282      	movs	r2, #130	; 0x82
     b6c:	4906      	ldr	r1, [pc, #24]	; (b88 <slcd_sync_start_animation+0x3c>)
     b6e:	4b07      	ldr	r3, [pc, #28]	; (b8c <slcd_sync_start_animation+0x40>)
     b70:	4798      	blx	r3
	return _slcd_sync_start_animation(&descr->dev, segs, len, period);
     b72:	003b      	movs	r3, r7
     b74:	0032      	movs	r2, r6
     b76:	0029      	movs	r1, r5
     b78:	0020      	movs	r0, r4
     b7a:	4c05      	ldr	r4, [pc, #20]	; (b90 <slcd_sync_start_animation+0x44>)
     b7c:	47a0      	blx	r4
}
     b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && segs && len && period);
     b80:	2000      	movs	r0, #0
     b82:	e7f2      	b.n	b6a <slcd_sync_start_animation+0x1e>
     b84:	2000      	movs	r0, #0
     b86:	e7f0      	b.n	b6a <slcd_sync_start_animation+0x1e>
     b88:	00003910 	.word	0x00003910
     b8c:	00000f19 	.word	0x00000f19
     b90:	00001e1d 	.word	0x00001e1d

00000b94 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b96:	46ce      	mov	lr, r9
     b98:	4647      	mov	r7, r8
     b9a:	b580      	push	{r7, lr}
     b9c:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     b9e:	6803      	ldr	r3, [r0, #0]
     ba0:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     ba2:	2b00      	cmp	r3, #0
     ba4:	d005      	beq.n	bb2 <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     ba6:	688e      	ldr	r6, [r1, #8]
     ba8:	001c      	movs	r4, r3
     baa:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     bac:	2701      	movs	r7, #1
     bae:	1abf      	subs	r7, r7, r2
     bb0:	e00d      	b.n	bce <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
     bb2:	4b12      	ldr	r3, [pc, #72]	; (bfc <timer_add_timer_task+0x68>)
     bb4:	4798      	blx	r3
		return;
     bb6:	e018      	b.n	bea <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     bb8:	18fb      	adds	r3, r7, r3
     bba:	68a0      	ldr	r0, [r4, #8]
     bbc:	4680      	mov	r8, r0
     bbe:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
     bc0:	42b3      	cmp	r3, r6
     bc2:	d20c      	bcs.n	bde <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     bc4:	6823      	ldr	r3, [r4, #0]
     bc6:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     bc8:	2b00      	cmp	r3, #0
     bca:	d00b      	beq.n	be4 <timer_add_timer_task+0x50>
     bcc:	001c      	movs	r4, r3
		if (it->time_label <= time) {
     bce:	6863      	ldr	r3, [r4, #4]
     bd0:	4293      	cmp	r3, r2
     bd2:	d8f1      	bhi.n	bb8 <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
     bd4:	68a0      	ldr	r0, [r4, #8]
     bd6:	4680      	mov	r8, r0
     bd8:	4443      	add	r3, r8
     bda:	1a9b      	subs	r3, r3, r2
     bdc:	e7f0      	b.n	bc0 <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
     bde:	45a4      	cmp	ip, r4
     be0:	d007      	beq.n	bf2 <timer_add_timer_task+0x5e>
     be2:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     be4:	0020      	movs	r0, r4
     be6:	4b06      	ldr	r3, [pc, #24]	; (c00 <timer_add_timer_task+0x6c>)
     be8:	4798      	blx	r3
	}
}
     bea:	bc0c      	pop	{r2, r3}
     bec:	4690      	mov	r8, r2
     bee:	4699      	mov	r9, r3
     bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     bf2:	4648      	mov	r0, r9
     bf4:	4b01      	ldr	r3, [pc, #4]	; (bfc <timer_add_timer_task+0x68>)
     bf6:	4798      	blx	r3
     bf8:	e7f7      	b.n	bea <timer_add_timer_task+0x56>
     bfa:	46c0      	nop			; (mov r8, r8)
     bfc:	00000f45 	.word	0x00000f45
     c00:	00000f71 	.word	0x00000f71

00000c04 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     c04:	b5f0      	push	{r4, r5, r6, r7, lr}
     c06:	46c6      	mov	lr, r8
     c08:	b500      	push	{lr}
     c0a:	b082      	sub	sp, #8
     c0c:	0007      	movs	r7, r0
	return (void *)list->head;
     c0e:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     c10:	6903      	ldr	r3, [r0, #16]
     c12:	3301      	adds	r3, #1
     c14:	4698      	mov	r8, r3
     c16:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     c18:	7e03      	ldrb	r3, [r0, #24]
     c1a:	07db      	lsls	r3, r3, #31
     c1c:	d411      	bmi.n	c42 <timer_process_counted+0x3e>
     c1e:	7e03      	ldrb	r3, [r0, #24]
     c20:	079b      	lsls	r3, r3, #30
     c22:	d40e      	bmi.n	c42 <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     c24:	2c00      	cmp	r4, #0
     c26:	d010      	beq.n	c4a <timer_process_counted+0x46>
     c28:	4643      	mov	r3, r8
     c2a:	6862      	ldr	r2, [r4, #4]
     c2c:	1a9b      	subs	r3, r3, r2
     c2e:	68a2      	ldr	r2, [r4, #8]
     c30:	4293      	cmp	r3, r2
     c32:	d30a      	bcc.n	c4a <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     c34:	2314      	movs	r3, #20
     c36:	469c      	mov	ip, r3
     c38:	4484      	add	ip, r0
     c3a:	4663      	mov	r3, ip
     c3c:	9301      	str	r3, [sp, #4]
     c3e:	4e12      	ldr	r6, [pc, #72]	; (c88 <timer_process_counted+0x84>)
     c40:	e014      	b.n	c6c <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     c42:	7e3b      	ldrb	r3, [r7, #24]
     c44:	2202      	movs	r2, #2
     c46:	4313      	orrs	r3, r2
     c48:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     c4a:	b002      	add	sp, #8
     c4c:	bc04      	pop	{r2}
     c4e:	4690      	mov	r8, r2
     c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c52:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
     c54:	68e3      	ldr	r3, [r4, #12]
     c56:	0020      	movs	r0, r4
     c58:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     c5a:	2d00      	cmp	r5, #0
     c5c:	d0f5      	beq.n	c4a <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     c5e:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     c60:	4643      	mov	r3, r8
     c62:	686a      	ldr	r2, [r5, #4]
     c64:	1a9b      	subs	r3, r3, r2
     c66:	68aa      	ldr	r2, [r5, #8]
     c68:	4293      	cmp	r3, r2
     c6a:	d3ee      	bcc.n	c4a <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
     c6c:	9801      	ldr	r0, [sp, #4]
     c6e:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
     c70:	7c23      	ldrb	r3, [r4, #16]
     c72:	2b01      	cmp	r3, #1
     c74:	d1ed      	bne.n	c52 <timer_process_counted+0x4e>
			tmp->time_label = time;
     c76:	4643      	mov	r3, r8
     c78:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     c7a:	4642      	mov	r2, r8
     c7c:	0021      	movs	r1, r4
     c7e:	9801      	ldr	r0, [sp, #4]
     c80:	4b02      	ldr	r3, [pc, #8]	; (c8c <timer_process_counted+0x88>)
     c82:	4798      	blx	r3
     c84:	e7e5      	b.n	c52 <timer_process_counted+0x4e>
     c86:	46c0      	nop			; (mov r8, r8)
     c88:	00000f79 	.word	0x00000f79
     c8c:	00000b95 	.word	0x00000b95

00000c90 <timer_init>:
{
     c90:	b570      	push	{r4, r5, r6, lr}
     c92:	0005      	movs	r5, r0
     c94:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     c96:	2800      	cmp	r0, #0
     c98:	d011      	beq.n	cbe <timer_init+0x2e>
     c9a:	0008      	movs	r0, r1
     c9c:	1e43      	subs	r3, r0, #1
     c9e:	4198      	sbcs	r0, r3
     ca0:	b2c0      	uxtb	r0, r0
     ca2:	223b      	movs	r2, #59	; 0x3b
     ca4:	4907      	ldr	r1, [pc, #28]	; (cc4 <timer_init+0x34>)
     ca6:	4b08      	ldr	r3, [pc, #32]	; (cc8 <timer_init+0x38>)
     ca8:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     caa:	0021      	movs	r1, r4
     cac:	0028      	movs	r0, r5
     cae:	4b07      	ldr	r3, [pc, #28]	; (ccc <timer_init+0x3c>)
     cb0:	4798      	blx	r3
	descr->time                           = 0;
     cb2:	2300      	movs	r3, #0
     cb4:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     cb6:	4b06      	ldr	r3, [pc, #24]	; (cd0 <timer_init+0x40>)
     cb8:	602b      	str	r3, [r5, #0]
}
     cba:	2000      	movs	r0, #0
     cbc:	bd70      	pop	{r4, r5, r6, pc}
     cbe:	2000      	movs	r0, #0
     cc0:	e7ef      	b.n	ca2 <timer_init+0x12>
     cc2:	46c0      	nop			; (mov r8, r8)
     cc4:	0000392c 	.word	0x0000392c
     cc8:	00000f19 	.word	0x00000f19
     ccc:	000010f9 	.word	0x000010f9
     cd0:	00000c05 	.word	0x00000c05

00000cd4 <timer_start>:
{
     cd4:	b510      	push	{r4, lr}
     cd6:	0004      	movs	r4, r0
	ASSERT(descr);
     cd8:	1e43      	subs	r3, r0, #1
     cda:	4198      	sbcs	r0, r3
     cdc:	b2c0      	uxtb	r0, r0
     cde:	2253      	movs	r2, #83	; 0x53
     ce0:	4907      	ldr	r1, [pc, #28]	; (d00 <timer_start+0x2c>)
     ce2:	4b08      	ldr	r3, [pc, #32]	; (d04 <timer_start+0x30>)
     ce4:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     ce6:	0020      	movs	r0, r4
     ce8:	4b07      	ldr	r3, [pc, #28]	; (d08 <timer_start+0x34>)
     cea:	4798      	blx	r3
     cec:	2800      	cmp	r0, #0
     cee:	d104      	bne.n	cfa <timer_start+0x26>
	_timer_start(&descr->device);
     cf0:	0020      	movs	r0, r4
     cf2:	4b06      	ldr	r3, [pc, #24]	; (d0c <timer_start+0x38>)
     cf4:	4798      	blx	r3
	return ERR_NONE;
     cf6:	2000      	movs	r0, #0
}
     cf8:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     cfa:	2011      	movs	r0, #17
     cfc:	4240      	negs	r0, r0
     cfe:	e7fb      	b.n	cf8 <timer_start+0x24>
     d00:	0000392c 	.word	0x0000392c
     d04:	00000f19 	.word	0x00000f19
     d08:	000011c1 	.word	0x000011c1
     d0c:	00001165 	.word	0x00001165

00000d10 <timer_add_task>:
{
     d10:	b570      	push	{r4, r5, r6, lr}
     d12:	b082      	sub	sp, #8
     d14:	0004      	movs	r4, r0
     d16:	000d      	movs	r5, r1
	ASSERT(descr && task);
     d18:	2800      	cmp	r0, #0
     d1a:	d024      	beq.n	d66 <timer_add_task+0x56>
     d1c:	0008      	movs	r0, r1
     d1e:	1e43      	subs	r3, r0, #1
     d20:	4198      	sbcs	r0, r3
     d22:	b2c0      	uxtb	r0, r0
     d24:	227a      	movs	r2, #122	; 0x7a
     d26:	491e      	ldr	r1, [pc, #120]	; (da0 <timer_add_task+0x90>)
     d28:	4b1e      	ldr	r3, [pc, #120]	; (da4 <timer_add_task+0x94>)
     d2a:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     d2c:	7e23      	ldrb	r3, [r4, #24]
     d2e:	2201      	movs	r2, #1
     d30:	4313      	orrs	r3, r2
     d32:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     d34:	0026      	movs	r6, r4
     d36:	3614      	adds	r6, #20
     d38:	0029      	movs	r1, r5
     d3a:	0030      	movs	r0, r6
     d3c:	4b1a      	ldr	r3, [pc, #104]	; (da8 <timer_add_task+0x98>)
     d3e:	4798      	blx	r3
     d40:	2800      	cmp	r0, #0
     d42:	d112      	bne.n	d6a <timer_add_task+0x5a>
	task->time_label = descr->time;
     d44:	6923      	ldr	r3, [r4, #16]
     d46:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     d48:	6922      	ldr	r2, [r4, #16]
     d4a:	0029      	movs	r1, r5
     d4c:	0030      	movs	r0, r6
     d4e:	4b17      	ldr	r3, [pc, #92]	; (dac <timer_add_task+0x9c>)
     d50:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     d52:	7e23      	ldrb	r3, [r4, #24]
     d54:	2201      	movs	r2, #1
     d56:	4393      	bics	r3, r2
     d58:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     d5a:	7e23      	ldrb	r3, [r4, #24]
	return ERR_NONE;
     d5c:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     d5e:	079b      	lsls	r3, r3, #30
     d60:	d40f      	bmi.n	d82 <timer_add_task+0x72>
}
     d62:	b002      	add	sp, #8
     d64:	bd70      	pop	{r4, r5, r6, pc}
     d66:	2000      	movs	r0, #0
     d68:	e7dc      	b.n	d24 <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     d6a:	7e23      	ldrb	r3, [r4, #24]
     d6c:	2201      	movs	r2, #1
     d6e:	4393      	bics	r3, r2
     d70:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     d72:	327e      	adds	r2, #126	; 0x7e
     d74:	490a      	ldr	r1, [pc, #40]	; (da0 <timer_add_task+0x90>)
     d76:	2000      	movs	r0, #0
     d78:	4b0a      	ldr	r3, [pc, #40]	; (da4 <timer_add_task+0x94>)
     d7a:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     d7c:	2012      	movs	r0, #18
     d7e:	4240      	negs	r0, r0
     d80:	e7ef      	b.n	d62 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
     d82:	a801      	add	r0, sp, #4
     d84:	4b0a      	ldr	r3, [pc, #40]	; (db0 <timer_add_task+0xa0>)
     d86:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     d88:	7e23      	ldrb	r3, [r4, #24]
     d8a:	2202      	movs	r2, #2
     d8c:	4393      	bics	r3, r2
     d8e:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     d90:	0020      	movs	r0, r4
     d92:	4b08      	ldr	r3, [pc, #32]	; (db4 <timer_add_task+0xa4>)
     d94:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     d96:	a801      	add	r0, sp, #4
     d98:	4b07      	ldr	r3, [pc, #28]	; (db8 <timer_add_task+0xa8>)
     d9a:	4798      	blx	r3
	return ERR_NONE;
     d9c:	2000      	movs	r0, #0
     d9e:	e7e0      	b.n	d62 <timer_add_task+0x52>
     da0:	0000392c 	.word	0x0000392c
     da4:	00000f19 	.word	0x00000f19
     da8:	00000f21 	.word	0x00000f21
     dac:	00000b95 	.word	0x00000b95
     db0:	00000831 	.word	0x00000831
     db4:	000011d9 	.word	0x000011d9
     db8:	0000083f 	.word	0x0000083f

00000dbc <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     dbe:	46ce      	mov	lr, r9
     dc0:	4647      	mov	r7, r8
     dc2:	b580      	push	{r7, lr}
     dc4:	0004      	movs	r4, r0
     dc6:	000f      	movs	r7, r1
     dc8:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     dca:	2800      	cmp	r0, #0
     dcc:	d026      	beq.n	e1c <usart_sync_write+0x60>
     dce:	2900      	cmp	r1, #0
     dd0:	d026      	beq.n	e20 <usart_sync_write+0x64>
     dd2:	0010      	movs	r0, r2
     dd4:	1e43      	subs	r3, r0, #1
     dd6:	4198      	sbcs	r0, r3
     dd8:	22f1      	movs	r2, #241	; 0xf1
     dda:	4912      	ldr	r1, [pc, #72]	; (e24 <usart_sync_write+0x68>)
     ddc:	4b12      	ldr	r3, [pc, #72]	; (e28 <usart_sync_write+0x6c>)
     dde:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     de0:	3408      	adds	r4, #8
     de2:	4d12      	ldr	r5, [pc, #72]	; (e2c <usart_sync_write+0x70>)
     de4:	0020      	movs	r0, r4
     de6:	47a8      	blx	r5
     de8:	2800      	cmp	r0, #0
     dea:	d0fb      	beq.n	de4 <usart_sync_write+0x28>
     dec:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     dee:	4b10      	ldr	r3, [pc, #64]	; (e30 <usart_sync_write+0x74>)
     df0:	4699      	mov	r9, r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     df2:	4d0e      	ldr	r5, [pc, #56]	; (e2c <usart_sync_write+0x70>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     df4:	5db9      	ldrb	r1, [r7, r6]
     df6:	0020      	movs	r0, r4
     df8:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     dfa:	0020      	movs	r0, r4
     dfc:	47a8      	blx	r5
     dfe:	2800      	cmp	r0, #0
     e00:	d0fb      	beq.n	dfa <usart_sync_write+0x3e>
			;
	} while (++offset < length);
     e02:	3601      	adds	r6, #1
     e04:	4546      	cmp	r6, r8
     e06:	d3f5      	bcc.n	df4 <usart_sync_write+0x38>
	while (!_usart_sync_is_transmit_done(&descr->device))
     e08:	4d0a      	ldr	r5, [pc, #40]	; (e34 <usart_sync_write+0x78>)
     e0a:	0020      	movs	r0, r4
     e0c:	47a8      	blx	r5
     e0e:	2800      	cmp	r0, #0
     e10:	d0fb      	beq.n	e0a <usart_sync_write+0x4e>
		;
	return (int32_t)offset;
}
     e12:	0030      	movs	r0, r6
     e14:	bc0c      	pop	{r2, r3}
     e16:	4690      	mov	r8, r2
     e18:	4699      	mov	r9, r3
     e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     e1c:	2000      	movs	r0, #0
     e1e:	e7db      	b.n	dd8 <usart_sync_write+0x1c>
     e20:	2000      	movs	r0, #0
     e22:	e7d9      	b.n	dd8 <usart_sync_write+0x1c>
     e24:	00003944 	.word	0x00003944
     e28:	00000f19 	.word	0x00000f19
     e2c:	00001405 	.word	0x00001405
     e30:	000013f5 	.word	0x000013f5
     e34:	0000140f 	.word	0x0000140f

00000e38 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e3a:	46ce      	mov	lr, r9
     e3c:	4647      	mov	r7, r8
     e3e:	b580      	push	{r7, lr}
     e40:	0004      	movs	r4, r0
     e42:	000f      	movs	r7, r1
     e44:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     e46:	2800      	cmp	r0, #0
     e48:	d01d      	beq.n	e86 <usart_sync_read+0x4e>
     e4a:	2900      	cmp	r1, #0
     e4c:	d01d      	beq.n	e8a <usart_sync_read+0x52>
     e4e:	0010      	movs	r0, r2
     e50:	1e43      	subs	r3, r0, #1
     e52:	4198      	sbcs	r0, r3
     e54:	2286      	movs	r2, #134	; 0x86
     e56:	0052      	lsls	r2, r2, #1
     e58:	490d      	ldr	r1, [pc, #52]	; (e90 <usart_sync_read+0x58>)
     e5a:	4b0e      	ldr	r3, [pc, #56]	; (e94 <usart_sync_read+0x5c>)
     e5c:	4798      	blx	r3
	uint32_t                      offset = 0;
     e5e:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     e60:	3408      	adds	r4, #8
     e62:	4d0d      	ldr	r5, [pc, #52]	; (e98 <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     e64:	4b0d      	ldr	r3, [pc, #52]	; (e9c <usart_sync_read+0x64>)
     e66:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
     e68:	0020      	movs	r0, r4
     e6a:	47a8      	blx	r5
     e6c:	2800      	cmp	r0, #0
     e6e:	d0fb      	beq.n	e68 <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     e70:	0020      	movs	r0, r4
     e72:	47c8      	blx	r9
     e74:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     e76:	3601      	adds	r6, #1
     e78:	4546      	cmp	r6, r8
     e7a:	d3f5      	bcc.n	e68 <usart_sync_read+0x30>

	return (int32_t)offset;
}
     e7c:	0030      	movs	r0, r6
     e7e:	bc0c      	pop	{r2, r3}
     e80:	4690      	mov	r8, r2
     e82:	4699      	mov	r9, r3
     e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     e86:	2000      	movs	r0, #0
     e88:	e7e4      	b.n	e54 <usart_sync_read+0x1c>
     e8a:	2000      	movs	r0, #0
     e8c:	e7e2      	b.n	e54 <usart_sync_read+0x1c>
     e8e:	46c0      	nop			; (mov r8, r8)
     e90:	00003944 	.word	0x00003944
     e94:	00000f19 	.word	0x00000f19
     e98:	00001419 	.word	0x00001419
     e9c:	000013fd 	.word	0x000013fd

00000ea0 <usart_sync_init>:
{
     ea0:	b570      	push	{r4, r5, r6, lr}
     ea2:	0005      	movs	r5, r0
     ea4:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     ea6:	2800      	cmp	r0, #0
     ea8:	d013      	beq.n	ed2 <usart_sync_init+0x32>
     eaa:	0008      	movs	r0, r1
     eac:	1e43      	subs	r3, r0, #1
     eae:	4198      	sbcs	r0, r3
     eb0:	b2c0      	uxtb	r0, r0
     eb2:	2234      	movs	r2, #52	; 0x34
     eb4:	4908      	ldr	r1, [pc, #32]	; (ed8 <usart_sync_init+0x38>)
     eb6:	4b09      	ldr	r3, [pc, #36]	; (edc <usart_sync_init+0x3c>)
     eb8:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     eba:	0028      	movs	r0, r5
     ebc:	3008      	adds	r0, #8
     ebe:	0021      	movs	r1, r4
     ec0:	4b07      	ldr	r3, [pc, #28]	; (ee0 <usart_sync_init+0x40>)
     ec2:	4798      	blx	r3
	if (init_status) {
     ec4:	2800      	cmp	r0, #0
     ec6:	d103      	bne.n	ed0 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
     ec8:	4b06      	ldr	r3, [pc, #24]	; (ee4 <usart_sync_init+0x44>)
     eca:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     ecc:	4b06      	ldr	r3, [pc, #24]	; (ee8 <usart_sync_init+0x48>)
     ece:	602b      	str	r3, [r5, #0]
}
     ed0:	bd70      	pop	{r4, r5, r6, pc}
     ed2:	2000      	movs	r0, #0
     ed4:	e7ed      	b.n	eb2 <usart_sync_init+0x12>
     ed6:	46c0      	nop			; (mov r8, r8)
     ed8:	00003944 	.word	0x00003944
     edc:	00000f19 	.word	0x00000f19
     ee0:	000013b5 	.word	0x000013b5
     ee4:	00000e39 	.word	0x00000e39
     ee8:	00000dbd 	.word	0x00000dbd

00000eec <usart_sync_enable>:
{
     eec:	b510      	push	{r4, lr}
     eee:	0004      	movs	r4, r0
	ASSERT(descr);
     ef0:	1e43      	subs	r3, r0, #1
     ef2:	4198      	sbcs	r0, r3
     ef4:	b2c0      	uxtb	r0, r0
     ef6:	2253      	movs	r2, #83	; 0x53
     ef8:	4904      	ldr	r1, [pc, #16]	; (f0c <usart_sync_enable+0x20>)
     efa:	4b05      	ldr	r3, [pc, #20]	; (f10 <usart_sync_enable+0x24>)
     efc:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     efe:	0020      	movs	r0, r4
     f00:	3008      	adds	r0, #8
     f02:	4b04      	ldr	r3, [pc, #16]	; (f14 <usart_sync_enable+0x28>)
     f04:	4798      	blx	r3
}
     f06:	2000      	movs	r0, #0
     f08:	bd10      	pop	{r4, pc}
     f0a:	46c0      	nop			; (mov r8, r8)
     f0c:	00003944 	.word	0x00003944
     f10:	00000f19 	.word	0x00000f19
     f14:	000013e1 	.word	0x000013e1

00000f18 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     f18:	2800      	cmp	r0, #0
     f1a:	d100      	bne.n	f1e <assert+0x6>
		__asm("BKPT #0");
     f1c:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     f1e:	4770      	bx	lr

00000f20 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     f20:	6803      	ldr	r3, [r0, #0]
     f22:	2b00      	cmp	r3, #0
     f24:	d00a      	beq.n	f3c <is_list_element+0x1c>
		if (it == element) {
     f26:	428b      	cmp	r3, r1
     f28:	d00a      	beq.n	f40 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
     f2a:	681b      	ldr	r3, [r3, #0]
     f2c:	2b00      	cmp	r3, #0
     f2e:	d003      	beq.n	f38 <is_list_element+0x18>
		if (it == element) {
     f30:	4299      	cmp	r1, r3
     f32:	d1fa      	bne.n	f2a <is_list_element+0xa>
			return true;
     f34:	2001      	movs	r0, #1
     f36:	e000      	b.n	f3a <is_list_element+0x1a>
		}
	}

	return false;
     f38:	2000      	movs	r0, #0
}
     f3a:	4770      	bx	lr
	return false;
     f3c:	2000      	movs	r0, #0
     f3e:	e7fc      	b.n	f3a <is_list_element+0x1a>
			return true;
     f40:	2001      	movs	r0, #1
     f42:	e7fa      	b.n	f3a <is_list_element+0x1a>

00000f44 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     f44:	b570      	push	{r4, r5, r6, lr}
     f46:	0004      	movs	r4, r0
     f48:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     f4a:	4b06      	ldr	r3, [pc, #24]	; (f64 <list_insert_as_head+0x20>)
     f4c:	4798      	blx	r3
     f4e:	2301      	movs	r3, #1
     f50:	4058      	eors	r0, r3
     f52:	b2c0      	uxtb	r0, r0
     f54:	2239      	movs	r2, #57	; 0x39
     f56:	4904      	ldr	r1, [pc, #16]	; (f68 <list_insert_as_head+0x24>)
     f58:	4b04      	ldr	r3, [pc, #16]	; (f6c <list_insert_as_head+0x28>)
     f5a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     f5c:	6823      	ldr	r3, [r4, #0]
     f5e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     f60:	6025      	str	r5, [r4, #0]
}
     f62:	bd70      	pop	{r4, r5, r6, pc}
     f64:	00000f21 	.word	0x00000f21
     f68:	00003960 	.word	0x00003960
     f6c:	00000f19 	.word	0x00000f19

00000f70 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     f70:	6803      	ldr	r3, [r0, #0]
     f72:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     f74:	6001      	str	r1, [r0, #0]
}
     f76:	4770      	bx	lr

00000f78 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     f78:	6803      	ldr	r3, [r0, #0]
     f7a:	2b00      	cmp	r3, #0
     f7c:	d001      	beq.n	f82 <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     f7e:	681a      	ldr	r2, [r3, #0]
     f80:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     f82:	0018      	movs	r0, r3
     f84:	4770      	bx	lr
	...

00000f88 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     f88:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     f8a:	4a06      	ldr	r2, [pc, #24]	; (fa4 <_sbrk+0x1c>)
     f8c:	6812      	ldr	r2, [r2, #0]
     f8e:	2a00      	cmp	r2, #0
     f90:	d004      	beq.n	f9c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     f92:	4a04      	ldr	r2, [pc, #16]	; (fa4 <_sbrk+0x1c>)
     f94:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     f96:	18c3      	adds	r3, r0, r3
     f98:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     f9a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     f9c:	4902      	ldr	r1, [pc, #8]	; (fa8 <_sbrk+0x20>)
     f9e:	4a01      	ldr	r2, [pc, #4]	; (fa4 <_sbrk+0x1c>)
     fa0:	6011      	str	r1, [r2, #0]
     fa2:	e7f6      	b.n	f92 <_sbrk+0xa>
     fa4:	20000100 	.word	0x20000100
     fa8:	20002218 	.word	0x20002218

00000fac <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     fac:	2001      	movs	r0, #1
     fae:	4240      	negs	r0, r0
     fb0:	4770      	bx	lr

00000fb2 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     fb2:	2380      	movs	r3, #128	; 0x80
     fb4:	019b      	lsls	r3, r3, #6
     fb6:	604b      	str	r3, [r1, #4]

	return 0;
}
     fb8:	2000      	movs	r0, #0
     fba:	4770      	bx	lr

00000fbc <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     fbc:	2001      	movs	r0, #1
     fbe:	4770      	bx	lr

00000fc0 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     fc0:	2000      	movs	r0, #0
     fc2:	4770      	bx	lr

00000fc4 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
     fc4:	b510      	push	{r4, lr}
     fc6:	0003      	movs	r3, r0
		return (ms * (freq / 100000) + 2) / 3 * 100;
     fc8:	0080      	lsls	r0, r0, #2
     fca:	18c0      	adds	r0, r0, r3
     fcc:	0140      	lsls	r0, r0, #5
     fce:	3002      	adds	r0, #2
     fd0:	2103      	movs	r1, #3
     fd2:	4b02      	ldr	r3, [pc, #8]	; (fdc <_get_cycles_for_ms+0x18>)
     fd4:	4798      	blx	r3
     fd6:	2364      	movs	r3, #100	; 0x64
     fd8:	4358      	muls	r0, r3
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     fda:	bd10      	pop	{r4, pc}
     fdc:	0000278d 	.word	0x0000278d

00000fe0 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     fe0:	3901      	subs	r1, #1
     fe2:	d8fd      	bhi.n	fe0 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     fe4:	4770      	bx	lr
	...

00000fe8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     fe8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     fea:	4a0a      	ldr	r2, [pc, #40]	; (1014 <_init_chip+0x2c>)
     fec:	6853      	ldr	r3, [r2, #4]
     fee:	2104      	movs	r1, #4
     ff0:	430b      	orrs	r3, r1
     ff2:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
     ff4:	2002      	movs	r0, #2
     ff6:	4b08      	ldr	r3, [pc, #32]	; (1018 <_init_chip+0x30>)
     ff8:	4798      	blx	r3

	_osc32kctrl_init_sources();
     ffa:	4b08      	ldr	r3, [pc, #32]	; (101c <_init_chip+0x34>)
     ffc:	4798      	blx	r3
	_oscctrl_init_sources();
     ffe:	4b08      	ldr	r3, [pc, #32]	; (1020 <_init_chip+0x38>)
    1000:	4798      	blx	r3
	_mclk_init();
    1002:	4b08      	ldr	r3, [pc, #32]	; (1024 <_init_chip+0x3c>)
    1004:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1006:	4b08      	ldr	r3, [pc, #32]	; (1028 <_init_chip+0x40>)
    1008:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    100a:	201f      	movs	r0, #31
    100c:	4b07      	ldr	r3, [pc, #28]	; (102c <_init_chip+0x44>)
    100e:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
    1010:	bd10      	pop	{r4, pc}
    1012:	46c0      	nop			; (mov r8, r8)
    1014:	41004000 	.word	0x41004000
    1018:	000010cd 	.word	0x000010cd
    101c:	00001079 	.word	0x00001079
    1020:	00001091 	.word	0x00001091
    1024:	00001069 	.word	0x00001069
    1028:	000010c9 	.word	0x000010c9
    102c:	00001031 	.word	0x00001031

00001030 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1030:	07c3      	lsls	r3, r0, #31
    1032:	d507      	bpl.n	1044 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1034:	4a09      	ldr	r2, [pc, #36]	; (105c <_gclk_init_generators_by_fref+0x2c>)
    1036:	4b0a      	ldr	r3, [pc, #40]	; (1060 <_gclk_init_generators_by_fref+0x30>)
    1038:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    103a:	0019      	movs	r1, r3
    103c:	227d      	movs	r2, #125	; 0x7d
    103e:	684b      	ldr	r3, [r1, #4]
    1040:	421a      	tst	r2, r3
    1042:	d1fc      	bne.n	103e <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1044:	0783      	lsls	r3, r0, #30
    1046:	d507      	bpl.n	1058 <_gclk_init_generators_by_fref+0x28>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1048:	4a06      	ldr	r2, [pc, #24]	; (1064 <_gclk_init_generators_by_fref+0x34>)
    104a:	4b05      	ldr	r3, [pc, #20]	; (1060 <_gclk_init_generators_by_fref+0x30>)
    104c:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    104e:	0019      	movs	r1, r3
    1050:	227d      	movs	r2, #125	; 0x7d
    1052:	684b      	ldr	r3, [r1, #4]
    1054:	421a      	tst	r2, r3
    1056:	d1fc      	bne.n	1052 <_gclk_init_generators_by_fref+0x22>
		        | (CONF_GCLK_GEN_4_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_4_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_4_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_4_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
}
    1058:	4770      	bx	lr
    105a:	46c0      	nop			; (mov r8, r8)
    105c:	00010105 	.word	0x00010105
    1060:	40001c00 	.word	0x40001c00
    1064:	00040105 	.word	0x00040105

00001068 <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
    1068:	4b02      	ldr	r3, [pc, #8]	; (1074 <_mclk_init+0xc>)
    106a:	2208      	movs	r2, #8
    106c:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->CPUDIV.reg = data;
    106e:	3a07      	subs	r2, #7
    1070:	711a      	strb	r2, [r3, #4]
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
    1072:	4770      	bx	lr
    1074:	40000800 	.word	0x40000800

00001078 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1078:	4b04      	ldr	r3, [pc, #16]	; (108c <_osc32kctrl_init_sources+0x14>)
    107a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    107c:	21f8      	movs	r1, #248	; 0xf8
    107e:	0149      	lsls	r1, r1, #5
    1080:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1082:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1084:	2201      	movs	r2, #1
    1086:	741a      	strb	r2, [r3, #16]
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    1088:	4770      	bx	lr
    108a:	46c0      	nop			; (mov r8, r8)
    108c:	40001400 	.word	0x40001400

00001090 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
    1090:	228e      	movs	r2, #142	; 0x8e
    1092:	4b0c      	ldr	r3, [pc, #48]	; (10c4 <_oscctrl_init_sources+0x34>)
    1094:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    1096:	0018      	movs	r0, r3
    1098:	2138      	movs	r1, #56	; 0x38
    109a:	3a8c      	subs	r2, #140	; 0x8c
    109c:	5c43      	ldrb	r3, [r0, r1]
    109e:	4213      	tst	r3, r2
    10a0:	d1fc      	bne.n	109c <_oscctrl_init_sources+0xc>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
    10a2:	4908      	ldr	r1, [pc, #32]	; (10c4 <_oscctrl_init_sources+0x34>)
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
    10a4:	2210      	movs	r2, #16
    10a6:	68cb      	ldr	r3, [r1, #12]
    10a8:	421a      	tst	r2, r3
    10aa:	d0fc      	beq.n	10a6 <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    10ac:	4a05      	ldr	r2, [pc, #20]	; (10c4 <_oscctrl_init_sources+0x34>)
    10ae:	7d13      	ldrb	r3, [r2, #20]
    10b0:	2180      	movs	r1, #128	; 0x80
    10b2:	430b      	orrs	r3, r1
    10b4:	7513      	strb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    10b6:	0010      	movs	r0, r2
    10b8:	3948      	subs	r1, #72	; 0x48
    10ba:	220e      	movs	r2, #14
    10bc:	5c43      	ldrb	r3, [r0, r1]
    10be:	4213      	tst	r3, r2
    10c0:	d1fc      	bne.n	10bc <_oscctrl_init_sources+0x2c>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    10c2:	4770      	bx	lr
    10c4:	40001000 	.word	0x40001000

000010c8 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
    10c8:	4770      	bx	lr
	...

000010cc <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
    10cc:	4b09      	ldr	r3, [pc, #36]	; (10f4 <_set_performance_level+0x28>)
    10ce:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
    10d0:	2203      	movs	r2, #3
    10d2:	4013      	ands	r3, r2
    10d4:	4298      	cmp	r0, r3
    10d6:	d00b      	beq.n	10f0 <_set_performance_level+0x24>
	((Pm *)hw)->INTFLAG.reg = mask;
    10d8:	4a06      	ldr	r2, [pc, #24]	; (10f4 <_set_performance_level+0x28>)
    10da:	23ff      	movs	r3, #255	; 0xff
    10dc:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
    10de:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
    10e0:	2103      	movs	r1, #3
    10e2:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
    10e4:	4008      	ands	r0, r1
    10e6:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
    10e8:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
    10ea:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
    10ec:	2b00      	cmp	r3, #0
    10ee:	d0fc      	beq.n	10ea <_set_performance_level+0x1e>
			;
	}
}
    10f0:	4770      	bx	lr
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	40000400 	.word	0x40000400

000010f8 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    10f8:	b570      	push	{r4, r5, r6, lr}
    10fa:	0005      	movs	r5, r0
    10fc:	000c      	movs	r4, r1
	ASSERT(dev);
    10fe:	1e43      	subs	r3, r0, #1
    1100:	4198      	sbcs	r0, r3
    1102:	b2c0      	uxtb	r0, r0
    1104:	2230      	movs	r2, #48	; 0x30
    1106:	4912      	ldr	r1, [pc, #72]	; (1150 <_timer_init+0x58>)
    1108:	4b12      	ldr	r3, [pc, #72]	; (1154 <_timer_init+0x5c>)
    110a:	4798      	blx	r3

	dev->hw = hw;
    110c:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    110e:	2301      	movs	r3, #1
    1110:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1112:	4a11      	ldr	r2, [pc, #68]	; (1158 <_timer_init+0x60>)
    1114:	6923      	ldr	r3, [r4, #16]
    1116:	4213      	tst	r3, r2
    1118:	d1fc      	bne.n	1114 <_timer_init+0x1c>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    111a:	68eb      	ldr	r3, [r5, #12]
    111c:	2101      	movs	r1, #1
    111e:	691a      	ldr	r2, [r3, #16]
    1120:	4211      	tst	r1, r2
    1122:	d1fc      	bne.n	111e <_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1124:	4a0d      	ldr	r2, [pc, #52]	; (115c <_timer_init+0x64>)
    1126:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1128:	490b      	ldr	r1, [pc, #44]	; (1158 <_timer_init+0x60>)
    112a:	691a      	ldr	r2, [r3, #16]
    112c:	420a      	tst	r2, r1
    112e:	d1fc      	bne.n	112a <_timer_init+0x32>
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    1130:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1132:	2320      	movs	r3, #32
    1134:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1136:	2120      	movs	r1, #32
    1138:	6913      	ldr	r3, [r2, #16]
    113a:	4219      	tst	r1, r3
    113c:	d1fc      	bne.n	1138 <_timer_init+0x40>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    113e:	2380      	movs	r3, #128	; 0x80
    1140:	005b      	lsls	r3, r3, #1
    1142:	68ea      	ldr	r2, [r5, #12]
    1144:	8153      	strh	r3, [r2, #10]
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);

	_rtc_dev = dev;
    1146:	4b06      	ldr	r3, [pc, #24]	; (1160 <_timer_init+0x68>)
    1148:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
    114a:	2000      	movs	r0, #0
    114c:	bd70      	pop	{r4, r5, r6, pc}
    114e:	46c0      	nop			; (mov r8, r8)
    1150:	00003980 	.word	0x00003980
    1154:	00000f19 	.word	0x00000f19
    1158:	00008003 	.word	0x00008003
    115c:	ffff8080 	.word	0xffff8080
    1160:	20000104 	.word	0x20000104

00001164 <_timer_start>:

/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const dev)
{
    1164:	b510      	push	{r4, lr}
    1166:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
    1168:	d01f      	beq.n	11aa <_timer_start+0x46>
    116a:	68c0      	ldr	r0, [r0, #12]
    116c:	1e43      	subs	r3, r0, #1
    116e:	4198      	sbcs	r0, r3
    1170:	b2c0      	uxtb	r0, r0
    1172:	225c      	movs	r2, #92	; 0x5c
    1174:	490e      	ldr	r1, [pc, #56]	; (11b0 <_timer_start+0x4c>)
    1176:	4b0f      	ldr	r3, [pc, #60]	; (11b4 <_timer_start+0x50>)
    1178:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    117a:	2204      	movs	r2, #4
    117c:	4b0e      	ldr	r3, [pc, #56]	; (11b8 <_timer_start+0x54>)
    117e:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(RTC_IRQn);
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    1180:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    1182:	2300      	movs	r3, #0
    1184:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1186:	2108      	movs	r1, #8
    1188:	6913      	ldr	r3, [r2, #16]
    118a:	4219      	tst	r1, r3
    118c:	d1fc      	bne.n	1188 <_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    118e:	68e3      	ldr	r3, [r4, #12]
    1190:	2108      	movs	r1, #8
    1192:	691a      	ldr	r2, [r3, #16]
    1194:	4211      	tst	r1, r2
    1196:	d1fc      	bne.n	1192 <_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    1198:	881a      	ldrh	r2, [r3, #0]
    119a:	2102      	movs	r1, #2
    119c:	430a      	orrs	r2, r1
    119e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    11a0:	4906      	ldr	r1, [pc, #24]	; (11bc <_timer_start+0x58>)
    11a2:	691a      	ldr	r2, [r3, #16]
    11a4:	420a      	tst	r2, r1
    11a6:	d1fc      	bne.n	11a2 <_timer_start+0x3e>
	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
}
    11a8:	bd10      	pop	{r4, pc}
    11aa:	2000      	movs	r0, #0
    11ac:	e7e1      	b.n	1172 <_timer_start+0xe>
    11ae:	46c0      	nop			; (mov r8, r8)
    11b0:	00003980 	.word	0x00003980
    11b4:	00000f19 	.word	0x00000f19
    11b8:	e000e100 	.word	0xe000e100
    11bc:	00008003 	.word	0x00008003

000011c0 <_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    11c0:	68c2      	ldr	r2, [r0, #12]
    11c2:	4904      	ldr	r1, [pc, #16]	; (11d4 <_timer_is_started+0x14>)
    11c4:	6913      	ldr	r3, [r2, #16]
    11c6:	420b      	tst	r3, r1
    11c8:	d1fc      	bne.n	11c4 <_timer_is_started+0x4>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    11ca:	8810      	ldrh	r0, [r2, #0]
	return (bool)tmp;
    11cc:	0780      	lsls	r0, r0, #30
    11ce:	0fc0      	lsrs	r0, r0, #31
}
    11d0:	4770      	bx	lr
    11d2:	46c0      	nop			; (mov r8, r8)
    11d4:	00008003 	.word	0x00008003

000011d8 <_timer_set_irq>:
 * \brief Set timer IRQ
 */
void _timer_set_irq(struct _timer_device *const dev)
{
	(void)dev;
}
    11d8:	4770      	bx	lr

000011da <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    11da:	2000      	movs	r0, #0
    11dc:	4770      	bx	lr
	...

000011e0 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    11e0:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    11e2:	4b08      	ldr	r3, [pc, #32]	; (1204 <RTC_Handler+0x24>)
    11e4:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    11e6:	68e3      	ldr	r3, [r4, #12]
    11e8:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    11ea:	05db      	lsls	r3, r3, #23
    11ec:	d508      	bpl.n	1200 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    11ee:	6823      	ldr	r3, [r4, #0]
    11f0:	2b00      	cmp	r3, #0
    11f2:	d001      	beq.n	11f8 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    11f4:	0020      	movs	r0, r4
    11f6:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    11f8:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    11fa:	2280      	movs	r2, #128	; 0x80
    11fc:	0052      	lsls	r2, r2, #1
    11fe:	819a      	strh	r2, [r3, #12]
}
    1200:	bd10      	pop	{r4, pc}
    1202:	46c0      	nop			; (mov r8, r8)
    1204:	20000104 	.word	0x20000104

00001208 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    1208:	b510      	push	{r4, lr}
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    120a:	4b09      	ldr	r3, [pc, #36]	; (1230 <_get_i2cm_index+0x28>)
    120c:	469c      	mov	ip, r3
    120e:	4460      	add	r0, ip
    1210:	0a80      	lsrs	r0, r0, #10
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
		if (_i2cms[i].number == sercom_offset) {
    1212:	b2c0      	uxtb	r0, r0
    1214:	2801      	cmp	r0, #1
    1216:	d008      	beq.n	122a <_get_i2cm_index+0x22>
			return i;
		}
	}

	ASSERT(false);
    1218:	22e6      	movs	r2, #230	; 0xe6
    121a:	0092      	lsls	r2, r2, #2
    121c:	4905      	ldr	r1, [pc, #20]	; (1234 <_get_i2cm_index+0x2c>)
    121e:	2000      	movs	r0, #0
    1220:	4b05      	ldr	r3, [pc, #20]	; (1238 <_get_i2cm_index+0x30>)
    1222:	4798      	blx	r3
	return -1;
    1224:	2001      	movs	r0, #1
    1226:	4240      	negs	r0, r0
}
    1228:	bd10      	pop	{r4, pc}
			return i;
    122a:	2000      	movs	r0, #0
    122c:	e7fc      	b.n	1228 <_get_i2cm_index+0x20>
    122e:	46c0      	nop			; (mov r8, r8)
    1230:	bdfffc00 	.word	0xbdfffc00
    1234:	000039b0 	.word	0x000039b0
    1238:	00000f19 	.word	0x00000f19

0000123c <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    123c:	b570      	push	{r4, r5, r6, lr}
    123e:	0005      	movs	r5, r0
    1240:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    1242:	0008      	movs	r0, r1
    1244:	4b31      	ldr	r3, [pc, #196]	; (130c <_i2c_m_sync_init_impl+0xd0>)
    1246:	4798      	blx	r3
    1248:	b2c0      	uxtb	r0, r0
	};
}

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    124a:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    124c:	07db      	lsls	r3, r3, #31
    124e:	d421      	bmi.n	1294 <_i2c_m_sync_init_impl+0x58>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    1250:	0043      	lsls	r3, r0, #1
    1252:	181b      	adds	r3, r3, r0
    1254:	00db      	lsls	r3, r3, #3
    1256:	4a2e      	ldr	r2, [pc, #184]	; (1310 <_i2c_m_sync_init_impl+0xd4>)
    1258:	18d3      	adds	r3, r2, r3
    125a:	6859      	ldr	r1, [r3, #4]
    125c:	231c      	movs	r3, #28
    125e:	4019      	ands	r1, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1260:	2203      	movs	r2, #3
    1262:	69e3      	ldr	r3, [r4, #28]
    1264:	421a      	tst	r2, r3
    1266:	d1fc      	bne.n	1262 <_i2c_m_sync_init_impl+0x26>
static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1268:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    126a:	079b      	lsls	r3, r3, #30
    126c:	d50b      	bpl.n	1286 <_i2c_m_sync_init_impl+0x4a>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    126e:	6823      	ldr	r3, [r4, #0]
    1270:	2202      	movs	r2, #2
    1272:	4393      	bics	r3, r2
    1274:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1276:	3201      	adds	r2, #1
    1278:	69e3      	ldr	r3, [r4, #28]
    127a:	421a      	tst	r2, r3
    127c:	d1fc      	bne.n	1278 <_i2c_m_sync_init_impl+0x3c>
    127e:	2202      	movs	r2, #2
    1280:	69e3      	ldr	r3, [r4, #28]
    1282:	421a      	tst	r2, r3
    1284:	d1fc      	bne.n	1280 <_i2c_m_sync_init_impl+0x44>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    1286:	2301      	movs	r3, #1
    1288:	430b      	orrs	r3, r1
}

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    128a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    128c:	2203      	movs	r2, #3
    128e:	69e3      	ldr	r3, [r4, #28]
    1290:	421a      	tst	r2, r3
    1292:	d1fc      	bne.n	128e <_i2c_m_sync_init_impl+0x52>
    1294:	2201      	movs	r2, #1
    1296:	69e3      	ldr	r3, [r4, #28]
    1298:	421a      	tst	r2, r3
    129a:	d1fc      	bne.n	1296 <_i2c_m_sync_init_impl+0x5a>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    129c:	0043      	lsls	r3, r0, #1
    129e:	181b      	adds	r3, r3, r0
    12a0:	00db      	lsls	r3, r3, #3
    12a2:	4a1b      	ldr	r2, [pc, #108]	; (1310 <_i2c_m_sync_init_impl+0xd4>)
    12a4:	18d3      	adds	r3, r2, r3
    12a6:	6859      	ldr	r1, [r3, #4]
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    12a8:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12aa:	2203      	movs	r2, #3
    12ac:	69e3      	ldr	r3, [r4, #28]
    12ae:	421a      	tst	r2, r3
    12b0:	d1fc      	bne.n	12ac <_i2c_m_sync_init_impl+0x70>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    12b2:	0043      	lsls	r3, r0, #1
    12b4:	181b      	adds	r3, r3, r0
    12b6:	00db      	lsls	r3, r3, #3
    12b8:	4a15      	ldr	r2, [pc, #84]	; (1310 <_i2c_m_sync_init_impl+0xd4>)
    12ba:	18d3      	adds	r3, r2, r3
    12bc:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    12be:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12c0:	2204      	movs	r2, #4
    12c2:	69e3      	ldr	r3, [r4, #28]
    12c4:	421a      	tst	r2, r3
    12c6:	d1fc      	bne.n	12c2 <_i2c_m_sync_init_impl+0x86>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    12c8:	0043      	lsls	r3, r0, #1
    12ca:	181b      	adds	r3, r3, r0
    12cc:	00db      	lsls	r3, r3, #3
    12ce:	4a10      	ldr	r2, [pc, #64]	; (1310 <_i2c_m_sync_init_impl+0xd4>)
    12d0:	18d3      	adds	r3, r2, r3
    12d2:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    12d4:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    12d6:	0189      	lsls	r1, r1, #6
    12d8:	0f89      	lsrs	r1, r1, #30
    12da:	81a9      	strh	r1, [r5, #12]

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    12dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    12de:	4e0d      	ldr	r6, [pc, #52]	; (1314 <_i2c_m_sync_init_impl+0xd8>)
    12e0:	401e      	ands	r6, r3
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    12e2:	2301      	movs	r3, #1
    12e4:	428b      	cmp	r3, r1
    12e6:	419b      	sbcs	r3, r3
    12e8:	425b      	negs	r3, r3
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    12ea:	039b      	lsls	r3, r3, #14
    12ec:	4333      	orrs	r3, r6
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    12ee:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12f0:	2204      	movs	r2, #4
    12f2:	69e3      	ldr	r3, [r4, #28]
    12f4:	421a      	tst	r2, r3
    12f6:	d1fc      	bne.n	12f2 <_i2c_m_sync_init_impl+0xb6>

	service->trise = _i2cms[i].trise;
    12f8:	0043      	lsls	r3, r0, #1
    12fa:	1818      	adds	r0, r3, r0
    12fc:	00c0      	lsls	r0, r0, #3
    12fe:	4b04      	ldr	r3, [pc, #16]	; (1310 <_i2c_m_sync_init_impl+0xd4>)
    1300:	1818      	adds	r0, r3, r0
    1302:	8a43      	ldrh	r3, [r0, #18]
    1304:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    1306:	2000      	movs	r0, #0
    1308:	bd70      	pop	{r4, r5, r6, pc}
    130a:	46c0      	nop			; (mov r8, r8)
    130c:	00001209 	.word	0x00001209
    1310:	00003998 	.word	0x00003998
    1314:	ffffbfff 	.word	0xffffbfff

00001318 <_usart_init>:
{
    1318:	b510      	push	{r4, lr}
    131a:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    131c:	4b1f      	ldr	r3, [pc, #124]	; (139c <_usart_init+0x84>)
    131e:	18c3      	adds	r3, r0, r3
    1320:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    1322:	b2db      	uxtb	r3, r3
    1324:	2b00      	cmp	r3, #0
    1326:	d004      	beq.n	1332 <_usart_init+0x1a>
	ASSERT(false);
    1328:	4a1d      	ldr	r2, [pc, #116]	; (13a0 <_usart_init+0x88>)
    132a:	491e      	ldr	r1, [pc, #120]	; (13a4 <_usart_init+0x8c>)
    132c:	2000      	movs	r0, #0
    132e:	4b1e      	ldr	r3, [pc, #120]	; (13a8 <_usart_init+0x90>)
    1330:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1332:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1334:	07db      	lsls	r3, r3, #31
    1336:	d418      	bmi.n	136a <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1338:	2203      	movs	r2, #3
    133a:	69e3      	ldr	r3, [r4, #28]
    133c:	421a      	tst	r2, r3
    133e:	d1fc      	bne.n	133a <_usart_init+0x22>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1340:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1342:	079b      	lsls	r3, r3, #30
    1344:	d50b      	bpl.n	135e <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1346:	6823      	ldr	r3, [r4, #0]
    1348:	2202      	movs	r2, #2
    134a:	4393      	bics	r3, r2
    134c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    134e:	3201      	adds	r2, #1
    1350:	69e3      	ldr	r3, [r4, #28]
    1352:	421a      	tst	r2, r3
    1354:	d1fc      	bne.n	1350 <_usart_init+0x38>
    1356:	2202      	movs	r2, #2
    1358:	69e3      	ldr	r3, [r4, #28]
    135a:	421a      	tst	r2, r3
    135c:	d1fc      	bne.n	1358 <_usart_init+0x40>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    135e:	2305      	movs	r3, #5
    1360:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1362:	2203      	movs	r2, #3
    1364:	69e3      	ldr	r3, [r4, #28]
    1366:	421a      	tst	r2, r3
    1368:	d1fc      	bne.n	1364 <_usart_init+0x4c>
    136a:	2201      	movs	r2, #1
    136c:	69e3      	ldr	r3, [r4, #28]
    136e:	421a      	tst	r2, r3
    1370:	d1fc      	bne.n	136c <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1372:	4b0e      	ldr	r3, [pc, #56]	; (13ac <_usart_init+0x94>)
    1374:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1376:	2203      	movs	r2, #3
    1378:	69e3      	ldr	r3, [r4, #28]
    137a:	421a      	tst	r2, r3
    137c:	d1fc      	bne.n	1378 <_usart_init+0x60>
	((Sercom *)hw)->USART.CTRLB.reg = data;
    137e:	23c0      	movs	r3, #192	; 0xc0
    1380:	029b      	lsls	r3, r3, #10
    1382:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1384:	2207      	movs	r2, #7
    1386:	69e3      	ldr	r3, [r4, #28]
    1388:	421a      	tst	r2, r3
    138a:	d1fc      	bne.n	1386 <_usart_init+0x6e>
	((Sercom *)hw)->USART.BAUD.reg = data;
    138c:	4b08      	ldr	r3, [pc, #32]	; (13b0 <_usart_init+0x98>)
    138e:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
    1390:	2300      	movs	r3, #0
    1392:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1394:	2230      	movs	r2, #48	; 0x30
    1396:	54a3      	strb	r3, [r4, r2]
}
    1398:	2000      	movs	r0, #0
    139a:	bd10      	pop	{r4, pc}
    139c:	bdfffc00 	.word	0xbdfffc00
    13a0:	0000023a 	.word	0x0000023a
    13a4:	000039b0 	.word	0x000039b0
    13a8:	00000f19 	.word	0x00000f19
    13ac:	40310004 	.word	0x40310004
    13b0:	ffffe282 	.word	0xffffe282

000013b4 <_usart_sync_init>:
{
    13b4:	b570      	push	{r4, r5, r6, lr}
    13b6:	0005      	movs	r5, r0
    13b8:	000c      	movs	r4, r1
	ASSERT(device);
    13ba:	1e43      	subs	r3, r0, #1
    13bc:	4198      	sbcs	r0, r3
    13be:	b2c0      	uxtb	r0, r0
    13c0:	22b4      	movs	r2, #180	; 0xb4
    13c2:	4904      	ldr	r1, [pc, #16]	; (13d4 <_usart_sync_init+0x20>)
    13c4:	4b04      	ldr	r3, [pc, #16]	; (13d8 <_usart_sync_init+0x24>)
    13c6:	4798      	blx	r3
	device->hw = hw;
    13c8:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    13ca:	0020      	movs	r0, r4
    13cc:	4b03      	ldr	r3, [pc, #12]	; (13dc <_usart_sync_init+0x28>)
    13ce:	4798      	blx	r3
}
    13d0:	bd70      	pop	{r4, r5, r6, pc}
    13d2:	46c0      	nop			; (mov r8, r8)
    13d4:	000039b0 	.word	0x000039b0
    13d8:	00000f19 	.word	0x00000f19
    13dc:	00001319 	.word	0x00001319

000013e0 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    13e0:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    13e2:	6813      	ldr	r3, [r2, #0]
    13e4:	2102      	movs	r1, #2
    13e6:	430b      	orrs	r3, r1
    13e8:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    13ea:	3101      	adds	r1, #1
    13ec:	69d3      	ldr	r3, [r2, #28]
    13ee:	4219      	tst	r1, r3
    13f0:	d1fc      	bne.n	13ec <_usart_sync_enable+0xc>
}
    13f2:	4770      	bx	lr

000013f4 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    13f4:	6803      	ldr	r3, [r0, #0]
    13f6:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    13f8:	8519      	strh	r1, [r3, #40]	; 0x28
}
    13fa:	4770      	bx	lr

000013fc <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    13fc:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    13fe:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1400:	b2c0      	uxtb	r0, r0
}
    1402:	4770      	bx	lr

00001404 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1404:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1406:	7e18      	ldrb	r0, [r3, #24]
    1408:	2301      	movs	r3, #1
    140a:	4018      	ands	r0, r3
}
    140c:	4770      	bx	lr

0000140e <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    140e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1410:	7e18      	ldrb	r0, [r3, #24]
    1412:	0780      	lsls	r0, r0, #30
    1414:	0fc0      	lsrs	r0, r0, #31
}
    1416:	4770      	bx	lr

00001418 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1418:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    141a:	7e18      	ldrb	r0, [r3, #24]
    141c:	0740      	lsls	r0, r0, #29
    141e:	0fc0      	lsrs	r0, r0, #31
}
    1420:	4770      	bx	lr
	...

00001424 <_i2c_m_sync_init>:
{
    1424:	b570      	push	{r4, r5, r6, lr}
    1426:	0004      	movs	r4, r0
    1428:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
    142a:	1e43      	subs	r3, r0, #1
    142c:	4198      	sbcs	r0, r3
    142e:	b2c0      	uxtb	r0, r0
    1430:	4a04      	ldr	r2, [pc, #16]	; (1444 <_i2c_m_sync_init+0x20>)
    1432:	4905      	ldr	r1, [pc, #20]	; (1448 <_i2c_m_sync_init+0x24>)
    1434:	4b05      	ldr	r3, [pc, #20]	; (144c <_i2c_m_sync_init+0x28>)
    1436:	4798      	blx	r3
	i2c_dev->hw = hw;
    1438:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    143a:	0029      	movs	r1, r5
    143c:	0020      	movs	r0, r4
    143e:	4b04      	ldr	r3, [pc, #16]	; (1450 <_i2c_m_sync_init+0x2c>)
    1440:	4798      	blx	r3
}
    1442:	bd70      	pop	{r4, r5, r6, pc}
    1444:	00000507 	.word	0x00000507
    1448:	000039b0 	.word	0x000039b0
    144c:	00000f19 	.word	0x00000f19
    1450:	0000123d 	.word	0x0000123d

00001454 <_i2c_m_sync_enable>:
{
    1454:	b570      	push	{r4, r5, r6, lr}
    1456:	0004      	movs	r4, r0
	ASSERT(i2c_dev);
    1458:	4d1a      	ldr	r5, [pc, #104]	; (14c4 <_i2c_m_sync_enable+0x70>)
    145a:	1e43      	subs	r3, r0, #1
    145c:	4198      	sbcs	r0, r3
    145e:	b2c0      	uxtb	r0, r0
    1460:	4a19      	ldr	r2, [pc, #100]	; (14c8 <_i2c_m_sync_enable+0x74>)
    1462:	0029      	movs	r1, r5
    1464:	4e19      	ldr	r6, [pc, #100]	; (14cc <_i2c_m_sync_enable+0x78>)
    1466:	47b0      	blx	r6
	return _i2c_m_enable_implementation(i2c_dev->hw);
    1468:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
    146a:	0020      	movs	r0, r4
    146c:	1e43      	subs	r3, r0, #1
    146e:	4198      	sbcs	r0, r3
    1470:	b2c0      	uxtb	r0, r0
    1472:	4a17      	ldr	r2, [pc, #92]	; (14d0 <_i2c_m_sync_enable+0x7c>)
    1474:	0029      	movs	r1, r5
    1476:	47b0      	blx	r6
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1478:	6823      	ldr	r3, [r4, #0]
    147a:	2202      	movs	r2, #2
    147c:	4313      	orrs	r3, r2
    147e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1480:	3201      	adds	r2, #1
    1482:	69e3      	ldr	r3, [r4, #28]
    1484:	421a      	tst	r2, r3
    1486:	d1fc      	bne.n	1482 <_i2c_m_sync_enable+0x2e>
    1488:	2504      	movs	r5, #4
    148a:	2204      	movs	r2, #4
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    148c:	2003      	movs	r0, #3
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    148e:	2610      	movs	r6, #16
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1490:	4910      	ldr	r1, [pc, #64]	; (14d4 <_i2c_m_sync_enable+0x80>)
    1492:	69e3      	ldr	r3, [r4, #28]
    1494:	421a      	tst	r2, r3
    1496:	d1fc      	bne.n	1492 <_i2c_m_sync_enable+0x3e>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    1498:	8b63      	ldrh	r3, [r4, #26]
    149a:	091b      	lsrs	r3, r3, #4
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    149c:	4003      	ands	r3, r0
    149e:	2b01      	cmp	r3, #1
    14a0:	d00a      	beq.n	14b8 <_i2c_m_sync_enable+0x64>
    14a2:	3901      	subs	r1, #1
		if (timeout <= 0) {
    14a4:	2900      	cmp	r1, #0
    14a6:	d1f4      	bne.n	1492 <_i2c_m_sync_enable+0x3e>
    14a8:	3d01      	subs	r5, #1
			if (--timeout_attempt)
    14aa:	2d00      	cmp	r5, #0
    14ac:	d006      	beq.n	14bc <_i2c_m_sync_enable+0x68>
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    14ae:	8366      	strh	r6, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    14b0:	69e3      	ldr	r3, [r4, #28]
    14b2:	421a      	tst	r2, r3
    14b4:	d1fc      	bne.n	14b0 <_i2c_m_sync_enable+0x5c>
    14b6:	e7eb      	b.n	1490 <_i2c_m_sync_enable+0x3c>
	return ERR_NONE;
    14b8:	2000      	movs	r0, #0
}
    14ba:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
    14bc:	2006      	movs	r0, #6
    14be:	4240      	negs	r0, r0
	return _i2c_m_enable_implementation(i2c_dev->hw);
    14c0:	e7fb      	b.n	14ba <_i2c_m_sync_enable+0x66>
    14c2:	46c0      	nop			; (mov r8, r8)
    14c4:	000039b0 	.word	0x000039b0
    14c8:	00000524 	.word	0x00000524
    14cc:	00000f19 	.word	0x00000f19
    14d0:	000005f4 	.word	0x000005f4
    14d4:	0000ffff 	.word	0x0000ffff

000014d8 <_i2c_m_sync_transfer>:
{
    14d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14da:	46de      	mov	lr, fp
    14dc:	4657      	mov	r7, sl
    14de:	464e      	mov	r6, r9
    14e0:	4645      	mov	r5, r8
    14e2:	b5e0      	push	{r5, r6, r7, lr}
    14e4:	b083      	sub	sp, #12
    14e6:	0005      	movs	r5, r0
    14e8:	4688      	mov	r8, r1
	void *   hw = i2c_dev->hw;
    14ea:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    14ec:	0006      	movs	r6, r0
    14ee:	1e73      	subs	r3, r6, #1
    14f0:	419e      	sbcs	r6, r3
    14f2:	b2f3      	uxtb	r3, r6
    14f4:	9301      	str	r3, [sp, #4]
    14f6:	4fb4      	ldr	r7, [pc, #720]	; (17c8 <_i2c_m_sync_transfer+0x2f0>)
    14f8:	4ab4      	ldr	r2, [pc, #720]	; (17cc <_i2c_m_sync_transfer+0x2f4>)
    14fa:	0039      	movs	r1, r7
    14fc:	0018      	movs	r0, r3
    14fe:	4eb4      	ldr	r6, [pc, #720]	; (17d0 <_i2c_m_sync_transfer+0x2f8>)
    1500:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    1502:	6928      	ldr	r0, [r5, #16]
    1504:	1e43      	subs	r3, r0, #1
    1506:	4198      	sbcs	r0, r3
    1508:	b2c0      	uxtb	r0, r0
    150a:	22b8      	movs	r2, #184	; 0xb8
    150c:	00d2      	lsls	r2, r2, #3
    150e:	0039      	movs	r1, r7
    1510:	47b0      	blx	r6
	ASSERT(msg);
    1512:	4640      	mov	r0, r8
    1514:	1e43      	subs	r3, r0, #1
    1516:	4198      	sbcs	r0, r3
    1518:	b2c0      	uxtb	r0, r0
    151a:	4aae      	ldr	r2, [pc, #696]	; (17d4 <_i2c_m_sync_transfer+0x2fc>)
    151c:	0039      	movs	r1, r7
    151e:	47b0      	blx	r6
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1520:	886b      	ldrh	r3, [r5, #2]
    1522:	05db      	lsls	r3, r3, #23
    1524:	d500      	bpl.n	1528 <_i2c_m_sync_transfer+0x50>
    1526:	e224      	b.n	1972 <_i2c_m_sync_transfer+0x49a>
	msg->flags |= I2C_M_BUSY;
    1528:	4643      	mov	r3, r8
    152a:	885a      	ldrh	r2, [r3, #2]
    152c:	2380      	movs	r3, #128	; 0x80
    152e:	005b      	lsls	r3, r3, #1
    1530:	431a      	orrs	r2, r3
    1532:	4641      	mov	r1, r8
    1534:	804a      	strh	r2, [r1, #2]
	i2c_dev->service.msg = *msg;
    1536:	002a      	movs	r2, r5
    1538:	c9c1      	ldmia	r1!, {r0, r6, r7}
    153a:	c2c1      	stmia	r2!, {r0, r6, r7}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    153c:	6862      	ldr	r2, [r4, #4]
    153e:	4313      	orrs	r3, r2
    1540:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1542:	2204      	movs	r2, #4
    1544:	69e3      	ldr	r3, [r4, #28]
    1546:	421a      	tst	r2, r3
    1548:	d1fc      	bne.n	1544 <_i2c_m_sync_transfer+0x6c>
	void *             hw    = i2c_dev->hw;
    154a:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    154c:	683b      	ldr	r3, [r7, #0]
    154e:	4699      	mov	r9, r3
	ASSERT(i2c_dev);
    1550:	4aa1      	ldr	r2, [pc, #644]	; (17d8 <_i2c_m_sync_transfer+0x300>)
    1552:	499d      	ldr	r1, [pc, #628]	; (17c8 <_i2c_m_sync_transfer+0x2f0>)
    1554:	9801      	ldr	r0, [sp, #4]
    1556:	4b9e      	ldr	r3, [pc, #632]	; (17d0 <_i2c_m_sync_transfer+0x2f8>)
    1558:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    155a:	686b      	ldr	r3, [r5, #4]
    155c:	2b01      	cmp	r3, #1
    155e:	d05a      	beq.n	1616 <_i2c_m_sync_transfer+0x13e>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1560:	687b      	ldr	r3, [r7, #4]
    1562:	4a9e      	ldr	r2, [pc, #632]	; (17dc <_i2c_m_sync_transfer+0x304>)
    1564:	4013      	ands	r3, r2
    1566:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1568:	2204      	movs	r2, #4
    156a:	69fb      	ldr	r3, [r7, #28]
    156c:	421a      	tst	r2, r3
    156e:	d1fc      	bne.n	156a <_i2c_m_sync_transfer+0x92>
	if (msg->addr & I2C_M_TEN) {
    1570:	882b      	ldrh	r3, [r5, #0]
    1572:	055a      	lsls	r2, r3, #21
    1574:	d55c      	bpl.n	1630 <_i2c_m_sync_transfer+0x158>
		if (msg->flags & I2C_M_RD) {
    1576:	886a      	ldrh	r2, [r5, #2]
    1578:	07d2      	lsls	r2, r2, #31
    157a:	d504      	bpl.n	1586 <_i2c_m_sync_transfer+0xae>
			msg->flags |= I2C_M_TEN;
    157c:	886a      	ldrh	r2, [r5, #2]
    157e:	2180      	movs	r1, #128	; 0x80
    1580:	00c9      	lsls	r1, r1, #3
    1582:	430a      	orrs	r2, r1
    1584:	806a      	strh	r2, [r5, #2]
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    1586:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1588:	4995      	ldr	r1, [pc, #596]	; (17e0 <_i2c_m_sync_transfer+0x308>)
    158a:	4019      	ands	r1, r3
    158c:	2204      	movs	r2, #4
    158e:	69fb      	ldr	r3, [r7, #28]
    1590:	421a      	tst	r2, r3
    1592:	d1fc      	bne.n	158e <_i2c_m_sync_transfer+0xb6>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1596:	2280      	movs	r2, #128	; 0x80
    1598:	01d2      	lsls	r2, r2, #7
    159a:	401a      	ands	r2, r3
		hri_sercomi2cm_write_ADDR_reg(hw,
    159c:	2380      	movs	r3, #128	; 0x80
    159e:	021b      	lsls	r3, r3, #8
    15a0:	4313      	orrs	r3, r2
    15a2:	4319      	orrs	r1, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    15a4:	6279      	str	r1, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15a6:	2204      	movs	r2, #4
    15a8:	69fb      	ldr	r3, [r7, #28]
    15aa:	421a      	tst	r2, r3
    15ac:	d1fc      	bne.n	15a8 <_i2c_m_sync_transfer+0xd0>
	void *   hw      = i2c_dev->hw;
    15ae:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    15b0:	7e0b      	ldrb	r3, [r1, #24]
    15b2:	b2db      	uxtb	r3, r3
    15b4:	4a8b      	ldr	r2, [pc, #556]	; (17e4 <_i2c_m_sync_transfer+0x30c>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    15b6:	2003      	movs	r0, #3
    15b8:	4218      	tst	r0, r3
    15ba:	d104      	bne.n	15c6 <_i2c_m_sync_transfer+0xee>
    15bc:	7e0b      	ldrb	r3, [r1, #24]
    15be:	b2db      	uxtb	r3, r3
    15c0:	3a01      	subs	r2, #1
		if (timeout-- == 0) {
    15c2:	2a00      	cmp	r2, #0
    15c4:	d1f8      	bne.n	15b8 <_i2c_m_sync_transfer+0xe0>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    15c6:	683e      	ldr	r6, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15c8:	2104      	movs	r1, #4
    15ca:	69fa      	ldr	r2, [r7, #28]
    15cc:	4211      	tst	r1, r2
    15ce:	d1fc      	bne.n	15ca <_i2c_m_sync_transfer+0xf2>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    15d0:	8b7a      	ldrh	r2, [r7, #26]
    15d2:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    15d4:	07d9      	lsls	r1, r3, #31
    15d6:	d400      	bmi.n	15da <_i2c_m_sync_transfer+0x102>
    15d8:	e0a0      	b.n	171c <_i2c_m_sync_transfer+0x244>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    15da:	0793      	lsls	r3, r2, #30
    15dc:	d53e      	bpl.n	165c <_i2c_m_sync_transfer+0x184>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    15de:	2301      	movs	r3, #1
    15e0:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
    15e2:	886b      	ldrh	r3, [r5, #2]
    15e4:	2180      	movs	r1, #128	; 0x80
    15e6:	0149      	lsls	r1, r1, #5
    15e8:	430b      	orrs	r3, r1
    15ea:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    15ec:	886b      	ldrh	r3, [r5, #2]
    15ee:	497e      	ldr	r1, [pc, #504]	; (17e8 <_i2c_m_sync_transfer+0x310>)
    15f0:	400b      	ands	r3, r1
    15f2:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    15f4:	2001      	movs	r0, #1
    15f6:	0003      	movs	r3, r0
    15f8:	4013      	ands	r3, r2
			return I2C_ERR_BAD_ADDRESS;
    15fa:	4258      	negs	r0, r3
    15fc:	4158      	adcs	r0, r3
    15fe:	3805      	subs	r0, #5
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1600:	886b      	ldrh	r3, [r5, #2]
    1602:	4a79      	ldr	r2, [pc, #484]	; (17e8 <_i2c_m_sync_transfer+0x310>)
    1604:	4013      	ands	r3, r2
    1606:	806b      	strh	r3, [r5, #2]
}
    1608:	b003      	add	sp, #12
    160a:	bc3c      	pop	{r2, r3, r4, r5}
    160c:	4690      	mov	r8, r2
    160e:	4699      	mov	r9, r3
    1610:	46a2      	mov	sl, r4
    1612:	46ab      	mov	fp, r5
    1614:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (msg->len == 1 && sclsm) {
    1616:	464b      	mov	r3, r9
    1618:	011b      	lsls	r3, r3, #4
    161a:	d5a1      	bpl.n	1560 <_i2c_m_sync_transfer+0x88>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    161c:	687a      	ldr	r2, [r7, #4]
    161e:	2380      	movs	r3, #128	; 0x80
    1620:	02db      	lsls	r3, r3, #11
    1622:	4313      	orrs	r3, r2
    1624:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1626:	2204      	movs	r2, #4
    1628:	69fb      	ldr	r3, [r7, #28]
    162a:	421a      	tst	r2, r3
    162c:	d1fc      	bne.n	1628 <_i2c_m_sync_transfer+0x150>
    162e:	e79f      	b.n	1570 <_i2c_m_sync_transfer+0x98>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    1630:	886a      	ldrh	r2, [r5, #2]
    1632:	005b      	lsls	r3, r3, #1
    1634:	21ff      	movs	r1, #255	; 0xff
    1636:	400b      	ands	r3, r1
    1638:	39fe      	subs	r1, #254	; 0xfe
    163a:	4011      	ands	r1, r2
    163c:	4319      	orrs	r1, r3
    163e:	2204      	movs	r2, #4
    1640:	69fb      	ldr	r3, [r7, #28]
    1642:	421a      	tst	r2, r3
    1644:	d1fc      	bne.n	1640 <_i2c_m_sync_transfer+0x168>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1648:	2280      	movs	r2, #128	; 0x80
    164a:	01d2      	lsls	r2, r2, #7
    164c:	4013      	ands	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    164e:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1650:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1652:	2204      	movs	r2, #4
    1654:	69fb      	ldr	r3, [r7, #28]
    1656:	421a      	tst	r2, r3
    1658:	d1fc      	bne.n	1654 <_i2c_m_sync_transfer+0x17c>
    165a:	e7a8      	b.n	15ae <_i2c_m_sync_transfer+0xd6>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    165c:	0753      	lsls	r3, r2, #29
    165e:	d41b      	bmi.n	1698 <_i2c_m_sync_transfer+0x1c0>
			if (msg->flags & I2C_M_TEN) {
    1660:	886b      	ldrh	r3, [r5, #2]
    1662:	055b      	lsls	r3, r3, #21
    1664:	d535      	bpl.n	16d2 <_i2c_m_sync_transfer+0x1fa>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1666:	882b      	ldrh	r3, [r5, #0]
    1668:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    166a:	2106      	movs	r1, #6
    166c:	4019      	ands	r1, r3
    166e:	2204      	movs	r2, #4
    1670:	69fb      	ldr	r3, [r7, #28]
    1672:	421a      	tst	r2, r3
    1674:	d1fc      	bne.n	1670 <_i2c_m_sync_transfer+0x198>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1678:	2280      	movs	r2, #128	; 0x80
    167a:	01d2      	lsls	r2, r2, #7
    167c:	4013      	ands	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    167e:	22f1      	movs	r2, #241	; 0xf1
    1680:	4313      	orrs	r3, r2
    1682:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1684:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1686:	3aed      	subs	r2, #237	; 0xed
    1688:	69fb      	ldr	r3, [r7, #28]
    168a:	421a      	tst	r2, r3
    168c:	d1fc      	bne.n	1688 <_i2c_m_sync_transfer+0x1b0>
				msg->flags &= ~I2C_M_TEN;
    168e:	886b      	ldrh	r3, [r5, #2]
    1690:	4a56      	ldr	r2, [pc, #344]	; (17ec <_i2c_m_sync_transfer+0x314>)
    1692:	4013      	ands	r3, r2
    1694:	806b      	strh	r3, [r5, #2]
    1696:	e066      	b.n	1766 <_i2c_m_sync_transfer+0x28e>
				if (msg->len > 0) {
    1698:	686b      	ldr	r3, [r5, #4]
    169a:	2b00      	cmp	r3, #0
    169c:	dd04      	ble.n	16a8 <_i2c_m_sync_transfer+0x1d0>
					msg->flags |= I2C_M_FAIL;
    169e:	886b      	ldrh	r3, [r5, #2]
    16a0:	2280      	movs	r2, #128	; 0x80
    16a2:	0152      	lsls	r2, r2, #5
    16a4:	4313      	orrs	r3, r2
    16a6:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    16a8:	886b      	ldrh	r3, [r5, #2]
    16aa:	b21b      	sxth	r3, r3
    16ac:	2b00      	cmp	r3, #0
    16ae:	db06      	blt.n	16be <_i2c_m_sync_transfer+0x1e6>
				msg->flags &= ~I2C_M_BUSY;
    16b0:	886b      	ldrh	r3, [r5, #2]
    16b2:	4a4d      	ldr	r2, [pc, #308]	; (17e8 <_i2c_m_sync_transfer+0x310>)
    16b4:	4013      	ands	r3, r2
    16b6:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    16b8:	2002      	movs	r0, #2
    16ba:	4240      	negs	r0, r0
    16bc:	e7a0      	b.n	1600 <_i2c_m_sync_transfer+0x128>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    16be:	687a      	ldr	r2, [r7, #4]
    16c0:	23c0      	movs	r3, #192	; 0xc0
    16c2:	029b      	lsls	r3, r3, #10
    16c4:	4313      	orrs	r3, r2
    16c6:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    16c8:	2304      	movs	r3, #4
    16ca:	69fa      	ldr	r2, [r7, #28]
    16cc:	4213      	tst	r3, r2
    16ce:	d1fc      	bne.n	16ca <_i2c_m_sync_transfer+0x1f2>
    16d0:	e7ee      	b.n	16b0 <_i2c_m_sync_transfer+0x1d8>
			if (msg->len == 0) {
    16d2:	686b      	ldr	r3, [r5, #4]
    16d4:	2b00      	cmp	r3, #0
    16d6:	d112      	bne.n	16fe <_i2c_m_sync_transfer+0x226>
				if (msg->flags & I2C_M_STOP) {
    16d8:	886b      	ldrh	r3, [r5, #2]
    16da:	b21b      	sxth	r3, r3
    16dc:	2b00      	cmp	r3, #0
    16de:	db04      	blt.n	16ea <_i2c_m_sync_transfer+0x212>
				msg->flags &= ~I2C_M_BUSY;
    16e0:	886b      	ldrh	r3, [r5, #2]
    16e2:	4a41      	ldr	r2, [pc, #260]	; (17e8 <_i2c_m_sync_transfer+0x310>)
    16e4:	4013      	ands	r3, r2
    16e6:	806b      	strh	r3, [r5, #2]
    16e8:	e03d      	b.n	1766 <_i2c_m_sync_transfer+0x28e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    16ea:	687a      	ldr	r2, [r7, #4]
    16ec:	23c0      	movs	r3, #192	; 0xc0
    16ee:	029b      	lsls	r3, r3, #10
    16f0:	4313      	orrs	r3, r2
    16f2:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    16f4:	2204      	movs	r2, #4
    16f6:	69fb      	ldr	r3, [r7, #28]
    16f8:	421a      	tst	r2, r3
    16fa:	d1fc      	bne.n	16f6 <_i2c_m_sync_transfer+0x21e>
    16fc:	e7f0      	b.n	16e0 <_i2c_m_sync_transfer+0x208>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    16fe:	68ab      	ldr	r3, [r5, #8]
    1700:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1702:	2328      	movs	r3, #40	; 0x28
    1704:	54fa      	strb	r2, [r7, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1706:	2204      	movs	r2, #4
    1708:	69fb      	ldr	r3, [r7, #28]
    170a:	421a      	tst	r2, r3
    170c:	d1fc      	bne.n	1708 <_i2c_m_sync_transfer+0x230>
				msg->buffer++;
    170e:	68ab      	ldr	r3, [r5, #8]
    1710:	3301      	adds	r3, #1
    1712:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1714:	686b      	ldr	r3, [r5, #4]
    1716:	3b01      	subs	r3, #1
    1718:	606b      	str	r3, [r5, #4]
    171a:	e024      	b.n	1766 <_i2c_m_sync_transfer+0x28e>
	} else if (flags & SB_FLAG) {
    171c:	079b      	lsls	r3, r3, #30
    171e:	d522      	bpl.n	1766 <_i2c_m_sync_transfer+0x28e>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1720:	686b      	ldr	r3, [r5, #4]
    1722:	2b00      	cmp	r3, #0
    1724:	d040      	beq.n	17a8 <_i2c_m_sync_transfer+0x2d0>
    1726:	0752      	lsls	r2, r2, #29
    1728:	d43e      	bmi.n	17a8 <_i2c_m_sync_transfer+0x2d0>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    172a:	0136      	lsls	r6, r6, #4
    172c:	0ff6      	lsrs	r6, r6, #31
			msg->len--;
    172e:	3b01      	subs	r3, #1
    1730:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1732:	2b00      	cmp	r3, #0
    1734:	d000      	beq.n	1738 <_i2c_m_sync_transfer+0x260>
    1736:	e11f      	b.n	1978 <_i2c_m_sync_transfer+0x4a0>
    1738:	2e00      	cmp	r6, #0
    173a:	d100      	bne.n	173e <_i2c_m_sync_transfer+0x266>
    173c:	e122      	b.n	1984 <_i2c_m_sync_transfer+0x4ac>
				if (msg->flags & I2C_M_STOP) {
    173e:	886b      	ldrh	r3, [r5, #2]
    1740:	b21b      	sxth	r3, r3
    1742:	2b00      	cmp	r3, #0
    1744:	db1d      	blt.n	1782 <_i2c_m_sync_transfer+0x2aa>
				msg->flags &= ~I2C_M_BUSY;
    1746:	886b      	ldrh	r3, [r5, #2]
    1748:	4a27      	ldr	r2, [pc, #156]	; (17e8 <_i2c_m_sync_transfer+0x310>)
    174a:	4013      	ands	r3, r2
    174c:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    174e:	68a9      	ldr	r1, [r5, #8]
    1750:	1c4b      	adds	r3, r1, #1
    1752:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1754:	2204      	movs	r2, #4
    1756:	69fb      	ldr	r3, [r7, #28]
    1758:	421a      	tst	r2, r3
    175a:	d1fc      	bne.n	1756 <_i2c_m_sync_transfer+0x27e>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    175c:	2328      	movs	r3, #40	; 0x28
    175e:	5cfb      	ldrb	r3, [r7, r3]
    1760:	700b      	strb	r3, [r1, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1762:	2302      	movs	r3, #2
    1764:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    1766:	2600      	movs	r6, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1768:	2380      	movs	r3, #128	; 0x80
    176a:	005b      	lsls	r3, r3, #1
    176c:	469a      	mov	sl, r3
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    176e:	2103      	movs	r1, #3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1770:	2204      	movs	r2, #4
	if (flags & MB_FLAG) {
    1772:	3bff      	subs	r3, #255	; 0xff
    1774:	469c      	mov	ip, r3
	} else if (flags & SB_FLAG) {
    1776:	3301      	adds	r3, #1
    1778:	4699      	mov	r9, r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    177a:	3326      	adds	r3, #38	; 0x26
    177c:	469b      	mov	fp, r3
    177e:	9601      	str	r6, [sp, #4]
    1780:	e0c2      	b.n	1908 <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1782:	687b      	ldr	r3, [r7, #4]
    1784:	4a18      	ldr	r2, [pc, #96]	; (17e8 <_i2c_m_sync_transfer+0x310>)
    1786:	4013      	ands	r3, r2
    1788:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    178a:	3206      	adds	r2, #6
    178c:	32ff      	adds	r2, #255	; 0xff
    178e:	69fb      	ldr	r3, [r7, #28]
    1790:	421a      	tst	r2, r3
    1792:	d1fc      	bne.n	178e <_i2c_m_sync_transfer+0x2b6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1794:	687a      	ldr	r2, [r7, #4]
    1796:	23c0      	movs	r3, #192	; 0xc0
    1798:	029b      	lsls	r3, r3, #10
    179a:	4313      	orrs	r3, r2
    179c:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    179e:	2204      	movs	r2, #4
    17a0:	69fb      	ldr	r3, [r7, #28]
    17a2:	421a      	tst	r2, r3
    17a4:	d1fc      	bne.n	17a0 <_i2c_m_sync_transfer+0x2c8>
    17a6:	e7ce      	b.n	1746 <_i2c_m_sync_transfer+0x26e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    17a8:	2302      	movs	r3, #2
    17aa:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    17ac:	2002      	movs	r0, #2
    17ae:	4240      	negs	r0, r0
    17b0:	e726      	b.n	1600 <_i2c_m_sync_transfer+0x128>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    17b2:	6862      	ldr	r2, [r4, #4]
    17b4:	23c0      	movs	r3, #192	; 0xc0
    17b6:	029b      	lsls	r3, r3, #10
    17b8:	4313      	orrs	r3, r2
    17ba:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    17bc:	2204      	movs	r2, #4
    17be:	69e3      	ldr	r3, [r4, #28]
    17c0:	421a      	tst	r2, r3
    17c2:	d1fc      	bne.n	17be <_i2c_m_sync_transfer+0x2e6>
    17c4:	e0b5      	b.n	1932 <_i2c_m_sync_transfer+0x45a>
    17c6:	46c0      	nop			; (mov r8, r8)
    17c8:	000039b0 	.word	0x000039b0
    17cc:	000005bf 	.word	0x000005bf
    17d0:	00000f19 	.word	0x00000f19
    17d4:	000005c1 	.word	0x000005c1
    17d8:	00000594 	.word	0x00000594
    17dc:	fffbffff 	.word	0xfffbffff
    17e0:	000007fe 	.word	0x000007fe
    17e4:	0000ffff 	.word	0x0000ffff
    17e8:	fffffeff 	.word	0xfffffeff
    17ec:	fffffbff 	.word	0xfffffbff
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    17f0:	4202      	tst	r2, r0
    17f2:	d11b      	bne.n	182c <_i2c_m_sync_transfer+0x354>
			if (msg->flags & I2C_M_TEN) {
    17f4:	886b      	ldrh	r3, [r5, #2]
    17f6:	055b      	lsls	r3, r3, #21
    17f8:	d535      	bpl.n	1866 <_i2c_m_sync_transfer+0x38e>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    17fa:	882b      	ldrh	r3, [r5, #0]
    17fc:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    17fe:	2006      	movs	r0, #6
    1800:	4018      	ands	r0, r3
    1802:	69e3      	ldr	r3, [r4, #28]
    1804:	421a      	tst	r2, r3
    1806:	d1fc      	bne.n	1802 <_i2c_m_sync_transfer+0x32a>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1808:	6a63      	ldr	r3, [r4, #36]	; 0x24
    180a:	2680      	movs	r6, #128	; 0x80
    180c:	01f6      	lsls	r6, r6, #7
    180e:	4033      	ands	r3, r6
				hri_sercomi2cm_write_ADDR_reg(hw,
    1810:	26f1      	movs	r6, #241	; 0xf1
    1812:	4333      	orrs	r3, r6
    1814:	4303      	orrs	r3, r0
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1816:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1818:	69e3      	ldr	r3, [r4, #28]
    181a:	421a      	tst	r2, r3
    181c:	d1fc      	bne.n	1818 <_i2c_m_sync_transfer+0x340>
				msg->flags &= ~I2C_M_TEN;
    181e:	886b      	ldrh	r3, [r5, #2]
    1820:	4878      	ldr	r0, [pc, #480]	; (1a04 <_i2c_m_sync_transfer+0x52c>)
    1822:	4003      	ands	r3, r0
    1824:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    1826:	2300      	movs	r3, #0
    1828:	9301      	str	r3, [sp, #4]
    182a:	e06d      	b.n	1908 <_i2c_m_sync_transfer+0x430>
				if (msg->len > 0) {
    182c:	686b      	ldr	r3, [r5, #4]
    182e:	2b00      	cmp	r3, #0
    1830:	dd04      	ble.n	183c <_i2c_m_sync_transfer+0x364>
					msg->flags |= I2C_M_FAIL;
    1832:	886b      	ldrh	r3, [r5, #2]
    1834:	2080      	movs	r0, #128	; 0x80
    1836:	0140      	lsls	r0, r0, #5
    1838:	4303      	orrs	r3, r0
    183a:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    183c:	886b      	ldrh	r3, [r5, #2]
    183e:	b21b      	sxth	r3, r3
    1840:	2b00      	cmp	r3, #0
    1842:	db07      	blt.n	1854 <_i2c_m_sync_transfer+0x37c>
				msg->flags &= ~I2C_M_BUSY;
    1844:	886b      	ldrh	r3, [r5, #2]
    1846:	4870      	ldr	r0, [pc, #448]	; (1a08 <_i2c_m_sync_transfer+0x530>)
    1848:	4003      	ands	r3, r0
    184a:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    184c:	2302      	movs	r3, #2
    184e:	425b      	negs	r3, r3
    1850:	9301      	str	r3, [sp, #4]
    1852:	e059      	b.n	1908 <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1854:	6860      	ldr	r0, [r4, #4]
    1856:	23c0      	movs	r3, #192	; 0xc0
    1858:	029b      	lsls	r3, r3, #10
    185a:	4303      	orrs	r3, r0
    185c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    185e:	69e3      	ldr	r3, [r4, #28]
    1860:	421a      	tst	r2, r3
    1862:	d1fc      	bne.n	185e <_i2c_m_sync_transfer+0x386>
    1864:	e7ee      	b.n	1844 <_i2c_m_sync_transfer+0x36c>
			if (msg->len == 0) {
    1866:	686b      	ldr	r3, [r5, #4]
    1868:	2b00      	cmp	r3, #0
    186a:	d113      	bne.n	1894 <_i2c_m_sync_transfer+0x3bc>
				if (msg->flags & I2C_M_STOP) {
    186c:	886b      	ldrh	r3, [r5, #2]
    186e:	b21b      	sxth	r3, r3
    1870:	2b00      	cmp	r3, #0
    1872:	db06      	blt.n	1882 <_i2c_m_sync_transfer+0x3aa>
				msg->flags &= ~I2C_M_BUSY;
    1874:	886b      	ldrh	r3, [r5, #2]
    1876:	4864      	ldr	r0, [pc, #400]	; (1a08 <_i2c_m_sync_transfer+0x530>)
    1878:	4003      	ands	r3, r0
    187a:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
    187c:	2300      	movs	r3, #0
    187e:	9301      	str	r3, [sp, #4]
    1880:	e042      	b.n	1908 <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1882:	6860      	ldr	r0, [r4, #4]
    1884:	23c0      	movs	r3, #192	; 0xc0
    1886:	029b      	lsls	r3, r3, #10
    1888:	4303      	orrs	r3, r0
    188a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    188c:	69e3      	ldr	r3, [r4, #28]
    188e:	421a      	tst	r2, r3
    1890:	d1fc      	bne.n	188c <_i2c_m_sync_transfer+0x3b4>
    1892:	e7ef      	b.n	1874 <_i2c_m_sync_transfer+0x39c>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1894:	68ab      	ldr	r3, [r5, #8]
    1896:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1898:	4658      	mov	r0, fp
    189a:	5423      	strb	r3, [r4, r0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    189c:	69e3      	ldr	r3, [r4, #28]
    189e:	421a      	tst	r2, r3
    18a0:	d1fc      	bne.n	189c <_i2c_m_sync_transfer+0x3c4>
				msg->buffer++;
    18a2:	68ab      	ldr	r3, [r5, #8]
    18a4:	3301      	adds	r3, #1
    18a6:	60ab      	str	r3, [r5, #8]
				msg->len--;
    18a8:	686b      	ldr	r3, [r5, #4]
    18aa:	3b01      	subs	r3, #1
    18ac:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    18ae:	2300      	movs	r3, #0
    18b0:	9301      	str	r3, [sp, #4]
    18b2:	e029      	b.n	1908 <_i2c_m_sync_transfer+0x430>
	return I2C_OK;
    18b4:	2600      	movs	r6, #0
    18b6:	9601      	str	r6, [sp, #4]
	} else if (flags & SB_FLAG) {
    18b8:	464e      	mov	r6, r9
    18ba:	421e      	tst	r6, r3
    18bc:	d024      	beq.n	1908 <_i2c_m_sync_transfer+0x430>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    18be:	686b      	ldr	r3, [r5, #4]
    18c0:	2b00      	cmp	r3, #0
    18c2:	d04d      	beq.n	1960 <_i2c_m_sync_transfer+0x488>
    18c4:	4202      	tst	r2, r0
    18c6:	d14b      	bne.n	1960 <_i2c_m_sync_transfer+0x488>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    18c8:	0eff      	lsrs	r7, r7, #27
    18ca:	4660      	mov	r0, ip
    18cc:	4007      	ands	r7, r0
			msg->len--;
    18ce:	3b01      	subs	r3, #1
    18d0:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    18d2:	2b00      	cmp	r3, #0
    18d4:	d000      	beq.n	18d8 <_i2c_m_sync_transfer+0x400>
    18d6:	e082      	b.n	19de <_i2c_m_sync_transfer+0x506>
    18d8:	2f00      	cmp	r7, #0
    18da:	d100      	bne.n	18de <_i2c_m_sync_transfer+0x406>
    18dc:	e085      	b.n	19ea <_i2c_m_sync_transfer+0x512>
				if (msg->flags & I2C_M_STOP) {
    18de:	886b      	ldrh	r3, [r5, #2]
    18e0:	b21b      	sxth	r3, r3
    18e2:	2b00      	cmp	r3, #0
    18e4:	db2c      	blt.n	1940 <_i2c_m_sync_transfer+0x468>
				msg->flags &= ~I2C_M_BUSY;
    18e6:	886b      	ldrh	r3, [r5, #2]
    18e8:	4847      	ldr	r0, [pc, #284]	; (1a08 <_i2c_m_sync_transfer+0x530>)
    18ea:	4003      	ands	r3, r0
    18ec:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    18ee:	68a8      	ldr	r0, [r5, #8]
    18f0:	1c43      	adds	r3, r0, #1
    18f2:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    18f4:	69e3      	ldr	r3, [r4, #28]
    18f6:	421a      	tst	r2, r3
    18f8:	d1fc      	bne.n	18f4 <_i2c_m_sync_transfer+0x41c>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    18fa:	465b      	mov	r3, fp
    18fc:	5ce3      	ldrb	r3, [r4, r3]
    18fe:	7003      	strb	r3, [r0, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1900:	464b      	mov	r3, r9
    1902:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    1904:	2300      	movs	r3, #0
    1906:	9301      	str	r3, [sp, #4]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1908:	886b      	ldrh	r3, [r5, #2]
    190a:	4650      	mov	r0, sl
    190c:	4203      	tst	r3, r0
    190e:	d02d      	beq.n	196c <_i2c_m_sync_transfer+0x494>
	void *   hw      = i2c_dev->hw;
    1910:	692e      	ldr	r6, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1912:	7e33      	ldrb	r3, [r6, #24]
    1914:	b2db      	uxtb	r3, r3
    1916:	483d      	ldr	r0, [pc, #244]	; (1a0c <_i2c_m_sync_transfer+0x534>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1918:	4219      	tst	r1, r3
    191a:	d141      	bne.n	19a0 <_i2c_m_sync_transfer+0x4c8>
    191c:	7e33      	ldrb	r3, [r6, #24]
    191e:	b2db      	uxtb	r3, r3
    1920:	3801      	subs	r0, #1
		if (timeout-- == 0) {
    1922:	2800      	cmp	r0, #0
    1924:	d1f8      	bne.n	1918 <_i2c_m_sync_transfer+0x440>
			if (msg->flags & I2C_M_STOP) {
    1926:	4643      	mov	r3, r8
    1928:	885b      	ldrh	r3, [r3, #2]
    192a:	b21b      	sxth	r3, r3
    192c:	2b00      	cmp	r3, #0
    192e:	da00      	bge.n	1932 <_i2c_m_sync_transfer+0x45a>
    1930:	e73f      	b.n	17b2 <_i2c_m_sync_transfer+0x2da>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1932:	886b      	ldrh	r3, [r5, #2]
    1934:	4a34      	ldr	r2, [pc, #208]	; (1a08 <_i2c_m_sync_transfer+0x530>)
    1936:	4013      	ands	r3, r2
    1938:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
    193a:	2005      	movs	r0, #5
    193c:	4240      	negs	r0, r0
			return ret;
    193e:	e663      	b.n	1608 <_i2c_m_sync_transfer+0x130>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1940:	6863      	ldr	r3, [r4, #4]
    1942:	4831      	ldr	r0, [pc, #196]	; (1a08 <_i2c_m_sync_transfer+0x530>)
    1944:	4003      	ands	r3, r0
    1946:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1948:	69e3      	ldr	r3, [r4, #28]
    194a:	421a      	tst	r2, r3
    194c:	d1fc      	bne.n	1948 <_i2c_m_sync_transfer+0x470>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    194e:	6860      	ldr	r0, [r4, #4]
    1950:	23c0      	movs	r3, #192	; 0xc0
    1952:	029b      	lsls	r3, r3, #10
    1954:	4303      	orrs	r3, r0
    1956:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1958:	69e3      	ldr	r3, [r4, #28]
    195a:	421a      	tst	r2, r3
    195c:	d1fc      	bne.n	1958 <_i2c_m_sync_transfer+0x480>
    195e:	e7c2      	b.n	18e6 <_i2c_m_sync_transfer+0x40e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1960:	464b      	mov	r3, r9
    1962:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1964:	2302      	movs	r3, #2
    1966:	425b      	negs	r3, r3
    1968:	9301      	str	r3, [sp, #4]
    196a:	e7cd      	b.n	1908 <_i2c_m_sync_transfer+0x430>
    196c:	9e01      	ldr	r6, [sp, #4]
    196e:	0030      	movs	r0, r6
    1970:	e64a      	b.n	1608 <_i2c_m_sync_transfer+0x130>
		return I2C_ERR_BUSY;
    1972:	2006      	movs	r0, #6
    1974:	4240      	negs	r0, r0
    1976:	e647      	b.n	1608 <_i2c_m_sync_transfer+0x130>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1978:	2b01      	cmp	r3, #1
    197a:	d000      	beq.n	197e <_i2c_m_sync_transfer+0x4a6>
    197c:	e6e7      	b.n	174e <_i2c_m_sync_transfer+0x276>
    197e:	2e00      	cmp	r6, #0
    1980:	d100      	bne.n	1984 <_i2c_m_sync_transfer+0x4ac>
    1982:	e6e4      	b.n	174e <_i2c_m_sync_transfer+0x276>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1984:	687a      	ldr	r2, [r7, #4]
    1986:	2380      	movs	r3, #128	; 0x80
    1988:	02db      	lsls	r3, r3, #11
    198a:	4313      	orrs	r3, r2
    198c:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    198e:	2204      	movs	r2, #4
    1990:	69fb      	ldr	r3, [r7, #28]
    1992:	421a      	tst	r2, r3
    1994:	d1fc      	bne.n	1990 <_i2c_m_sync_transfer+0x4b8>
			if (msg->len == 0) {
    1996:	686b      	ldr	r3, [r5, #4]
    1998:	2b00      	cmp	r3, #0
    199a:	d100      	bne.n	199e <_i2c_m_sync_transfer+0x4c6>
    199c:	e6cf      	b.n	173e <_i2c_m_sync_transfer+0x266>
    199e:	e6d6      	b.n	174e <_i2c_m_sync_transfer+0x276>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    19a0:	6827      	ldr	r7, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    19a2:	69e0      	ldr	r0, [r4, #28]
    19a4:	4202      	tst	r2, r0
    19a6:	d1fc      	bne.n	19a2 <_i2c_m_sync_transfer+0x4ca>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    19a8:	8b60      	ldrh	r0, [r4, #26]
    19aa:	b280      	uxth	r0, r0
	if (flags & MB_FLAG) {
    19ac:	4666      	mov	r6, ip
    19ae:	421e      	tst	r6, r3
    19b0:	d100      	bne.n	19b4 <_i2c_m_sync_transfer+0x4dc>
    19b2:	e77f      	b.n	18b4 <_i2c_m_sync_transfer+0x3dc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    19b4:	464b      	mov	r3, r9
    19b6:	4203      	tst	r3, r0
    19b8:	d100      	bne.n	19bc <_i2c_m_sync_transfer+0x4e4>
    19ba:	e719      	b.n	17f0 <_i2c_m_sync_transfer+0x318>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    19bc:	7626      	strb	r6, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    19be:	886b      	ldrh	r3, [r5, #2]
    19c0:	2680      	movs	r6, #128	; 0x80
    19c2:	0176      	lsls	r6, r6, #5
    19c4:	4333      	orrs	r3, r6
    19c6:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    19c8:	886b      	ldrh	r3, [r5, #2]
    19ca:	4e0f      	ldr	r6, [pc, #60]	; (1a08 <_i2c_m_sync_transfer+0x530>)
    19cc:	4033      	ands	r3, r6
    19ce:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    19d0:	4663      	mov	r3, ip
    19d2:	4018      	ands	r0, r3
			return I2C_ERR_BAD_ADDRESS;
    19d4:	4246      	negs	r6, r0
    19d6:	4146      	adcs	r6, r0
    19d8:	1f73      	subs	r3, r6, #5
    19da:	9301      	str	r3, [sp, #4]
    19dc:	e794      	b.n	1908 <_i2c_m_sync_transfer+0x430>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    19de:	2b01      	cmp	r3, #1
    19e0:	d000      	beq.n	19e4 <_i2c_m_sync_transfer+0x50c>
    19e2:	e784      	b.n	18ee <_i2c_m_sync_transfer+0x416>
    19e4:	2f00      	cmp	r7, #0
    19e6:	d100      	bne.n	19ea <_i2c_m_sync_transfer+0x512>
    19e8:	e781      	b.n	18ee <_i2c_m_sync_transfer+0x416>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    19ea:	6860      	ldr	r0, [r4, #4]
    19ec:	2380      	movs	r3, #128	; 0x80
    19ee:	02db      	lsls	r3, r3, #11
    19f0:	4303      	orrs	r3, r0
    19f2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    19f4:	69e3      	ldr	r3, [r4, #28]
    19f6:	421a      	tst	r2, r3
    19f8:	d1fc      	bne.n	19f4 <_i2c_m_sync_transfer+0x51c>
			if (msg->len == 0) {
    19fa:	686b      	ldr	r3, [r5, #4]
    19fc:	2b00      	cmp	r3, #0
    19fe:	d100      	bne.n	1a02 <_i2c_m_sync_transfer+0x52a>
    1a00:	e76d      	b.n	18de <_i2c_m_sync_transfer+0x406>
    1a02:	e774      	b.n	18ee <_i2c_m_sync_transfer+0x416>
    1a04:	fffffbff 	.word	0xfffffbff
    1a08:	fffffeff 	.word	0xfffffeff
    1a0c:	0000ffff 	.word	0x0000ffff

00001a10 <_slcd_sync_set_segment>:
	return ERR_NONE;
}

static int32_t _slcd_sync_set_segment(struct _slcd_sync_device *dev, const uint32_t com, const uint32_t seg,
                                      const bool on)
{
    1a10:	b510      	push	{r4, lr}
	if ((SLCD_COMNUM(seg) >= CONF_SLCD_COM_NUM) || (SLCD_SEGNUM(seg) >= CONF_SLCD_SEG_NUM)) {
    1a12:	0214      	lsls	r4, r2, #8
    1a14:	0e24      	lsrs	r4, r4, #24
    1a16:	2c04      	cmp	r4, #4
    1a18:	d82d      	bhi.n	1a76 <_slcd_sync_set_segment+0x66>
    1a1a:	24ff      	movs	r4, #255	; 0xff
    1a1c:	4014      	ands	r4, r2
    1a1e:	2c17      	cmp	r4, #23
    1a20:	d82c      	bhi.n	1a7c <_slcd_sync_set_segment+0x6c>
		return ERR_INVALID_ARG;
	}
	/* Use register instead hri interface to optimization code */
	if (on) {
    1a22:	2b00      	cmp	r3, #0
    1a24:	d012      	beq.n	1a4c <_slcd_sync_set_segment+0x3c>
		((uint32_t *)&(((Slcd *)dev->hw)->SDATAL0))[(com * 2) + (seg >> 5)]
    1a26:	0954      	lsrs	r4, r2, #5
    1a28:	6803      	ldr	r3, [r0, #0]
    1a2a:	3324      	adds	r3, #36	; 0x24
    1a2c:	0049      	lsls	r1, r1, #1
    1a2e:	1909      	adds	r1, r1, r4
    1a30:	0089      	lsls	r1, r1, #2
		    |= (seg < 32) ? (1 << seg) : (1 << (seg >> 5));
    1a32:	1859      	adds	r1, r3, r1
    1a34:	6808      	ldr	r0, [r1, #0]
    1a36:	2a1f      	cmp	r2, #31
    1a38:	d805      	bhi.n	1a46 <_slcd_sync_set_segment+0x36>
    1a3a:	2301      	movs	r3, #1
    1a3c:	4093      	lsls	r3, r2
    1a3e:	4303      	orrs	r3, r0
    1a40:	600b      	str	r3, [r1, #0]
	} else {
		((uint32_t *)&(((Slcd *)dev->hw)->SDATAL0))[(com * 2) + (seg >> 5)]
		    &= ~((seg < 32) ? (1 << seg) : (1 << (seg >> 5)));
	}

	return ERR_NONE;
    1a42:	2000      	movs	r0, #0
}
    1a44:	bd10      	pop	{r4, pc}
		    |= (seg < 32) ? (1 << seg) : (1 << (seg >> 5));
    1a46:	2301      	movs	r3, #1
    1a48:	40a3      	lsls	r3, r4
    1a4a:	e7f8      	b.n	1a3e <_slcd_sync_set_segment+0x2e>
		((uint32_t *)&(((Slcd *)dev->hw)->SDATAL0))[(com * 2) + (seg >> 5)]
    1a4c:	0954      	lsrs	r4, r2, #5
    1a4e:	6803      	ldr	r3, [r0, #0]
    1a50:	3324      	adds	r3, #36	; 0x24
    1a52:	0049      	lsls	r1, r1, #1
    1a54:	1909      	adds	r1, r1, r4
    1a56:	0089      	lsls	r1, r1, #2
		    &= ~((seg < 32) ? (1 << seg) : (1 << (seg >> 5)));
    1a58:	1859      	adds	r1, r3, r1
    1a5a:	6808      	ldr	r0, [r1, #0]
    1a5c:	2a1f      	cmp	r2, #31
    1a5e:	d806      	bhi.n	1a6e <_slcd_sync_set_segment+0x5e>
    1a60:	2301      	movs	r3, #1
    1a62:	4093      	lsls	r3, r2
    1a64:	43db      	mvns	r3, r3
    1a66:	4003      	ands	r3, r0
    1a68:	600b      	str	r3, [r1, #0]
	return ERR_NONE;
    1a6a:	2000      	movs	r0, #0
    1a6c:	e7ea      	b.n	1a44 <_slcd_sync_set_segment+0x34>
		    &= ~((seg < 32) ? (1 << seg) : (1 << (seg >> 5)));
    1a6e:	2201      	movs	r2, #1
    1a70:	40a2      	lsls	r2, r4
    1a72:	43d3      	mvns	r3, r2
    1a74:	e7f7      	b.n	1a66 <_slcd_sync_set_segment+0x56>
		return ERR_INVALID_ARG;
    1a76:	200d      	movs	r0, #13
    1a78:	4240      	negs	r0, r0
    1a7a:	e7e3      	b.n	1a44 <_slcd_sync_set_segment+0x34>
    1a7c:	200d      	movs	r0, #13
    1a7e:	4240      	negs	r0, r0
    1a80:	e7e0      	b.n	1a44 <_slcd_sync_set_segment+0x34>
	...

00001a84 <_slcd_sync_init>:
	};
}

static inline bool hri_slcd_is_syncing(const void *const hw, hri_slcd_syncbusy_reg_t reg)
{
	return ((Slcd *)hw)->SYNCBUSY.reg & reg;
    1a84:	694b      	ldr	r3, [r1, #20]
	if (!hri_slcd_is_syncing(hw, SLCD_SYNCBUSY_SWRST)) {
    1a86:	07db      	lsls	r3, r3, #31
    1a88:	d418      	bmi.n	1abc <_slcd_sync_init+0x38>
	while (((Slcd *)hw)->SYNCBUSY.reg & reg) {
    1a8a:	2203      	movs	r2, #3
    1a8c:	694b      	ldr	r3, [r1, #20]
    1a8e:	421a      	tst	r2, r3
    1a90:	d1fc      	bne.n	1a8c <_slcd_sync_init+0x8>

static inline bool hri_slcd_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_slcd_wait_for_sync(hw, SLCD_SYNCBUSY_SWRST | SLCD_SYNCBUSY_ENABLE);
	tmp = ((Slcd *)hw)->CTRLA.reg;
    1a92:	680b      	ldr	r3, [r1, #0]
		if (hri_slcd_get_CTRLA_ENABLE_bit(hw)) {
    1a94:	079b      	lsls	r3, r3, #30
    1a96:	d50b      	bpl.n	1ab0 <_slcd_sync_init+0x2c>
}

static inline void hri_slcd_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->CTRLA.reg &= ~SLCD_CTRLA_ENABLE;
    1a98:	680b      	ldr	r3, [r1, #0]
    1a9a:	2202      	movs	r2, #2
    1a9c:	4393      	bics	r3, r2
    1a9e:	600b      	str	r3, [r1, #0]
	while (((Slcd *)hw)->SYNCBUSY.reg & reg) {
    1aa0:	3201      	adds	r2, #1
    1aa2:	694b      	ldr	r3, [r1, #20]
    1aa4:	421a      	tst	r2, r3
    1aa6:	d1fc      	bne.n	1aa2 <_slcd_sync_init+0x1e>
    1aa8:	2202      	movs	r2, #2
    1aaa:	694b      	ldr	r3, [r1, #20]
    1aac:	421a      	tst	r2, r3
    1aae:	d1fc      	bne.n	1aaa <_slcd_sync_init+0x26>
}

static inline void hri_slcd_write_CTRLA_reg(const void *const hw, hri_slcd_ctrla_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->CTRLA.reg = data;
    1ab0:	2301      	movs	r3, #1
    1ab2:	600b      	str	r3, [r1, #0]
	while (((Slcd *)hw)->SYNCBUSY.reg & reg) {
    1ab4:	2203      	movs	r2, #3
    1ab6:	694b      	ldr	r3, [r1, #20]
    1ab8:	421a      	tst	r2, r3
    1aba:	d1fc      	bne.n	1ab6 <_slcd_sync_init+0x32>
    1abc:	2201      	movs	r2, #1
    1abe:	694b      	ldr	r3, [r1, #20]
    1ac0:	421a      	tst	r2, r3
    1ac2:	d1fc      	bne.n	1abe <_slcd_sync_init+0x3a>
	dev->hw = hw;
    1ac4:	6001      	str	r1, [r0, #0]
	((Slcd *)hw)->CTRLA.reg = data;
    1ac6:	4b16      	ldr	r3, [pc, #88]	; (1b20 <_slcd_sync_init+0x9c>)
    1ac8:	600b      	str	r3, [r1, #0]
	while (((Slcd *)hw)->SYNCBUSY.reg & reg) {
    1aca:	2203      	movs	r2, #3
    1acc:	694b      	ldr	r3, [r1, #20]
    1ace:	421a      	tst	r2, r3
    1ad0:	d1fc      	bne.n	1acc <_slcd_sync_init+0x48>
}

static inline void hri_slcd_write_CTRLB_reg(const void *const hw, hri_slcd_ctrlb_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->CTRLB.reg = data;
    1ad2:	2381      	movs	r3, #129	; 0x81
    1ad4:	808b      	strh	r3, [r1, #4]
}

static inline void hri_slcd_write_CTRLC_reg(const void *const hw, hri_slcd_ctrlc_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->CTRLC.reg = data;
    1ad6:	3b01      	subs	r3, #1
    1ad8:	80cb      	strh	r3, [r1, #6]
}

static inline void hri_slcd_write_CTRLD_reg(const void *const hw, hri_slcd_ctrld_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->CTRLD.reg = data;
    1ada:	720b      	strb	r3, [r1, #8]
	while (((Slcd *)hw)->SYNCBUSY.reg & reg) {
    1adc:	2207      	movs	r2, #7
    1ade:	694b      	ldr	r3, [r1, #20]
    1ae0:	421a      	tst	r2, r3
    1ae2:	d1fc      	bne.n	1ade <_slcd_sync_init+0x5a>
}

static inline void hri_slcd_write_LPENL_reg(const void *const hw, hri_slcd_lpenl_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->LPENL.reg = data;
    1ae4:	4b0f      	ldr	r3, [pc, #60]	; (1b24 <_slcd_sync_init+0xa0>)
    1ae6:	61cb      	str	r3, [r1, #28]
}

static inline void hri_slcd_write_LPENH_reg(const void *const hw, hri_slcd_lpenh_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->LPENH.reg = data;
    1ae8:	23ff      	movs	r3, #255	; 0xff
    1aea:	011b      	lsls	r3, r3, #4
    1aec:	620b      	str	r3, [r1, #32]
}

static inline void hri_slcd_write_SDATAL0_reg(const void *const hw, hri_slcd_sdatal0_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->SDATAL0.reg = data;
    1aee:	2300      	movs	r3, #0
    1af0:	624b      	str	r3, [r1, #36]	; 0x24
}

static inline void hri_slcd_write_SDATAH0_reg(const void *const hw, hri_slcd_sdatah0_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->SDATAH0.reg = data;
    1af2:	628b      	str	r3, [r1, #40]	; 0x28
}

static inline void hri_slcd_write_SDATAL1_reg(const void *const hw, hri_slcd_sdatal1_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->SDATAL1.reg = data;
    1af4:	62cb      	str	r3, [r1, #44]	; 0x2c
}

static inline void hri_slcd_write_SDATAH1_reg(const void *const hw, hri_slcd_sdatah1_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->SDATAH1.reg = data;
    1af6:	630b      	str	r3, [r1, #48]	; 0x30
}

static inline void hri_slcd_write_SDATAL2_reg(const void *const hw, hri_slcd_sdatal2_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->SDATAL2.reg = data;
    1af8:	634b      	str	r3, [r1, #52]	; 0x34
}

static inline void hri_slcd_write_SDATAH2_reg(const void *const hw, hri_slcd_sdatah2_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->SDATAH2.reg = data;
    1afa:	638b      	str	r3, [r1, #56]	; 0x38
}

static inline void hri_slcd_write_SDATAL3_reg(const void *const hw, hri_slcd_sdatal3_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->SDATAL3.reg = data;
    1afc:	63cb      	str	r3, [r1, #60]	; 0x3c
}

static inline void hri_slcd_write_SDATAH3_reg(const void *const hw, hri_slcd_sdatah3_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->SDATAH3.reg = data;
    1afe:	640b      	str	r3, [r1, #64]	; 0x40
}

static inline void hri_slcd_write_SDATAL4_reg(const void *const hw, hri_slcd_sdatal4_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->SDATAL4.reg = data;
    1b00:	644b      	str	r3, [r1, #68]	; 0x44
}

static inline void hri_slcd_write_SDATAH4_reg(const void *const hw, hri_slcd_sdatah4_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->SDATAH4.reg = data;
    1b02:	648b      	str	r3, [r1, #72]	; 0x48
}

static inline void hri_slcd_write_SDATAL5_reg(const void *const hw, hri_slcd_sdatal5_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->SDATAL5.reg = data;
    1b04:	64cb      	str	r3, [r1, #76]	; 0x4c
}

static inline void hri_slcd_write_SDATAH5_reg(const void *const hw, hri_slcd_sdatah5_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->SDATAH5.reg = data;
    1b06:	650b      	str	r3, [r1, #80]	; 0x50
}

static inline void hri_slcd_write_SDATAL6_reg(const void *const hw, hri_slcd_sdatal6_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->SDATAL6.reg = data;
    1b08:	654b      	str	r3, [r1, #84]	; 0x54
}

static inline void hri_slcd_write_SDATAH6_reg(const void *const hw, hri_slcd_sdatah6_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->SDATAH6.reg = data;
    1b0a:	658b      	str	r3, [r1, #88]	; 0x58
}

static inline void hri_slcd_write_SDATAL7_reg(const void *const hw, hri_slcd_sdatal7_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->SDATAL7.reg = data;
    1b0c:	65cb      	str	r3, [r1, #92]	; 0x5c
}

static inline void hri_slcd_write_SDATAH7_reg(const void *const hw, hri_slcd_sdatah7_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->SDATAH7.reg = data;
    1b0e:	660b      	str	r3, [r1, #96]	; 0x60
	hri_slcd_set_BCFG_MODE_bit(dev->hw);
    1b10:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_slcd_set_BCFG_MODE_bit(const void *const hw)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->BCFG.reg |= SLCD_BCFG_MODE;
    1b12:	6e93      	ldr	r3, [r2, #104]	; 0x68
    1b14:	2101      	movs	r1, #1
    1b16:	430b      	orrs	r3, r1
    1b18:	6693      	str	r3, [r2, #104]	; 0x68
}
    1b1a:	2000      	movs	r0, #0
    1b1c:	4770      	bx	lr
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	00033014 	.word	0x00033014
    1b24:	cfffffc0 	.word	0xcfffffc0

00001b28 <_slcd_sync_enable>:
	hri_slcd_set_CTRLA_ENABLE_bit(dev->hw);
    1b28:	6802      	ldr	r2, [r0, #0]
	((Slcd *)hw)->CTRLA.reg |= SLCD_CTRLA_ENABLE;
    1b2a:	6813      	ldr	r3, [r2, #0]
    1b2c:	2102      	movs	r1, #2
    1b2e:	430b      	orrs	r3, r1
    1b30:	6013      	str	r3, [r2, #0]
	while (((Slcd *)hw)->SYNCBUSY.reg & reg) {
    1b32:	3101      	adds	r1, #1
    1b34:	6953      	ldr	r3, [r2, #20]
    1b36:	4219      	tst	r1, r3
    1b38:	d1fc      	bne.n	1b34 <_slcd_sync_enable+0xc>
}
    1b3a:	2000      	movs	r0, #0
    1b3c:	4770      	bx	lr
	...

00001b40 <_slcd_sync_seg_on>:
{
    1b40:	b510      	push	{r4, lr}
	return _slcd_sync_set_segment(dev, SLCD_COMNUM(seg), SLCD_SEGNUM(seg), true);
    1b42:	23ff      	movs	r3, #255	; 0xff
    1b44:	001a      	movs	r2, r3
    1b46:	400a      	ands	r2, r1
    1b48:	0c09      	lsrs	r1, r1, #16
    1b4a:	4019      	ands	r1, r3
    1b4c:	3bfe      	subs	r3, #254	; 0xfe
    1b4e:	4c01      	ldr	r4, [pc, #4]	; (1b54 <_slcd_sync_seg_on+0x14>)
    1b50:	47a0      	blx	r4
}
    1b52:	bd10      	pop	{r4, pc}
    1b54:	00001a11 	.word	0x00001a11

00001b58 <_slcd_sync_seg_blink>:
{
    1b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b5a:	46c6      	mov	lr, r8
    1b5c:	b500      	push	{lr}
    1b5e:	0004      	movs	r4, r0
	if ((SLCD_COMNUM(seg) >= CONF_SLCD_COM_NUM) || (SLCD_SEGNUM(seg) >= CONF_SLCD_SEG_NUM)) {
    1b60:	020d      	lsls	r5, r1, #8
    1b62:	0e2d      	lsrs	r5, r5, #24
    1b64:	2d04      	cmp	r5, #4
    1b66:	d900      	bls.n	1b6a <_slcd_sync_seg_blink+0x12>
    1b68:	e087      	b.n	1c7a <_slcd_sync_seg_blink+0x122>
    1b6a:	26ff      	movs	r6, #255	; 0xff
    1b6c:	400e      	ands	r6, r1
	if (SLCD_SEGNUM(seg) >= 2) {
    1b6e:	2e01      	cmp	r6, #1
    1b70:	d900      	bls.n	1b74 <_slcd_sync_seg_blink+0x1c>
    1b72:	e085      	b.n	1c80 <_slcd_sync_seg_blink+0x128>
	if (period > SLCD_FC_MAX_MS || period < SLCD_FC_MIN_MS) {
    1b74:	4945      	ldr	r1, [pc, #276]	; (1c8c <_slcd_sync_seg_blink+0x134>)
    1b76:	0013      	movs	r3, r2
    1b78:	3b0f      	subs	r3, #15
    1b7a:	428b      	cmp	r3, r1
    1b7c:	d900      	bls.n	1b80 <_slcd_sync_seg_blink+0x28>
    1b7e:	e082      	b.n	1c86 <_slcd_sync_seg_blink+0x12e>
	hri_slcd_clear_CTRLD_FC0EN_bit(dev->hw);
    1b80:	6801      	ldr	r1, [r0, #0]
	((Slcd *)hw)->CTRLD.reg &= ~SLCD_CTRLD_FC0EN;
    1b82:	7a0b      	ldrb	r3, [r1, #8]
    1b84:	2010      	movs	r0, #16
    1b86:	4383      	bics	r3, r0
    1b88:	720b      	strb	r3, [r1, #8]
	while (((Slcd *)hw)->SYNCBUSY.reg & reg) {
    1b8a:	2707      	movs	r7, #7
    1b8c:	694b      	ldr	r3, [r1, #20]
    1b8e:	421f      	tst	r7, r3
    1b90:	d1fc      	bne.n	1b8c <_slcd_sync_seg_blink+0x34>
	hri_slcd_wait_for_sync(dev->hw, SLCD_SYNCBUSY_CTRLD);
    1b92:	6827      	ldr	r7, [r4, #0]
    1b94:	2104      	movs	r1, #4
    1b96:	697b      	ldr	r3, [r7, #20]
    1b98:	4219      	tst	r1, r3
    1b9a:	d1fc      	bne.n	1b96 <_slcd_sync_seg_blink+0x3e>
	if (period <= SLCD_FC_BYPASS_MAX_MS) {
    1b9c:	23f0      	movs	r3, #240	; 0xf0
    1b9e:	005b      	lsls	r3, r3, #1
    1ba0:	429a      	cmp	r2, r3
    1ba2:	d853      	bhi.n	1c4c <_slcd_sync_seg_blink+0xf4>
	((Slcd *)hw)->FC0.reg |= mask;
    1ba4:	7e38      	ldrb	r0, [r7, #24]
    1ba6:	b2c3      	uxtb	r3, r0
    1ba8:	4698      	mov	r8, r3
		hri_slcd_set_FC0_reg(dev->hw, SLCD_FC0_PB | ((period / (1000 / SLCD_FRAME_FREQUENCY)) - 1));
    1baa:	210f      	movs	r1, #15
    1bac:	0010      	movs	r0, r2
    1bae:	4b38      	ldr	r3, [pc, #224]	; (1c90 <_slcd_sync_seg_blink+0x138>)
    1bb0:	4798      	blx	r3
    1bb2:	1e43      	subs	r3, r0, #1
    1bb4:	2080      	movs	r0, #128	; 0x80
    1bb6:	4240      	negs	r0, r0
    1bb8:	4642      	mov	r2, r8
    1bba:	4310      	orrs	r0, r2
    1bbc:	4303      	orrs	r3, r0
    1bbe:	b2db      	uxtb	r3, r3
    1bc0:	763b      	strb	r3, [r7, #24]
	hri_slcd_set_CTRLD_FC0EN_bit(dev->hw);
    1bc2:	6822      	ldr	r2, [r4, #0]
	((Slcd *)hw)->CTRLD.reg |= SLCD_CTRLD_FC0EN;
    1bc4:	7a13      	ldrb	r3, [r2, #8]
    1bc6:	2110      	movs	r1, #16
    1bc8:	430b      	orrs	r3, r1
    1bca:	7213      	strb	r3, [r2, #8]
	while (((Slcd *)hw)->SYNCBUSY.reg & reg) {
    1bcc:	3909      	subs	r1, #9
    1bce:	6953      	ldr	r3, [r2, #20]
    1bd0:	4219      	tst	r1, r3
    1bd2:	d1fc      	bne.n	1bce <_slcd_sync_seg_blink+0x76>
	_slcd_sync_set_segment(dev, SLCD_COMNUM(seg), SLCD_SEGNUM(seg), true);
    1bd4:	2301      	movs	r3, #1
    1bd6:	0032      	movs	r2, r6
    1bd8:	0029      	movs	r1, r5
    1bda:	0020      	movs	r0, r4
    1bdc:	4f2d      	ldr	r7, [pc, #180]	; (1c94 <_slcd_sync_seg_blink+0x13c>)
    1bde:	47b8      	blx	r7
	hri_slcd_clear_CTRLD_BLINK_bit(dev->hw);
    1be0:	6822      	ldr	r2, [r4, #0]
	((Slcd *)hw)->CTRLD.reg &= ~SLCD_CTRLD_BLINK;
    1be2:	7a13      	ldrb	r3, [r2, #8]
    1be4:	2102      	movs	r1, #2
    1be6:	438b      	bics	r3, r1
    1be8:	7213      	strb	r3, [r2, #8]
	while (((Slcd *)hw)->SYNCBUSY.reg & reg) {
    1bea:	3105      	adds	r1, #5
    1bec:	6953      	ldr	r3, [r2, #20]
    1bee:	4219      	tst	r1, r3
    1bf0:	d1fc      	bne.n	1bec <_slcd_sync_seg_blink+0x94>
	hri_slcd_clear_CTRLA_ENABLE_bit(dev->hw);
    1bf2:	6822      	ldr	r2, [r4, #0]
	((Slcd *)hw)->CTRLA.reg &= ~SLCD_CTRLA_ENABLE;
    1bf4:	6813      	ldr	r3, [r2, #0]
    1bf6:	2102      	movs	r1, #2
    1bf8:	438b      	bics	r3, r1
    1bfa:	6013      	str	r3, [r2, #0]
	while (((Slcd *)hw)->SYNCBUSY.reg & reg) {
    1bfc:	3101      	adds	r1, #1
    1bfe:	6953      	ldr	r3, [r2, #20]
    1c00:	4219      	tst	r1, r3
    1c02:	d1fc      	bne.n	1bfe <_slcd_sync_seg_blink+0xa6>
	hri_slcd_wait_for_sync(dev->hw, SLCD_SYNCBUSY_ENABLE);
    1c04:	6822      	ldr	r2, [r4, #0]
    1c06:	2102      	movs	r1, #2
    1c08:	6953      	ldr	r3, [r2, #20]
    1c0a:	4219      	tst	r1, r3
    1c0c:	d1fc      	bne.n	1c08 <_slcd_sync_seg_blink+0xb0>
	if (SLCD_SEGNUM(seg) == 0) {
    1c0e:	2e00      	cmp	r6, #0
    1c10:	d129      	bne.n	1c66 <_slcd_sync_seg_blink+0x10e>
}

static inline void hri_slcd_set_BCFG_BSS0_bf(const void *const hw, hri_slcd_bcfg_reg_t mask)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->BCFG.reg |= SLCD_BCFG_BSS0(mask);
    1c12:	6e91      	ldr	r1, [r2, #104]	; 0x68
		hri_slcd_set_BCFG_BSS0_bf(dev->hw, 1 << SLCD_COMNUM(seg));
    1c14:	2380      	movs	r3, #128	; 0x80
    1c16:	045b      	lsls	r3, r3, #17
    1c18:	40ab      	lsls	r3, r5
    1c1a:	0c1b      	lsrs	r3, r3, #16
    1c1c:	430b      	orrs	r3, r1
    1c1e:	6693      	str	r3, [r2, #104]	; 0x68
	hri_slcd_set_CTRLA_ENABLE_bit(dev->hw);
    1c20:	6822      	ldr	r2, [r4, #0]
	((Slcd *)hw)->CTRLA.reg |= SLCD_CTRLA_ENABLE;
    1c22:	6813      	ldr	r3, [r2, #0]
    1c24:	2102      	movs	r1, #2
    1c26:	430b      	orrs	r3, r1
    1c28:	6013      	str	r3, [r2, #0]
	while (((Slcd *)hw)->SYNCBUSY.reg & reg) {
    1c2a:	3101      	adds	r1, #1
    1c2c:	6953      	ldr	r3, [r2, #20]
    1c2e:	4219      	tst	r1, r3
    1c30:	d1fc      	bne.n	1c2c <_slcd_sync_seg_blink+0xd4>
	hri_slcd_set_CTRLD_BLINK_bit(dev->hw);
    1c32:	6822      	ldr	r2, [r4, #0]
	((Slcd *)hw)->CTRLD.reg |= SLCD_CTRLD_BLINK;
    1c34:	7a13      	ldrb	r3, [r2, #8]
    1c36:	2102      	movs	r1, #2
    1c38:	430b      	orrs	r3, r1
    1c3a:	7213      	strb	r3, [r2, #8]
	while (((Slcd *)hw)->SYNCBUSY.reg & reg) {
    1c3c:	3105      	adds	r1, #5
    1c3e:	6953      	ldr	r3, [r2, #20]
    1c40:	4219      	tst	r1, r3
    1c42:	d1fc      	bne.n	1c3e <_slcd_sync_seg_blink+0xe6>
	return ERR_NONE;
    1c44:	2000      	movs	r0, #0
}
    1c46:	bc04      	pop	{r2}
    1c48:	4690      	mov	r8, r2
    1c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((Slcd *)hw)->FC0.reg |= mask;
    1c4c:	7e3b      	ldrb	r3, [r7, #24]
    1c4e:	b2db      	uxtb	r3, r3
    1c50:	4698      	mov	r8, r3
		hri_slcd_set_FC0_reg(dev->hw, (((period / (1000 / SLCD_FRAME_FREQUENCY)) / 8 - 1)));
    1c52:	2178      	movs	r1, #120	; 0x78
    1c54:	0010      	movs	r0, r2
    1c56:	4b0e      	ldr	r3, [pc, #56]	; (1c90 <_slcd_sync_seg_blink+0x138>)
    1c58:	4798      	blx	r3
    1c5a:	3801      	subs	r0, #1
    1c5c:	4643      	mov	r3, r8
    1c5e:	4318      	orrs	r0, r3
    1c60:	b2c0      	uxtb	r0, r0
    1c62:	7638      	strb	r0, [r7, #24]
    1c64:	e7ad      	b.n	1bc2 <_slcd_sync_seg_blink+0x6a>
}

static inline void hri_slcd_set_BCFG_BSS1_bf(const void *const hw, hri_slcd_bcfg_reg_t mask)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->BCFG.reg |= SLCD_BCFG_BSS1(mask);
    1c66:	6e91      	ldr	r1, [r2, #104]	; 0x68
		hri_slcd_set_BCFG_BSS1_bf(dev->hw, 1 << SLCD_COMNUM(seg));
    1c68:	2380      	movs	r3, #128	; 0x80
    1c6a:	025b      	lsls	r3, r3, #9
    1c6c:	40ab      	lsls	r3, r5
    1c6e:	20ff      	movs	r0, #255	; 0xff
    1c70:	0400      	lsls	r0, r0, #16
    1c72:	4003      	ands	r3, r0
    1c74:	430b      	orrs	r3, r1
    1c76:	6693      	str	r3, [r2, #104]	; 0x68
    1c78:	e7d2      	b.n	1c20 <_slcd_sync_seg_blink+0xc8>
		return ERR_INVALID_ARG;
    1c7a:	200d      	movs	r0, #13
    1c7c:	4240      	negs	r0, r0
    1c7e:	e7e2      	b.n	1c46 <_slcd_sync_seg_blink+0xee>
		return ERR_INVALID_ARG;
    1c80:	200d      	movs	r0, #13
    1c82:	4240      	negs	r0, r0
    1c84:	e7df      	b.n	1c46 <_slcd_sync_seg_blink+0xee>
		return ERR_INVALID_ARG;
    1c86:	200d      	movs	r0, #13
    1c88:	4240      	negs	r0, r0
    1c8a:	e7dc      	b.n	1c46 <_slcd_sync_seg_blink+0xee>
    1c8c:	00000ef1 	.word	0x00000ef1
    1c90:	0000278d 	.word	0x0000278d
    1c94:	00001a11 	.word	0x00001a11

00001c98 <_slcd_sync_write_char>:
{
    1c98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c9a:	46d6      	mov	lr, sl
    1c9c:	464f      	mov	r7, r9
    1c9e:	4646      	mov	r6, r8
    1ca0:	b5c0      	push	{r6, r7, lr}
	if (cm_setting[index].size == 7) {
    1ca2:	0094      	lsls	r4, r2, #2
    1ca4:	4b3c      	ldr	r3, [pc, #240]	; (1d98 <_slcd_sync_write_char+0x100>)
    1ca6:	191b      	adds	r3, r3, r4
    1ca8:	78dd      	ldrb	r5, [r3, #3]
    1caa:	2d07      	cmp	r5, #7
    1cac:	d004      	beq.n	1cb8 <_slcd_sync_write_char+0x20>
	} else if (cm_setting[index].size == 14) {
    1cae:	2d0e      	cmp	r5, #14
    1cb0:	d01a      	beq.n	1ce8 <_slcd_sync_write_char+0x50>
		return ERR_INVALID_ARG;
    1cb2:	200d      	movs	r0, #13
    1cb4:	4240      	negs	r0, r0
    1cb6:	e060      	b.n	1d7a <_slcd_sync_write_char+0xe2>
			if (cm7_lut[i].character == character) {
    1cb8:	2900      	cmp	r1, #0
    1cba:	d00d      	beq.n	1cd8 <_slcd_sync_write_char+0x40>
    1cbc:	2301      	movs	r3, #1
    1cbe:	4f37      	ldr	r7, [pc, #220]	; (1d9c <_slcd_sync_write_char+0x104>)
    1cc0:	2630      	movs	r6, #48	; 0x30
    1cc2:	009c      	lsls	r4, r3, #2
    1cc4:	193c      	adds	r4, r7, r4
    1cc6:	5da4      	ldrb	r4, [r4, r6]
    1cc8:	428c      	cmp	r4, r1
    1cca:	d006      	beq.n	1cda <_slcd_sync_write_char+0x42>
		for (i = 0; i<sizeof(cm7_lut)>> 2; i++) {
    1ccc:	3301      	adds	r3, #1
    1cce:	2b11      	cmp	r3, #17
    1cd0:	d1f7      	bne.n	1cc2 <_slcd_sync_write_char+0x2a>
		return ERR_INVALID_ARG;
    1cd2:	200d      	movs	r0, #13
    1cd4:	4240      	negs	r0, r0
    1cd6:	e050      	b.n	1d7a <_slcd_sync_write_char+0xe2>
			if (cm7_lut[i].character == character) {
    1cd8:	2300      	movs	r3, #0
				data = cm7_lut[i].mapping;
    1cda:	009b      	lsls	r3, r3, #2
    1cdc:	492f      	ldr	r1, [pc, #188]	; (1d9c <_slcd_sync_write_char+0x104>)
    1cde:	18cb      	adds	r3, r1, r3
    1ce0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    1ce2:	0a23      	lsrs	r3, r4, #8
    1ce4:	469c      	mov	ip, r3
				break;
    1ce6:	e016      	b.n	1d16 <_slcd_sync_write_char+0x7e>
			if (cm14_lut[i].character == character) {
    1ce8:	2930      	cmp	r1, #48	; 0x30
    1cea:	d00d      	beq.n	1d08 <_slcd_sync_write_char+0x70>
    1cec:	2301      	movs	r3, #1
    1cee:	4f2b      	ldr	r7, [pc, #172]	; (1d9c <_slcd_sync_write_char+0x104>)
    1cf0:	2674      	movs	r6, #116	; 0x74
    1cf2:	009c      	lsls	r4, r3, #2
    1cf4:	193c      	adds	r4, r7, r4
    1cf6:	5da4      	ldrb	r4, [r4, r6]
    1cf8:	428c      	cmp	r4, r1
    1cfa:	d006      	beq.n	1d0a <_slcd_sync_write_char+0x72>
		for (i = 0; i<sizeof(cm14_lut)>> 2; i++) {
    1cfc:	3301      	adds	r3, #1
    1cfe:	2b33      	cmp	r3, #51	; 0x33
    1d00:	d1f7      	bne.n	1cf2 <_slcd_sync_write_char+0x5a>
		return ERR_INVALID_ARG;
    1d02:	200d      	movs	r0, #13
    1d04:	4240      	negs	r0, r0
    1d06:	e038      	b.n	1d7a <_slcd_sync_write_char+0xe2>
			if (cm14_lut[i].character == character) {
    1d08:	2300      	movs	r3, #0
				data = cm14_lut[i].mapping;
    1d0a:	009b      	lsls	r3, r3, #2
    1d0c:	4923      	ldr	r1, [pc, #140]	; (1d9c <_slcd_sync_write_char+0x104>)
    1d0e:	18cb      	adds	r3, r1, r3
    1d10:	6f5c      	ldr	r4, [r3, #116]	; 0x74
    1d12:	0a23      	lsrs	r3, r4, #8
    1d14:	469c      	mov	ip, r3

static inline void hri_slcd_write_CMCFG_NSEG_bf(const void *const hw, hri_slcd_cmcfg_reg_t data)
{
	uint8_t tmp;
	SLCD_CRITICAL_SECTION_ENTER();
	tmp = ((Slcd *)hw)->CMCFG.reg;
    1d16:	2470      	movs	r4, #112	; 0x70
    1d18:	6803      	ldr	r3, [r0, #0]
    1d1a:	5d1b      	ldrb	r3, [r3, r4]
	tmp &= ~SLCD_CMCFG_NSEG_Msk;
    1d1c:	2607      	movs	r6, #7
    1d1e:	43b3      	bics	r3, r6
	hri_slcd_write_CMCFG_NSEG_bf(dev->hw, cm_setting[index].nseg);
    1d20:	491d      	ldr	r1, [pc, #116]	; (1d98 <_slcd_sync_write_char+0x100>)
    1d22:	468a      	mov	sl, r1
    1d24:	0092      	lsls	r2, r2, #2
    1d26:	188f      	adds	r7, r1, r2
	tmp |= SLCD_CMCFG_NSEG(data);
    1d28:	78be      	ldrb	r6, [r7, #2]
    1d2a:	46b1      	mov	r9, r6
    1d2c:	2607      	movs	r6, #7
    1d2e:	4649      	mov	r1, r9
    1d30:	400e      	ands	r6, r1
    1d32:	4333      	orrs	r3, r6
	((Slcd *)hw)->CMCFG.reg = tmp;
    1d34:	6801      	ldr	r1, [r0, #0]
    1d36:	550b      	strb	r3, [r1, r4]
	hri_slcd_write_CMINDEX_CINDEX_bf(dev->hw, cm_setting[index].com_index);
    1d38:	6804      	ldr	r4, [r0, #0]

static inline void hri_slcd_write_CMINDEX_CINDEX_bf(const void *const hw, hri_slcd_cmindex_reg_t data)
{
	uint16_t tmp;
	SLCD_CRITICAL_SECTION_ENTER();
	tmp = ((Slcd *)hw)->CMINDEX.reg;
    1d3a:	2684      	movs	r6, #132	; 0x84
    1d3c:	5ba3      	ldrh	r3, [r4, r6]
	tmp &= ~SLCD_CMINDEX_CINDEX_Msk;
    1d3e:	4918      	ldr	r1, [pc, #96]	; (1da0 <_slcd_sync_write_char+0x108>)
    1d40:	400b      	ands	r3, r1
    1d42:	4651      	mov	r1, sl
    1d44:	5c52      	ldrb	r2, [r2, r1]
	tmp |= SLCD_CMINDEX_CINDEX(data);
    1d46:	0212      	lsls	r2, r2, #8
    1d48:	21e0      	movs	r1, #224	; 0xe0
    1d4a:	00c9      	lsls	r1, r1, #3
    1d4c:	400a      	ands	r2, r1
    1d4e:	4313      	orrs	r3, r2
	((Slcd *)hw)->CMINDEX.reg = tmp;
    1d50:	53a3      	strh	r3, [r4, r6]
	hri_slcd_write_CMINDEX_SINDEX_bf(dev->hw, cm_setting[index].seg_index);
    1d52:	6802      	ldr	r2, [r0, #0]
	tmp = ((Slcd *)hw)->CMINDEX.reg;
    1d54:	5b93      	ldrh	r3, [r2, r6]
	tmp &= ~SLCD_CMINDEX_SINDEX_Msk;
    1d56:	213f      	movs	r1, #63	; 0x3f
    1d58:	438b      	bics	r3, r1
	tmp |= SLCD_CMINDEX_SINDEX(data);
    1d5a:	787f      	ldrb	r7, [r7, #1]
    1d5c:	4039      	ands	r1, r7
    1d5e:	430b      	orrs	r3, r1
	((Slcd *)hw)->CMINDEX.reg = tmp;
    1d60:	5393      	strh	r3, [r2, r6]
	if (cm_setting[index].size == 7) {
    1d62:	2d07      	cmp	r5, #7
    1d64:	d00e      	beq.n	1d84 <_slcd_sync_write_char+0xec>
	} else if (cm_setting[index].size == 14) {
    1d66:	2d0e      	cmp	r5, #14
    1d68:	d011      	beq.n	1d8e <_slcd_sync_write_char+0xf6>
	while (hri_slcd_get_STATUS_CMWRBUSY_bit(dev->hw))
    1d6a:	6802      	ldr	r2, [r0, #0]
    1d6c:	2108      	movs	r1, #8
	return (((Slcd *)hw)->STATUS.reg & SLCD_STATUS_CMWRBUSY) >> SLCD_STATUS_CMWRBUSY_Pos;
    1d6e:	7c13      	ldrb	r3, [r2, #16]
    1d70:	420b      	tst	r3, r1
    1d72:	d1fc      	bne.n	1d6e <_slcd_sync_write_char+0xd6>
}

static inline void hri_slcd_write_CMDATA_reg(const void *const hw, hri_slcd_cmdata_reg_t data)
{
	SLCD_CRITICAL_SECTION_ENTER();
	((Slcd *)hw)->CMDATA.reg = data;
    1d74:	4663      	mov	r3, ip
    1d76:	67d3      	str	r3, [r2, #124]	; 0x7c
	return ERR_NONE;
    1d78:	2000      	movs	r0, #0
}
    1d7a:	bc1c      	pop	{r2, r3, r4}
    1d7c:	4690      	mov	r8, r2
    1d7e:	4699      	mov	r9, r3
    1d80:	46a2      	mov	sl, r4
    1d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((Slcd *)hw)->CMDMASK.reg = data;
    1d84:	4a07      	ldr	r2, [pc, #28]	; (1da4 <_slcd_sync_write_char+0x10c>)
    1d86:	2380      	movs	r3, #128	; 0x80
    1d88:	6801      	ldr	r1, [r0, #0]
    1d8a:	50ca      	str	r2, [r1, r3]
    1d8c:	e7ed      	b.n	1d6a <_slcd_sync_write_char+0xd2>
    1d8e:	4a06      	ldr	r2, [pc, #24]	; (1da8 <_slcd_sync_write_char+0x110>)
    1d90:	2380      	movs	r3, #128	; 0x80
    1d92:	6801      	ldr	r1, [r0, #0]
    1d94:	50ca      	str	r2, [r1, r3]
    1d96:	e7e8      	b.n	1d6a <_slcd_sync_write_char+0xd2>
    1d98:	000039cc 	.word	0x000039cc
    1d9c:	00003a4c 	.word	0x00003a4c
    1da0:	fffff8ff 	.word	0xfffff8ff
    1da4:	00ffff80 	.word	0x00ffff80
    1da8:	00ffc000 	.word	0x00ffc000

00001dac <_slcd_sync_set_animation_period>:
{
    1dac:	b570      	push	{r4, r5, r6, lr}
    1dae:	0005      	movs	r5, r0
    1db0:	0008      	movs	r0, r1
	hri_slcd_clear_CTRLD_FC1EN_bit(dev->hw);
    1db2:	682a      	ldr	r2, [r5, #0]
	((Slcd *)hw)->CTRLD.reg &= ~SLCD_CTRLD_FC1EN;
    1db4:	7a13      	ldrb	r3, [r2, #8]
    1db6:	2120      	movs	r1, #32
    1db8:	438b      	bics	r3, r1
    1dba:	7213      	strb	r3, [r2, #8]
	while (((Slcd *)hw)->SYNCBUSY.reg & reg) {
    1dbc:	3919      	subs	r1, #25
    1dbe:	6953      	ldr	r3, [r2, #20]
    1dc0:	4219      	tst	r1, r3
    1dc2:	d1fc      	bne.n	1dbe <_slcd_sync_set_animation_period+0x12>
	hri_slcd_wait_for_sync(dev->hw, SLCD_SYNCBUSY_CTRLD);
    1dc4:	682c      	ldr	r4, [r5, #0]
    1dc6:	2204      	movs	r2, #4
    1dc8:	6963      	ldr	r3, [r4, #20]
    1dca:	421a      	tst	r2, r3
    1dcc:	d1fc      	bne.n	1dc8 <_slcd_sync_set_animation_period+0x1c>
	if (period <= SLCD_FC_BYPASS_MAX_MS) {
    1dce:	23f0      	movs	r3, #240	; 0xf0
    1dd0:	005b      	lsls	r3, r3, #1
    1dd2:	4298      	cmp	r0, r3
    1dd4:	d816      	bhi.n	1e04 <_slcd_sync_set_animation_period+0x58>
	((Slcd *)hw)->FC1.reg |= mask;
    1dd6:	7e66      	ldrb	r6, [r4, #25]
    1dd8:	b2f6      	uxtb	r6, r6
		hri_slcd_set_FC1_reg(dev->hw, SLCD_FC1_PB | ((period / (1000 / SLCD_FRAME_FREQUENCY)) - 1));
    1dda:	210f      	movs	r1, #15
    1ddc:	4b0e      	ldr	r3, [pc, #56]	; (1e18 <_slcd_sync_set_animation_period+0x6c>)
    1dde:	4798      	blx	r3
    1de0:	3801      	subs	r0, #1
    1de2:	4306      	orrs	r6, r0
    1de4:	2380      	movs	r3, #128	; 0x80
    1de6:	425b      	negs	r3, r3
    1de8:	4333      	orrs	r3, r6
    1dea:	b2db      	uxtb	r3, r3
    1dec:	7663      	strb	r3, [r4, #25]
	hri_slcd_set_CTRLD_FC1EN_bit(dev->hw);
    1dee:	682a      	ldr	r2, [r5, #0]
	((Slcd *)hw)->CTRLD.reg |= SLCD_CTRLD_FC1EN;
    1df0:	7a13      	ldrb	r3, [r2, #8]
    1df2:	2120      	movs	r1, #32
    1df4:	430b      	orrs	r3, r1
    1df6:	7213      	strb	r3, [r2, #8]
	while (((Slcd *)hw)->SYNCBUSY.reg & reg) {
    1df8:	3919      	subs	r1, #25
    1dfa:	6953      	ldr	r3, [r2, #20]
    1dfc:	4219      	tst	r1, r3
    1dfe:	d1fc      	bne.n	1dfa <_slcd_sync_set_animation_period+0x4e>
}
    1e00:	2000      	movs	r0, #0
    1e02:	bd70      	pop	{r4, r5, r6, pc}
	((Slcd *)hw)->FC1.reg |= mask;
    1e04:	7e66      	ldrb	r6, [r4, #25]
    1e06:	b2f6      	uxtb	r6, r6
		hri_slcd_set_FC1_reg(dev->hw, (((period / (1000 / SLCD_FRAME_FREQUENCY)) / 8 - 1)));
    1e08:	2178      	movs	r1, #120	; 0x78
    1e0a:	4b03      	ldr	r3, [pc, #12]	; (1e18 <_slcd_sync_set_animation_period+0x6c>)
    1e0c:	4798      	blx	r3
    1e0e:	3801      	subs	r0, #1
    1e10:	4306      	orrs	r6, r0
    1e12:	b2f6      	uxtb	r6, r6
    1e14:	7666      	strb	r6, [r4, #25]
    1e16:	e7ea      	b.n	1dee <_slcd_sync_set_animation_period+0x42>
    1e18:	0000278d 	.word	0x0000278d

00001e1c <_slcd_sync_start_animation>:
{
    1e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e1e:	46ce      	mov	lr, r9
    1e20:	4647      	mov	r7, r8
    1e22:	b580      	push	{r7, lr}
    1e24:	0005      	movs	r5, r0
    1e26:	000e      	movs	r6, r1
    1e28:	0014      	movs	r4, r2
	if (len > 16) {
    1e2a:	2a10      	cmp	r2, #16
    1e2c:	d900      	bls.n	1e30 <_slcd_sync_start_animation+0x14>
    1e2e:	e08e      	b.n	1f4e <_slcd_sync_start_animation+0x132>
	for (i = 0; i < len; i++) {
    1e30:	2a00      	cmp	r2, #0
    1e32:	d012      	beq.n	1e5a <_slcd_sync_start_animation+0x3e>
		if ((SLCD_SEGNUM(segs[i]) != 2 && SLCD_SEGNUM(segs[i]) != 3)) {
    1e34:	780a      	ldrb	r2, [r1, #0]
    1e36:	3a02      	subs	r2, #2
    1e38:	2a01      	cmp	r2, #1
    1e3a:	d900      	bls.n	1e3e <_slcd_sync_start_animation+0x22>
    1e3c:	e08a      	b.n	1f54 <_slcd_sync_start_animation+0x138>
    1e3e:	1d08      	adds	r0, r1, #4
    1e40:	00a1      	lsls	r1, r4, #2
    1e42:	1871      	adds	r1, r6, r1
    1e44:	27ff      	movs	r7, #255	; 0xff
	for (i = 0; i < len; i++) {
    1e46:	4288      	cmp	r0, r1
    1e48:	d007      	beq.n	1e5a <_slcd_sync_start_animation+0x3e>
		if ((SLCD_SEGNUM(segs[i]) != 2 && SLCD_SEGNUM(segs[i]) != 3)) {
    1e4a:	c804      	ldmia	r0!, {r2}
    1e4c:	403a      	ands	r2, r7
    1e4e:	3a02      	subs	r2, #2
    1e50:	2a01      	cmp	r2, #1
    1e52:	d9f8      	bls.n	1e46 <_slcd_sync_start_animation+0x2a>
			return ERR_INVALID_ARG;
    1e54:	200d      	movs	r0, #13
    1e56:	4240      	negs	r0, r0
    1e58:	e075      	b.n	1f46 <_slcd_sync_start_animation+0x12a>
	if (period > SLCD_FC_MAX_MS || period < SLCD_FC_MIN_MS) {
    1e5a:	4941      	ldr	r1, [pc, #260]	; (1f60 <_slcd_sync_start_animation+0x144>)
    1e5c:	001a      	movs	r2, r3
    1e5e:	3a0f      	subs	r2, #15
    1e60:	428a      	cmp	r2, r1
    1e62:	d900      	bls.n	1e66 <_slcd_sync_start_animation+0x4a>
    1e64:	e079      	b.n	1f5a <_slcd_sync_start_animation+0x13e>
	_slcd_sync_set_animation_period(dev, period);
    1e66:	0019      	movs	r1, r3
    1e68:	0028      	movs	r0, r5
    1e6a:	4b3e      	ldr	r3, [pc, #248]	; (1f64 <_slcd_sync_start_animation+0x148>)
    1e6c:	4798      	blx	r3
	hri_slcd_clear_CTRLA_ENABLE_bit(dev->hw);
    1e6e:	682a      	ldr	r2, [r5, #0]
	((Slcd *)hw)->CTRLA.reg &= ~SLCD_CTRLA_ENABLE;
    1e70:	6813      	ldr	r3, [r2, #0]
    1e72:	2102      	movs	r1, #2
    1e74:	438b      	bics	r3, r1
    1e76:	6013      	str	r3, [r2, #0]
	while (((Slcd *)hw)->SYNCBUSY.reg & reg) {
    1e78:	3101      	adds	r1, #1
    1e7a:	6953      	ldr	r3, [r2, #20]
    1e7c:	4219      	tst	r1, r3
    1e7e:	d1fc      	bne.n	1e7a <_slcd_sync_start_animation+0x5e>
	hri_slcd_clear_CTRLD_CSREN_bit(dev->hw);
    1e80:	682a      	ldr	r2, [r5, #0]
	((Slcd *)hw)->CTRLD.reg &= ~SLCD_CTRLD_CSREN;
    1e82:	7a13      	ldrb	r3, [r2, #8]
    1e84:	2104      	movs	r1, #4
    1e86:	438b      	bics	r3, r1
    1e88:	7213      	strb	r3, [r2, #8]
	while (((Slcd *)hw)->SYNCBUSY.reg & reg) {
    1e8a:	3103      	adds	r1, #3
    1e8c:	6953      	ldr	r3, [r2, #20]
    1e8e:	4219      	tst	r1, r3
    1e90:	d1fc      	bne.n	1e8c <_slcd_sync_start_animation+0x70>
	hri_slcd_wait_for_sync(dev->hw, SLCD_SYNCBUSY_ENABLE | SLCD_SYNCBUSY_CTRLD);
    1e92:	682a      	ldr	r2, [r5, #0]
    1e94:	2106      	movs	r1, #6
    1e96:	6953      	ldr	r3, [r2, #20]
    1e98:	4219      	tst	r1, r3
    1e9a:	d1fc      	bne.n	1e96 <_slcd_sync_start_animation+0x7a>
	((Slcd *)hw)->CSRCFG.reg |= SLCD_CSRCFG_FCS(mask);
    1e9c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    1e9e:	2102      	movs	r1, #2
    1ea0:	430b      	orrs	r3, r1
    1ea2:	66d3      	str	r3, [r2, #108]	; 0x6c
	hri_slcd_write_CSRCFG_DATA_bf(dev->hw, 0);
    1ea4:	682a      	ldr	r2, [r5, #0]
	tmp = ((Slcd *)hw)->CSRCFG.reg;
    1ea6:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
	tmp &= ~SLCD_CSRCFG_DATA_Msk;
    1ea8:	492f      	ldr	r1, [pc, #188]	; (1f68 <_slcd_sync_start_animation+0x14c>)
    1eaa:	400b      	ands	r3, r1
	((Slcd *)hw)->CSRCFG.reg = tmp;
    1eac:	66d3      	str	r3, [r2, #108]	; 0x6c
	for (i = 0; i < len; i++) {
    1eae:	2c00      	cmp	r4, #0
    1eb0:	d029      	beq.n	1f06 <_slcd_sync_start_animation+0xea>
    1eb2:	0030      	movs	r0, r6
    1eb4:	00a4      	lsls	r4, r4, #2
    1eb6:	1931      	adds	r1, r6, r4
    1eb8:	2400      	movs	r4, #0
		hri_slcd_set_CSRCFG_DATA_bf(dev->hw, (1 << ((SLCD_COMNUM(segs[i]) * 2) + (SLCD_SEGNUM(segs[i]) - 2))));
    1eba:	26ff      	movs	r6, #255	; 0xff
    1ebc:	2301      	movs	r3, #1
    1ebe:	469c      	mov	ip, r3
	((Slcd *)hw)->CSRCFG.reg |= SLCD_CSRCFG_DATA(mask);
    1ec0:	4b2a      	ldr	r3, [pc, #168]	; (1f6c <_slcd_sync_start_animation+0x150>)
    1ec2:	4698      	mov	r8, r3
    1ec4:	e002      	b.n	1ecc <_slcd_sync_start_animation+0xb0>
    1ec6:	3004      	adds	r0, #4
	for (i = 0; i < len; i++) {
    1ec8:	4288      	cmp	r0, r1
    1eca:	d01c      	beq.n	1f06 <_slcd_sync_start_animation+0xea>
		hri_slcd_set_CSRCFG_DATA_bf(dev->hw, (1 << ((SLCD_COMNUM(segs[i]) * 2) + (SLCD_SEGNUM(segs[i]) - 2))));
    1ecc:	682f      	ldr	r7, [r5, #0]
    1ece:	6802      	ldr	r2, [r0, #0]
    1ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1ed2:	4699      	mov	r9, r3
    1ed4:	0c13      	lsrs	r3, r2, #16
    1ed6:	4033      	ands	r3, r6
    1ed8:	005b      	lsls	r3, r3, #1
    1eda:	4032      	ands	r2, r6
    1edc:	3a02      	subs	r2, #2
    1ede:	189a      	adds	r2, r3, r2
    1ee0:	4663      	mov	r3, ip
    1ee2:	4093      	lsls	r3, r2
    1ee4:	021b      	lsls	r3, r3, #8
    1ee6:	4642      	mov	r2, r8
    1ee8:	4013      	ands	r3, r2
    1eea:	464a      	mov	r2, r9
    1eec:	4313      	orrs	r3, r2
    1eee:	66fb      	str	r3, [r7, #108]	; 0x6c
		if (((SLCD_COMNUM(segs[i]) * 2) + (SLCD_SEGNUM(segs[i]) - 2)) > csrlen) {
    1ef0:	6802      	ldr	r2, [r0, #0]
    1ef2:	0c13      	lsrs	r3, r2, #16
    1ef4:	4033      	ands	r3, r6
    1ef6:	005b      	lsls	r3, r3, #1
    1ef8:	4032      	ands	r2, r6
    1efa:	3a02      	subs	r2, #2
    1efc:	189b      	adds	r3, r3, r2
    1efe:	429c      	cmp	r4, r3
    1f00:	d2e1      	bcs.n	1ec6 <_slcd_sync_start_animation+0xaa>
    1f02:	001c      	movs	r4, r3
    1f04:	e7df      	b.n	1ec6 <_slcd_sync_start_animation+0xaa>
	hri_slcd_set_CSRCFG_SIZE_bf(dev->hw, csrlen + 1);
    1f06:	682a      	ldr	r2, [r5, #0]
	((Slcd *)hw)->CSRCFG.reg |= SLCD_CSRCFG_SIZE(mask);
    1f08:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
    1f0a:	3401      	adds	r4, #1
    1f0c:	0124      	lsls	r4, r4, #4
    1f0e:	23ff      	movs	r3, #255	; 0xff
    1f10:	401c      	ands	r4, r3
    1f12:	430c      	orrs	r4, r1
    1f14:	66d4      	str	r4, [r2, #108]	; 0x6c
	hri_slcd_set_BCFG_MODE_bit(dev->hw);
    1f16:	682a      	ldr	r2, [r5, #0]
	((Slcd *)hw)->BCFG.reg |= SLCD_BCFG_MODE;
    1f18:	6e93      	ldr	r3, [r2, #104]	; 0x68
    1f1a:	2101      	movs	r1, #1
    1f1c:	430b      	orrs	r3, r1
    1f1e:	6693      	str	r3, [r2, #104]	; 0x68
	hri_slcd_set_CTRLD_CSREN_bit(dev->hw);
    1f20:	682a      	ldr	r2, [r5, #0]
	((Slcd *)hw)->CTRLD.reg |= SLCD_CTRLD_CSREN;
    1f22:	7a13      	ldrb	r3, [r2, #8]
    1f24:	3103      	adds	r1, #3
    1f26:	430b      	orrs	r3, r1
    1f28:	7213      	strb	r3, [r2, #8]
	while (((Slcd *)hw)->SYNCBUSY.reg & reg) {
    1f2a:	3103      	adds	r1, #3
    1f2c:	6953      	ldr	r3, [r2, #20]
    1f2e:	4219      	tst	r1, r3
    1f30:	d1fc      	bne.n	1f2c <_slcd_sync_start_animation+0x110>
	hri_slcd_set_CTRLA_ENABLE_bit(dev->hw);
    1f32:	682a      	ldr	r2, [r5, #0]
	((Slcd *)hw)->CTRLA.reg |= SLCD_CTRLA_ENABLE;
    1f34:	6813      	ldr	r3, [r2, #0]
    1f36:	2102      	movs	r1, #2
    1f38:	430b      	orrs	r3, r1
    1f3a:	6013      	str	r3, [r2, #0]
	while (((Slcd *)hw)->SYNCBUSY.reg & reg) {
    1f3c:	3101      	adds	r1, #1
    1f3e:	6953      	ldr	r3, [r2, #20]
    1f40:	4219      	tst	r1, r3
    1f42:	d1fc      	bne.n	1f3e <_slcd_sync_start_animation+0x122>
	return ERR_NONE;
    1f44:	2000      	movs	r0, #0
}
    1f46:	bc0c      	pop	{r2, r3}
    1f48:	4690      	mov	r8, r2
    1f4a:	4699      	mov	r9, r3
    1f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
    1f4e:	200d      	movs	r0, #13
    1f50:	4240      	negs	r0, r0
    1f52:	e7f8      	b.n	1f46 <_slcd_sync_start_animation+0x12a>
			return ERR_INVALID_ARG;
    1f54:	200d      	movs	r0, #13
    1f56:	4240      	negs	r0, r0
    1f58:	e7f5      	b.n	1f46 <_slcd_sync_start_animation+0x12a>
		return ERR_INVALID_ARG;
    1f5a:	200d      	movs	r0, #13
    1f5c:	4240      	negs	r0, r0
    1f5e:	e7f2      	b.n	1f46 <_slcd_sync_start_animation+0x12a>
    1f60:	00000ef1 	.word	0x00000ef1
    1f64:	00001dad 	.word	0x00001dad
    1f68:	ff0000ff 	.word	0xff0000ff
    1f6c:	00ffff00 	.word	0x00ffff00

00001f70 <main>:
  slcd_sync_write_char(&SEGMENT_LCD_0, '1', 1);
  slcd_sync_write_string(&SEGMENT_LCD_0, (uint8_t *)"234", 3, 2);
  slcd_sync_write_string(&SEGMENT_LCD_0, (uint8_t *)"abcdefgh", 8, 5);
}

int main(void) {
    1f70:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f72:	b093      	sub	sp, #76	; 0x4c
  atmel_start_init();
    1f74:	4b50      	ldr	r3, [pc, #320]	; (20b8 <STACK_SIZE+0xb8>)
    1f76:	4798      	blx	r3
  adxl345_err_t err;
  adxl345_data_regs_t regs;
  adxl345_t adxl345;
  adxl345_dev_t adxl345_dev;

  err = adxl345_dev_init(&adxl345_dev, &ADXL345_0, ADXL345_I2C_PRIMARY_ADDRESS,
    1f78:	2380      	movs	r3, #128	; 0x80
    1f7a:	011b      	lsls	r3, r3, #4
    1f7c:	2253      	movs	r2, #83	; 0x53
    1f7e:	494f      	ldr	r1, [pc, #316]	; (20bc <STACK_SIZE+0xbc>)
    1f80:	a80c      	add	r0, sp, #48	; 0x30
    1f82:	4c4f      	ldr	r4, [pc, #316]	; (20c0 <STACK_SIZE+0xc0>)
    1f84:	47a0      	blx	r4
    1f86:	0001      	movs	r1, r0
                         I2C_M_SEVEN);
  printf("adxl345_dev_init() => %d\n", err);
    1f88:	484e      	ldr	r0, [pc, #312]	; (20c4 <STACK_SIZE+0xc4>)
    1f8a:	4e4f      	ldr	r6, [pc, #316]	; (20c8 <STACK_SIZE+0xc8>)
    1f8c:	47b0      	blx	r6
  err = adxl345_init(&adxl345, &adxl345_dev);
    1f8e:	a90c      	add	r1, sp, #48	; 0x30
    1f90:	a80f      	add	r0, sp, #60	; 0x3c
    1f92:	4b4e      	ldr	r3, [pc, #312]	; (20cc <STACK_SIZE+0xcc>)
    1f94:	4798      	blx	r3
    1f96:	0001      	movs	r1, r0
  printf("adxl345_init() => %d\n", err);
    1f98:	484d      	ldr	r0, [pc, #308]	; (20d0 <STACK_SIZE+0xd0>)
    1f9a:	47b0      	blx	r6

  /* Replace with your application code */
  slcd_sync_enable(&SEGMENT_LCD_0);
    1f9c:	4c4d      	ldr	r4, [pc, #308]	; (20d4 <STACK_SIZE+0xd4>)
    1f9e:	0020      	movs	r0, r4
    1fa0:	4b4d      	ldr	r3, [pc, #308]	; (20d8 <STACK_SIZE+0xd8>)
    1fa2:	4798      	blx	r3
  slcd_sync_seg_on(&SEGMENT_LCD_0, TSLCD_SEG_N0);
    1fa4:	21c0      	movs	r1, #192	; 0xc0
    1fa6:	0289      	lsls	r1, r1, #10
    1fa8:	0020      	movs	r0, r4
    1faa:	4d4c      	ldr	r5, [pc, #304]	; (20dc <STACK_SIZE+0xdc>)
    1fac:	47a8      	blx	r5
  slcd_sync_seg_on(&SEGMENT_LCD_0, TSLCD_SEG_N1);
    1fae:	2180      	movs	r1, #128	; 0x80
    1fb0:	02c9      	lsls	r1, r1, #11
    1fb2:	0020      	movs	r0, r4
    1fb4:	47a8      	blx	r5
  slcd_sync_seg_on(&SEGMENT_LCD_0, TSLCD_SEG_N2);
    1fb6:	21a0      	movs	r1, #160	; 0xa0
    1fb8:	02c9      	lsls	r1, r1, #11
    1fba:	0020      	movs	r0, r4
    1fbc:	47a8      	blx	r5
  slcd_sync_seg_on(&SEGMENT_LCD_0, TSLCD_SEG_N3);
    1fbe:	21c0      	movs	r1, #192	; 0xc0
    1fc0:	02c9      	lsls	r1, r1, #11
    1fc2:	0020      	movs	r0, r4
    1fc4:	47a8      	blx	r5
  slcd_sync_seg_on(&SEGMENT_LCD_0, TSLCD_SEG_N4);
    1fc6:	21e0      	movs	r1, #224	; 0xe0
    1fc8:	02c9      	lsls	r1, r1, #11
    1fca:	0020      	movs	r0, r4
    1fcc:	47a8      	blx	r5
  slcd_sync_seg_on(&SEGMENT_LCD_0, TSLCD_SEG_S0);
    1fce:	2115      	movs	r1, #21
    1fd0:	0020      	movs	r0, r4
    1fd2:	47a8      	blx	r5
  slcd_sync_seg_on(&SEGMENT_LCD_0, TSLCD_SEG_S1);
    1fd4:	2114      	movs	r1, #20
    1fd6:	0020      	movs	r0, r4
    1fd8:	47a8      	blx	r5
  slcd_sync_seg_on(&SEGMENT_LCD_0, TSLCD_SEG_S2);
    1fda:	2113      	movs	r1, #19
    1fdc:	0020      	movs	r0, r4
    1fde:	47a8      	blx	r5
  slcd_sync_seg_on(&SEGMENT_LCD_0, TSLCD_SEG_S3);
    1fe0:	2116      	movs	r1, #22
    1fe2:	0020      	movs	r0, r4
    1fe4:	47a8      	blx	r5
  slcd_sync_seg_on(&SEGMENT_LCD_0, TSLCD_SEG_S4);
    1fe6:	210e      	movs	r1, #14
    1fe8:	0020      	movs	r0, r4
    1fea:	47a8      	blx	r5
  slcd_sync_seg_on(&SEGMENT_LCD_0, TSLCD_SEG_S5);
    1fec:	210d      	movs	r1, #13
    1fee:	0020      	movs	r0, r4
    1ff0:	47a8      	blx	r5
  slcd_sync_seg_on(&SEGMENT_LCD_0, TSLCD_SEG_S6);
    1ff2:	210f      	movs	r1, #15
    1ff4:	0020      	movs	r0, r4
    1ff6:	47a8      	blx	r5
  slcd_sync_seg_on(&SEGMENT_LCD_0, TSLCD_SEG_S7);
    1ff8:	2117      	movs	r1, #23
    1ffa:	0020      	movs	r0, r4
    1ffc:	47a8      	blx	r5
  slcd_sync_seg_on(&SEGMENT_LCD_0, TSLCD_SEG_D01);
    1ffe:	2110      	movs	r1, #16
    2000:	0020      	movs	r0, r4
    2002:	47a8      	blx	r5
  slcd_sync_seg_on(&SEGMENT_LCD_0, TSLCD_SEG_D02);
    2004:	2111      	movs	r1, #17
    2006:	0020      	movs	r0, r4
    2008:	47a8      	blx	r5
  slcd_sync_seg_on(&SEGMENT_LCD_0, TSLCD_SEG_D03);
    200a:	2112      	movs	r1, #18
    200c:	0020      	movs	r0, r4
    200e:	47a8      	blx	r5
  slcd_sync_seg_blink(&SEGMENT_LCD_0, TSLCD_SEG_B0, 1000);
    2010:	25fa      	movs	r5, #250	; 0xfa
    2012:	00ad      	lsls	r5, r5, #2
    2014:	002a      	movs	r2, r5
    2016:	2180      	movs	r1, #128	; 0x80
    2018:	0249      	lsls	r1, r1, #9
    201a:	0020      	movs	r0, r4
    201c:	4f30      	ldr	r7, [pc, #192]	; (20e0 <STACK_SIZE+0xe0>)
    201e:	47b8      	blx	r7
  slcd_sync_seg_blink(&SEGMENT_LCD_0, TSLCD_SEG_B1, 1000);
    2020:	002a      	movs	r2, r5
    2022:	2180      	movs	r1, #128	; 0x80
    2024:	0289      	lsls	r1, r1, #10
    2026:	0020      	movs	r0, r4
    2028:	47b8      	blx	r7
  slcd_sync_seg_blink(&SEGMENT_LCD_0, TSLCD_SEG_B2, 1000);
    202a:	002a      	movs	r2, r5
    202c:	2100      	movs	r1, #0
    202e:	0020      	movs	r0, r4
    2030:	47b8      	blx	r7
  uint32_t segs[8] = {TSLCD_SEG_W0,  TSLCD_SEG_W1,  TSLCD_SEG_W2,
    2032:	ab04      	add	r3, sp, #16
    2034:	469c      	mov	ip, r3
    2036:	4b2b      	ldr	r3, [pc, #172]	; (20e4 <STACK_SIZE+0xe4>)
    2038:	4662      	mov	r2, ip
    203a:	cb83      	ldmia	r3!, {r0, r1, r7}
    203c:	c283      	stmia	r2!, {r0, r1, r7}
    203e:	cb83      	ldmia	r3!, {r0, r1, r7}
    2040:	c283      	stmia	r2!, {r0, r1, r7}
    2042:	cb03      	ldmia	r3!, {r0, r1}
    2044:	c203      	stmia	r2!, {r0, r1}
  slcd_sync_start_animation(&SEGMENT_LCD_0, segs, 8, 1000);
    2046:	002b      	movs	r3, r5
    2048:	2208      	movs	r2, #8
    204a:	4661      	mov	r1, ip
    204c:	0020      	movs	r0, r4
    204e:	4d26      	ldr	r5, [pc, #152]	; (20e8 <STACK_SIZE+0xe8>)
    2050:	47a8      	blx	r5
  slcd_sync_write_char(&SEGMENT_LCD_0, '0', 0);
    2052:	2200      	movs	r2, #0
    2054:	2130      	movs	r1, #48	; 0x30
    2056:	0020      	movs	r0, r4
    2058:	4d24      	ldr	r5, [pc, #144]	; (20ec <STACK_SIZE+0xec>)
    205a:	47a8      	blx	r5
  slcd_sync_write_char(&SEGMENT_LCD_0, '1', 1);
    205c:	2201      	movs	r2, #1
    205e:	2131      	movs	r1, #49	; 0x31
    2060:	0020      	movs	r0, r4
    2062:	47a8      	blx	r5
  slcd_sync_write_string(&SEGMENT_LCD_0, (uint8_t *)"234", 3, 2);
    2064:	2302      	movs	r3, #2
    2066:	2203      	movs	r2, #3
    2068:	4921      	ldr	r1, [pc, #132]	; (20f0 <STACK_SIZE+0xf0>)
    206a:	0020      	movs	r0, r4
    206c:	4d21      	ldr	r5, [pc, #132]	; (20f4 <STACK_SIZE+0xf4>)
    206e:	47a8      	blx	r5
  slcd_sync_write_string(&SEGMENT_LCD_0, (uint8_t *)"abcdefgh", 8, 5);
    2070:	2305      	movs	r3, #5
    2072:	2208      	movs	r2, #8
    2074:	4920      	ldr	r1, [pc, #128]	; (20f8 <STACK_SIZE+0xf8>)
    2076:	0020      	movs	r0, r4
    2078:	47a8      	blx	r5
  turn_on_segments();
  blink_segments();
  animation_segments();
  display_characters();

  err = adxl345_start(&adxl345);
    207a:	a80f      	add	r0, sp, #60	; 0x3c
    207c:	4b1f      	ldr	r3, [pc, #124]	; (20fc <STACK_SIZE+0xfc>)
    207e:	4798      	blx	r3
    2080:	0001      	movs	r1, r0
  printf("adxl345_start() => %d\n", err);
    2082:	481f      	ldr	r0, [pc, #124]	; (2100 <STACK_SIZE+0x100>)
    2084:	47b0      	blx	r6

  // Ensure that the measure bit is set...

  while (1) {
    err = adxl345_get_data_regs(&adxl345, &regs);
    2086:	4f1f      	ldr	r7, [pc, #124]	; (2104 <STACK_SIZE+0x104>)
    printf("regs: %d %02x%02x %02x%02x %02x%02x\n", err, regs.x1, regs.x0,
    2088:	4d1f      	ldr	r5, [pc, #124]	; (2108 <STACK_SIZE+0x108>)
    208a:	4e0f      	ldr	r6, [pc, #60]	; (20c8 <STACK_SIZE+0xc8>)
    err = adxl345_get_data_regs(&adxl345, &regs);
    208c:	ac10      	add	r4, sp, #64	; 0x40
    208e:	0021      	movs	r1, r4
    2090:	a80f      	add	r0, sp, #60	; 0x3c
    2092:	47b8      	blx	r7
    2094:	0001      	movs	r1, r0
    printf("regs: %d %02x%02x %02x%02x %02x%02x\n", err, regs.x1, regs.x0,
    2096:	7823      	ldrb	r3, [r4, #0]
    2098:	7862      	ldrb	r2, [r4, #1]
    209a:	7920      	ldrb	r0, [r4, #4]
    209c:	9003      	str	r0, [sp, #12]
    209e:	7960      	ldrb	r0, [r4, #5]
    20a0:	9002      	str	r0, [sp, #8]
    20a2:	78a0      	ldrb	r0, [r4, #2]
    20a4:	9001      	str	r0, [sp, #4]
    20a6:	78e0      	ldrb	r0, [r4, #3]
    20a8:	9000      	str	r0, [sp, #0]
    20aa:	0028      	movs	r0, r5
    20ac:	47b0      	blx	r6
           regs.y1, regs.y0, regs.z1, regs.z0);
    delay_ms(500);
    20ae:	20fa      	movs	r0, #250	; 0xfa
    20b0:	0040      	lsls	r0, r0, #1
    20b2:	4b16      	ldr	r3, [pc, #88]	; (210c <STACK_SIZE+0x10c>)
    20b4:	4798      	blx	r3
    20b6:	e7e9      	b.n	208c <STACK_SIZE+0x8c>
    20b8:	0000023d 	.word	0x0000023d
    20bc:	20000174 	.word	0x20000174
    20c0:	000001b1 	.word	0x000001b1
    20c4:	00003bac 	.word	0x00003bac
    20c8:	000028fd 	.word	0x000028fd
    20cc:	0000011d 	.word	0x0000011d
    20d0:	00003bc8 	.word	0x00003bc8
    20d4:	20000164 	.word	0x20000164
    20d8:	00000a1d 	.word	0x00000a1d
    20dc:	00000a45 	.word	0x00000a45
    20e0:	00000a71 	.word	0x00000a71
    20e4:	00003b8c 	.word	0x00003b8c
    20e8:	00000b4d 	.word	0x00000b4d
    20ec:	00000aa9 	.word	0x00000aa9
    20f0:	00003be0 	.word	0x00003be0
    20f4:	00000ad9 	.word	0x00000ad9
    20f8:	00003be4 	.word	0x00003be4
    20fc:	00000181 	.word	0x00000181
    2100:	00003bf0 	.word	0x00003bf0
    2104:	0000016d 	.word	0x0000016d
    2108:	00003c08 	.word	0x00003c08
    210c:	0000084d 	.word	0x0000084d

00002110 <touch_timer_handler>:
Input  : none
Output : none
Notes  :
============================================================================*/
void touch_timer_handler(void)
{
    2110:	b510      	push	{r4, lr}
	/* Count complete - Measure touch sensors */
	time_to_measure_touch_flag = 1u;
    2112:	2201      	movs	r2, #1
    2114:	4b02      	ldr	r3, [pc, #8]	; (2120 <touch_timer_handler+0x10>)
    2116:	705a      	strb	r2, [r3, #1]
	qtm_update_qtlib_timer(DEF_TOUCH_MEASUREMENT_PERIOD_MS);
    2118:	2014      	movs	r0, #20
    211a:	4b02      	ldr	r3, [pc, #8]	; (2124 <touch_timer_handler+0x14>)
    211c:	4798      	blx	r3
}
    211e:	bd10      	pop	{r4, pc}
    2120:	20000108 	.word	0x20000108
    2124:	000022d5 	.word	0x000022d5

00002128 <Timer_task_cb>:

void Timer_task_cb(const struct timer_task *const timer_task)
{
    2128:	b510      	push	{r4, lr}
	touch_timer_handler();
    212a:	4b01      	ldr	r3, [pc, #4]	; (2130 <Timer_task_cb+0x8>)
    212c:	4798      	blx	r3
}
    212e:	bd10      	pop	{r4, pc}
    2130:	00002111 	.word	0x00002111

00002134 <touch_timer_config>:

void touch_timer_config(void)
{
    2134:	b510      	push	{r4, lr}
	static struct timer_task Timer_task;
#if (KRONO_GESTURE_ENABLE == 1u)
	Timer_task.interval = 1;
#else
	Timer_task.interval = DEF_TOUCH_MEASUREMENT_PERIOD_MS;
    2136:	4908      	ldr	r1, [pc, #32]	; (2158 <touch_timer_config+0x24>)
    2138:	2314      	movs	r3, #20
    213a:	60cb      	str	r3, [r1, #12]
#endif
	Timer_task.cb   = Timer_task_cb;
    213c:	4b07      	ldr	r3, [pc, #28]	; (215c <touch_timer_config+0x28>)
    213e:	610b      	str	r3, [r1, #16]
	Timer_task.mode = TIMER_TASK_REPEAT;
    2140:	2301      	movs	r3, #1
    2142:	750b      	strb	r3, [r1, #20]

	timer_add_task(&Timer, &Timer_task);
    2144:	3104      	adds	r1, #4
    2146:	4c06      	ldr	r4, [pc, #24]	; (2160 <touch_timer_config+0x2c>)
    2148:	0020      	movs	r0, r4
    214a:	4b06      	ldr	r3, [pc, #24]	; (2164 <touch_timer_config+0x30>)
    214c:	4798      	blx	r3
	timer_start(&Timer);
    214e:	0020      	movs	r0, r4
    2150:	4b05      	ldr	r3, [pc, #20]	; (2168 <touch_timer_config+0x34>)
    2152:	4798      	blx	r3
}
    2154:	bd10      	pop	{r4, pc}
    2156:	46c0      	nop			; (mov r8, r8)
    2158:	20000108 	.word	0x20000108
    215c:	00002129 	.word	0x00002129
    2160:	20000148 	.word	0x20000148
    2164:	00000d11 	.word	0x00000d11
    2168:	00000cd5 	.word	0x00000cd5

0000216c <touch_init>:
{
    216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	touch_timer_config();
    216e:	4b12      	ldr	r3, [pc, #72]	; (21b8 <touch_init+0x4c>)
    2170:	4798      	blx	r3
	qtm_ptc_init_acquisition_module(&qtlib_acq_set1);
    2172:	4812      	ldr	r0, [pc, #72]	; (21bc <touch_init+0x50>)
    2174:	4b12      	ldr	r3, [pc, #72]	; (21c0 <touch_init+0x54>)
    2176:	4798      	blx	r3
	qtm_ptc_qtlib_assign_signal_memory(&touch_acq_signals_raw[0]);
    2178:	4812      	ldr	r0, [pc, #72]	; (21c4 <touch_init+0x58>)
    217a:	4b13      	ldr	r3, [pc, #76]	; (21c8 <touch_init+0x5c>)
    217c:	4798      	blx	r3
	for (sensor_nodes = 0u; sensor_nodes < DEF_NUM_CHANNELS; sensor_nodes++)
    217e:	2400      	movs	r4, #0
		qtm_enable_sensor_node(&qtlib_acq_set1, sensor_nodes);
    2180:	4d0e      	ldr	r5, [pc, #56]	; (21bc <touch_init+0x50>)
    2182:	4f12      	ldr	r7, [pc, #72]	; (21cc <touch_init+0x60>)
		qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_nodes);
    2184:	4e12      	ldr	r6, [pc, #72]	; (21d0 <touch_init+0x64>)
		qtm_enable_sensor_node(&qtlib_acq_set1, sensor_nodes);
    2186:	0021      	movs	r1, r4
    2188:	0028      	movs	r0, r5
    218a:	47b8      	blx	r7
		qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_nodes);
    218c:	0021      	movs	r1, r4
    218e:	0028      	movs	r0, r5
    2190:	47b0      	blx	r6
	for (sensor_nodes = 0u; sensor_nodes < DEF_NUM_CHANNELS; sensor_nodes++)
    2192:	3401      	adds	r4, #1
    2194:	b2a4      	uxth	r4, r4
    2196:	2c05      	cmp	r4, #5
    2198:	d1f5      	bne.n	2186 <touch_init+0x1a>
    219a:	4d0e      	ldr	r5, [pc, #56]	; (21d4 <touch_init+0x68>)
    219c:	2400      	movs	r4, #0
		qtm_init_sensor_key(&qtlib_key_set1, sensor_nodes, &ptc_qtlib_node_stat1[sensor_nodes]);
    219e:	4e07      	ldr	r6, [pc, #28]	; (21bc <touch_init+0x50>)
    21a0:	360c      	adds	r6, #12
    21a2:	4f0d      	ldr	r7, [pc, #52]	; (21d8 <touch_init+0x6c>)
    21a4:	b2e1      	uxtb	r1, r4
    21a6:	002a      	movs	r2, r5
    21a8:	0030      	movs	r0, r6
    21aa:	47b8      	blx	r7
	for (sensor_nodes = 0u; sensor_nodes < DEF_NUM_CHANNELS; sensor_nodes++) {
    21ac:	3401      	adds	r4, #1
    21ae:	b2a4      	uxth	r4, r4
    21b0:	3506      	adds	r5, #6
    21b2:	2c05      	cmp	r4, #5
    21b4:	d1f6      	bne.n	21a4 <touch_init+0x38>
}
    21b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21b8:	00002135 	.word	0x00002135
    21bc:	20000000 	.word	0x20000000
    21c0:	00002565 	.word	0x00002565
    21c4:	200001bc 	.word	0x200001bc
    21c8:	0000262d 	.word	0x0000262d
    21cc:	00002641 	.word	0x00002641
    21d0:	00002661 	.word	0x00002661
    21d4:	2000019c 	.word	0x2000019c
    21d8:	000022e5 	.word	0x000022e5

000021dc <PTC_Handler>:
Input  : none
Output : none
Notes  : none
============================================================================*/
void PTC_Handler(void)
{
    21dc:	b510      	push	{r4, lr}
	qtm_ptc_clear_interrupt();
    21de:	4b02      	ldr	r3, [pc, #8]	; (21e8 <PTC_Handler+0xc>)
    21e0:	4798      	blx	r3
	qtm_saml22_ptc_handler_eoc();
    21e2:	4b02      	ldr	r3, [pc, #8]	; (21ec <PTC_Handler+0x10>)
    21e4:	4798      	blx	r3
}
    21e6:	bd10      	pop	{r4, pc}
    21e8:	000026b1 	.word	0x000026b1
    21ec:	000026d5 	.word	0x000026d5

000021f0 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    21f0:	b510      	push	{r4, lr}
    21f2:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    21f4:	2800      	cmp	r0, #0
    21f6:	d109      	bne.n	220c <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    21f8:	0011      	movs	r1, r2
    21fa:	0018      	movs	r0, r3
    21fc:	4b05      	ldr	r3, [pc, #20]	; (2214 <_read+0x24>)
    21fe:	4798      	blx	r3
    2200:	2800      	cmp	r0, #0
    2202:	db00      	blt.n	2206 <_read+0x16>
	if (n < 0) {
		return -1;
	}

	return n;
}
    2204:	bd10      	pop	{r4, pc}
    2206:	2001      	movs	r0, #1
    2208:	4240      	negs	r0, r0
    220a:	e7fb      	b.n	2204 <_read+0x14>
		return -1;
    220c:	2001      	movs	r0, #1
    220e:	4240      	negs	r0, r0
    2210:	e7f8      	b.n	2204 <_read+0x14>
    2212:	46c0      	nop			; (mov r8, r8)
    2214:	0000226d 	.word	0x0000226d

00002218 <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    2218:	b510      	push	{r4, lr}
    221a:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    221c:	3801      	subs	r0, #1
    221e:	2802      	cmp	r0, #2
    2220:	d809      	bhi.n	2236 <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    2222:	0011      	movs	r1, r2
    2224:	0018      	movs	r0, r3
    2226:	4b05      	ldr	r3, [pc, #20]	; (223c <_write+0x24>)
    2228:	4798      	blx	r3
    222a:	2800      	cmp	r0, #0
    222c:	db00      	blt.n	2230 <_write+0x18>
	if (n < 0) {
		return -1;
	}

	return n;
}
    222e:	bd10      	pop	{r4, pc}
    2230:	2001      	movs	r0, #1
    2232:	4240      	negs	r0, r0
    2234:	e7fb      	b.n	222e <_write+0x16>
		return -1;
    2236:	2001      	movs	r0, #1
    2238:	4240      	negs	r0, r0
    223a:	e7f8      	b.n	222e <_write+0x16>
    223c:	00002291 	.word	0x00002291

00002240 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    2240:	b570      	push	{r4, r5, r6, lr}
    2242:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    2244:	4d06      	ldr	r5, [pc, #24]	; (2260 <stdio_io_init+0x20>)
    2246:	682b      	ldr	r3, [r5, #0]
    2248:	6898      	ldr	r0, [r3, #8]
    224a:	2100      	movs	r1, #0
    224c:	4c05      	ldr	r4, [pc, #20]	; (2264 <stdio_io_init+0x24>)
    224e:	47a0      	blx	r4
	setbuf(stdin, NULL);
    2250:	682b      	ldr	r3, [r5, #0]
    2252:	6858      	ldr	r0, [r3, #4]
    2254:	2100      	movs	r1, #0
    2256:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    2258:	4b03      	ldr	r3, [pc, #12]	; (2268 <stdio_io_init+0x28>)
    225a:	601e      	str	r6, [r3, #0]
}
    225c:	bd70      	pop	{r4, r5, r6, pc}
    225e:	46c0      	nop			; (mov r8, r8)
    2260:	2000007c 	.word	0x2000007c
    2264:	00002931 	.word	0x00002931
    2268:	20000120 	.word	0x20000120

0000226c <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    226c:	b510      	push	{r4, lr}
    226e:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    2270:	4b05      	ldr	r3, [pc, #20]	; (2288 <stdio_io_read+0x1c>)
    2272:	6818      	ldr	r0, [r3, #0]
    2274:	2800      	cmp	r0, #0
    2276:	d004      	beq.n	2282 <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    2278:	b28a      	uxth	r2, r1
    227a:	0021      	movs	r1, r4
    227c:	4b03      	ldr	r3, [pc, #12]	; (228c <stdio_io_read+0x20>)
    227e:	4798      	blx	r3
}
    2280:	bd10      	pop	{r4, pc}
		return 0;
    2282:	2000      	movs	r0, #0
    2284:	e7fc      	b.n	2280 <stdio_io_read+0x14>
    2286:	46c0      	nop			; (mov r8, r8)
    2288:	20000120 	.word	0x20000120
    228c:	000009b5 	.word	0x000009b5

00002290 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    2290:	b510      	push	{r4, lr}
    2292:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    2294:	4b05      	ldr	r3, [pc, #20]	; (22ac <stdio_io_write+0x1c>)
    2296:	6818      	ldr	r0, [r3, #0]
    2298:	2800      	cmp	r0, #0
    229a:	d004      	beq.n	22a6 <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    229c:	b28a      	uxth	r2, r1
    229e:	0021      	movs	r1, r4
    22a0:	4b03      	ldr	r3, [pc, #12]	; (22b0 <stdio_io_write+0x20>)
    22a2:	4798      	blx	r3
}
    22a4:	bd10      	pop	{r4, pc}
		return 0;
    22a6:	2000      	movs	r0, #0
    22a8:	e7fc      	b.n	22a4 <stdio_io_write+0x14>
    22aa:	46c0      	nop			; (mov r8, r8)
    22ac:	20000120 	.word	0x20000120
    22b0:	00000981 	.word	0x00000981

000022b4 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    22b4:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_0);
    22b6:	4c04      	ldr	r4, [pc, #16]	; (22c8 <stdio_redirect_init+0x14>)
    22b8:	0020      	movs	r0, r4
    22ba:	4b04      	ldr	r3, [pc, #16]	; (22cc <stdio_redirect_init+0x18>)
    22bc:	4798      	blx	r3
	stdio_io_init(&EDBG_0.io);
    22be:	0020      	movs	r0, r4
    22c0:	4b03      	ldr	r3, [pc, #12]	; (22d0 <stdio_redirect_init+0x1c>)
    22c2:	4798      	blx	r3
}
    22c4:	bd10      	pop	{r4, pc}
    22c6:	46c0      	nop			; (mov r8, r8)
    22c8:	20000168 	.word	0x20000168
    22cc:	00000eed 	.word	0x00000eed
    22d0:	00002241 	.word	0x00002241

000022d4 <qtm_update_qtlib_timer>:
    22d4:	4a02      	ldr	r2, [pc, #8]	; (22e0 <qtm_update_qtlib_timer+0xc>)
    22d6:	8813      	ldrh	r3, [r2, #0]
    22d8:	18c0      	adds	r0, r0, r3
    22da:	8010      	strh	r0, [r2, #0]
    22dc:	4770      	bx	lr
    22de:	46c0      	nop			; (mov r8, r8)
    22e0:	20000124 	.word	0x20000124

000022e4 <qtm_init_sensor_key>:
    22e4:	b510      	push	{r4, lr}
    22e6:	230b      	movs	r3, #11
    22e8:	2800      	cmp	r0, #0
    22ea:	d00b      	beq.n	2304 <qtm_init_sensor_key+0x20>
    22ec:	2a00      	cmp	r2, #0
    22ee:	d009      	beq.n	2304 <qtm_init_sensor_key+0x20>
    22f0:	3301      	adds	r3, #1
    22f2:	000c      	movs	r4, r1
    22f4:	435c      	muls	r4, r3
    22f6:	6881      	ldr	r1, [r0, #8]
    22f8:	3b0b      	subs	r3, #11
    22fa:	550b      	strb	r3, [r1, r4]
    22fc:	6883      	ldr	r3, [r0, #8]
    22fe:	1919      	adds	r1, r3, r4
    2300:	2300      	movs	r3, #0
    2302:	604a      	str	r2, [r1, #4]
    2304:	0018      	movs	r0, r3
    2306:	bc10      	pop	{r4}
    2308:	bc02      	pop	{r1}
    230a:	4708      	bx	r1

0000230c <pin_mode_analog>:
    230c:	b530      	push	{r4, r5, lr}
    230e:	2401      	movs	r4, #1
    2310:	084b      	lsrs	r3, r1, #1
    2312:	01c0      	lsls	r0, r0, #7
    2314:	4a0b      	ldr	r2, [pc, #44]	; (2344 <pin_mode_analog+0x38>)
    2316:	181b      	adds	r3, r3, r0
    2318:	189b      	adds	r3, r3, r2
    231a:	4221      	tst	r1, r4
    231c:	d004      	beq.n	2328 <pin_mode_analog+0x1c>
    231e:	220f      	movs	r2, #15
    2320:	781c      	ldrb	r4, [r3, #0]
    2322:	4022      	ands	r2, r4
    2324:	2410      	movs	r4, #16
    2326:	e002      	b.n	232e <pin_mode_analog+0x22>
    2328:	250f      	movs	r5, #15
    232a:	781a      	ldrb	r2, [r3, #0]
    232c:	43aa      	bics	r2, r5
    232e:	4322      	orrs	r2, r4
    2330:	701a      	strb	r2, [r3, #0]
    2332:	2201      	movs	r2, #1
    2334:	4b04      	ldr	r3, [pc, #16]	; (2348 <pin_mode_analog+0x3c>)
    2336:	1808      	adds	r0, r1, r0
    2338:	18c0      	adds	r0, r0, r3
    233a:	7803      	ldrb	r3, [r0, #0]
    233c:	4313      	orrs	r3, r2
    233e:	7003      	strb	r3, [r0, #0]
    2340:	bd30      	pop	{r4, r5, pc}
    2342:	46c0      	nop			; (mov r8, r8)
    2344:	41006030 	.word	0x41006030
    2348:	41006040 	.word	0x41006040

0000234c <sync_config>:
    234c:	4a02      	ldr	r2, [pc, #8]	; (2358 <sync_config+0xc>)
    234e:	8993      	ldrh	r3, [r2, #12]
    2350:	2b00      	cmp	r3, #0
    2352:	d1fc      	bne.n	234e <sync_config+0x2>
    2354:	4770      	bx	lr
    2356:	46c0      	nop			; (mov r8, r8)
    2358:	42003800 	.word	0x42003800

0000235c <select_next_channel_to_measure>:
    235c:	b5f0      	push	{r4, r5, r6, r7, lr}
    235e:	2406      	movs	r4, #6
    2360:	2501      	movs	r5, #1
    2362:	490c      	ldr	r1, [pc, #48]	; (2394 <select_next_channel_to_measure+0x38>)
    2364:	4a0c      	ldr	r2, [pc, #48]	; (2398 <select_next_channel_to_measure+0x3c>)
    2366:	6809      	ldr	r1, [r1, #0]
    2368:	8813      	ldrh	r3, [r2, #0]
    236a:	6808      	ldr	r0, [r1, #0]
    236c:	8800      	ldrh	r0, [r0, #0]
    236e:	4283      	cmp	r3, r0
    2370:	d20b      	bcs.n	238a <select_next_channel_to_measure+0x2e>
    2372:	0026      	movs	r6, r4
    2374:	435e      	muls	r6, r3
    2376:	688f      	ldr	r7, [r1, #8]
    2378:	5df6      	ldrb	r6, [r6, r7]
    237a:	422e      	tst	r6, r5
    237c:	d102      	bne.n	2384 <select_next_channel_to_measure+0x28>
    237e:	3301      	adds	r3, #1
    2380:	b29b      	uxth	r3, r3
    2382:	e7f4      	b.n	236e <select_next_channel_to_measure+0x12>
    2384:	8013      	strh	r3, [r2, #0]
    2386:	2000      	movs	r0, #0
    2388:	e002      	b.n	2390 <select_next_channel_to_measure+0x34>
    238a:	2300      	movs	r3, #0
    238c:	2001      	movs	r0, #1
    238e:	8013      	strh	r3, [r2, #0]
    2390:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2392:	46c0      	nop			; (mov r8, r8)
    2394:	20000208 	.word	0x20000208
    2398:	20000128 	.word	0x20000128

0000239c <qtm_measure_node>:
    239c:	b5f0      	push	{r4, r5, r6, r7, lr}
    239e:	4f67      	ldr	r7, [pc, #412]	; (253c <qtm_measure_node+0x1a0>)
    23a0:	b089      	sub	sp, #36	; 0x24
    23a2:	9003      	str	r0, [sp, #12]
    23a4:	47b8      	blx	r7
    23a6:	2202      	movs	r2, #2
    23a8:	250c      	movs	r5, #12
    23aa:	4c65      	ldr	r4, [pc, #404]	; (2540 <qtm_measure_node+0x1a4>)
    23ac:	8823      	ldrh	r3, [r4, #0]
    23ae:	4393      	bics	r3, r2
    23b0:	8023      	strh	r3, [r4, #0]
    23b2:	47b8      	blx	r7
    23b4:	9b03      	ldr	r3, [sp, #12]
    23b6:	4e63      	ldr	r6, [pc, #396]	; (2544 <qtm_measure_node+0x1a8>)
    23b8:	435d      	muls	r5, r3
    23ba:	6833      	ldr	r3, [r6, #0]
    23bc:	6c61      	ldr	r1, [r4, #68]	; 0x44
    23be:	685b      	ldr	r3, [r3, #4]
    23c0:	195b      	adds	r3, r3, r5
    23c2:	685b      	ldr	r3, [r3, #4]
    23c4:	021b      	lsls	r3, r3, #8
    23c6:	0a1a      	lsrs	r2, r3, #8
    23c8:	0e0b      	lsrs	r3, r1, #24
    23ca:	061b      	lsls	r3, r3, #24
    23cc:	4313      	orrs	r3, r2
    23ce:	6463      	str	r3, [r4, #68]	; 0x44
    23d0:	47b8      	blx	r7
    23d2:	6833      	ldr	r3, [r6, #0]
    23d4:	685b      	ldr	r3, [r3, #4]
    23d6:	595b      	ldr	r3, [r3, r5]
    23d8:	63e3      	str	r3, [r4, #60]	; 0x3c
    23da:	47b8      	blx	r7
    23dc:	2306      	movs	r3, #6
    23de:	9a03      	ldr	r2, [sp, #12]
    23e0:	6831      	ldr	r1, [r6, #0]
    23e2:	4353      	muls	r3, r2
    23e4:	688a      	ldr	r2, [r1, #8]
    23e6:	18d2      	adds	r2, r2, r3
    23e8:	8892      	ldrh	r2, [r2, #4]
    23ea:	64a2      	str	r2, [r4, #72]	; 0x48
    23ec:	9703      	str	r7, [sp, #12]
    23ee:	2702      	movs	r7, #2
    23f0:	688a      	ldr	r2, [r1, #8]
    23f2:	18d2      	adds	r2, r2, r3
    23f4:	7810      	ldrb	r0, [r2, #0]
    23f6:	4238      	tst	r0, r7
    23f8:	d001      	beq.n	23fe <qtm_measure_node+0x62>
    23fa:	2005      	movs	r0, #5
    23fc:	7010      	strb	r0, [r2, #0]
    23fe:	688a      	ldr	r2, [r1, #8]
    2400:	5cd7      	ldrb	r7, [r2, r3]
    2402:	9b03      	ldr	r3, [sp, #12]
    2404:	06ff      	lsls	r7, r7, #27
    2406:	0f7f      	lsrs	r7, r7, #29
    2408:	4798      	blx	r3
    240a:	2f00      	cmp	r7, #0
    240c:	d10a      	bne.n	2424 <qtm_measure_node+0x88>
    240e:	6833      	ldr	r3, [r6, #0]
    2410:	494d      	ldr	r1, [pc, #308]	; (2548 <qtm_measure_node+0x1ac>)
    2412:	685b      	ldr	r3, [r3, #4]
    2414:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    2416:	195b      	adds	r3, r3, r5
    2418:	7a9b      	ldrb	r3, [r3, #10]
    241a:	091b      	lsrs	r3, r3, #4
    241c:	18cb      	adds	r3, r1, r3
    241e:	7a1b      	ldrb	r3, [r3, #8]
    2420:	041b      	lsls	r3, r3, #16
    2422:	e002      	b.n	242a <qtm_measure_node+0x8e>
    2424:	22fc      	movs	r2, #252	; 0xfc
    2426:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2428:	0392      	lsls	r2, r2, #14
    242a:	4313      	orrs	r3, r2
    242c:	64a3      	str	r3, [r4, #72]	; 0x48
    242e:	9b03      	ldr	r3, [sp, #12]
    2430:	4798      	blx	r3
    2432:	6833      	ldr	r3, [r6, #0]
    2434:	6921      	ldr	r1, [r4, #16]
    2436:	685b      	ldr	r3, [r3, #4]
    2438:	4f41      	ldr	r7, [pc, #260]	; (2540 <qtm_measure_node+0x1a4>)
    243a:	195b      	adds	r3, r3, r5
    243c:	7a5a      	ldrb	r2, [r3, #9]
    243e:	2307      	movs	r3, #7
    2440:	0912      	lsrs	r2, r2, #4
    2442:	401a      	ands	r2, r3
    2444:	4b41      	ldr	r3, [pc, #260]	; (254c <qtm_measure_node+0x1b0>)
    2446:	0512      	lsls	r2, r2, #20
    2448:	400b      	ands	r3, r1
    244a:	4313      	orrs	r3, r2
    244c:	6123      	str	r3, [r4, #16]
    244e:	9b03      	ldr	r3, [sp, #12]
    2450:	4798      	blx	r3
    2452:	2203      	movs	r2, #3
    2454:	6833      	ldr	r3, [r6, #0]
    2456:	8821      	ldrh	r1, [r4, #0]
    2458:	685b      	ldr	r3, [r3, #4]
    245a:	195b      	adds	r3, r3, r5
    245c:	7a5b      	ldrb	r3, [r3, #9]
    245e:	401a      	ands	r2, r3
    2460:	4b3b      	ldr	r3, [pc, #236]	; (2550 <qtm_measure_node+0x1b4>)
    2462:	0212      	lsls	r2, r2, #8
    2464:	400b      	ands	r3, r1
    2466:	4313      	orrs	r3, r2
    2468:	8023      	strh	r3, [r4, #0]
    246a:	9b03      	ldr	r3, [sp, #12]
    246c:	4798      	blx	r3
    246e:	2107      	movs	r1, #7
    2470:	6833      	ldr	r3, [r6, #0]
    2472:	685b      	ldr	r3, [r3, #4]
    2474:	195b      	adds	r3, r3, r5
    2476:	7ada      	ldrb	r2, [r3, #11]
    2478:	6923      	ldr	r3, [r4, #16]
    247a:	400a      	ands	r2, r1
    247c:	4935      	ldr	r1, [pc, #212]	; (2554 <qtm_measure_node+0x1b8>)
    247e:	0412      	lsls	r2, r2, #16
    2480:	400b      	ands	r3, r1
    2482:	4313      	orrs	r3, r2
    2484:	6123      	str	r3, [r4, #16]
    2486:	9b03      	ldr	r3, [sp, #12]
    2488:	4798      	blx	r3
    248a:	6833      	ldr	r3, [r6, #0]
    248c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    248e:	685b      	ldr	r3, [r3, #4]
    2490:	195d      	adds	r5, r3, r5
    2492:	7a2b      	ldrb	r3, [r5, #8]
    2494:	2502      	movs	r5, #2
    2496:	061a      	lsls	r2, r3, #24
    2498:	020b      	lsls	r3, r1, #8
    249a:	0a1b      	lsrs	r3, r3, #8
    249c:	4313      	orrs	r3, r2
    249e:	64a3      	str	r3, [r4, #72]	; 0x48
    24a0:	9b03      	ldr	r3, [sp, #12]
    24a2:	4798      	blx	r3
    24a4:	8823      	ldrh	r3, [r4, #0]
    24a6:	432b      	orrs	r3, r5
    24a8:	8023      	strh	r3, [r4, #0]
    24aa:	4b2b      	ldr	r3, [pc, #172]	; (2558 <qtm_measure_node+0x1bc>)
    24ac:	685e      	ldr	r6, [r3, #4]
    24ae:	2e00      	cmp	r6, #0
    24b0:	d03b      	beq.n	252a <qtm_measure_node+0x18e>
    24b2:	2401      	movs	r4, #1
    24b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    24b6:	0e1b      	lsrs	r3, r3, #24
    24b8:	9304      	str	r3, [sp, #16]
    24ba:	693b      	ldr	r3, [r7, #16]
    24bc:	051b      	lsls	r3, r3, #20
    24be:	0f1b      	lsrs	r3, r3, #28
    24c0:	9305      	str	r3, [sp, #20]
    24c2:	883b      	ldrh	r3, [r7, #0]
    24c4:	059b      	lsls	r3, r3, #22
    24c6:	0f9b      	lsrs	r3, r3, #30
    24c8:	9306      	str	r3, [sp, #24]
    24ca:	9b03      	ldr	r3, [sp, #12]
    24cc:	4798      	blx	r3
    24ce:	883b      	ldrh	r3, [r7, #0]
    24d0:	43ab      	bics	r3, r5
    24d2:	803b      	strh	r3, [r7, #0]
    24d4:	9b03      	ldr	r3, [sp, #12]
    24d6:	4798      	blx	r3
    24d8:	793b      	ldrb	r3, [r7, #4]
    24da:	4323      	orrs	r3, r4
    24dc:	713b      	strb	r3, [r7, #4]
    24de:	9b03      	ldr	r3, [sp, #12]
    24e0:	4798      	blx	r3
    24e2:	793b      	ldrb	r3, [r7, #4]
    24e4:	432b      	orrs	r3, r5
    24e6:	713b      	strb	r3, [r7, #4]
    24e8:	9b03      	ldr	r3, [sp, #12]
    24ea:	4798      	blx	r3
    24ec:	2108      	movs	r1, #8
    24ee:	693b      	ldr	r3, [r7, #16]
    24f0:	9307      	str	r3, [sp, #28]
    24f2:	4b1a      	ldr	r3, [pc, #104]	; (255c <qtm_measure_node+0x1c0>)
    24f4:	681a      	ldr	r2, [r3, #0]
    24f6:	7813      	ldrb	r3, [r2, #0]
    24f8:	430b      	orrs	r3, r1
    24fa:	7013      	strb	r3, [r2, #0]
    24fc:	9b03      	ldr	r3, [sp, #12]
    24fe:	4798      	blx	r3
    2500:	693b      	ldr	r3, [r7, #16]
    2502:	4a14      	ldr	r2, [pc, #80]	; (2554 <qtm_measure_node+0x1b8>)
    2504:	4013      	ands	r3, r2
    2506:	613b      	str	r3, [r7, #16]
    2508:	9b07      	ldr	r3, [sp, #28]
    250a:	9a06      	ldr	r2, [sp, #24]
    250c:	9905      	ldr	r1, [sp, #20]
    250e:	9804      	ldr	r0, [sp, #16]
    2510:	9300      	str	r3, [sp, #0]
    2512:	4b13      	ldr	r3, [pc, #76]	; (2560 <qtm_measure_node+0x1c4>)
    2514:	47b0      	blx	r6
    2516:	9b03      	ldr	r3, [sp, #12]
    2518:	4798      	blx	r3
    251a:	883b      	ldrh	r3, [r7, #0]
    251c:	431d      	orrs	r5, r3
    251e:	803d      	strh	r5, [r7, #0]
    2520:	9b03      	ldr	r3, [sp, #12]
    2522:	4798      	blx	r3
    2524:	7f3b      	ldrb	r3, [r7, #28]
    2526:	4323      	orrs	r3, r4
    2528:	e004      	b.n	2534 <qtm_measure_node+0x198>
    252a:	9b03      	ldr	r3, [sp, #12]
    252c:	4798      	blx	r3
    252e:	2201      	movs	r2, #1
    2530:	7f3b      	ldrb	r3, [r7, #28]
    2532:	4313      	orrs	r3, r2
    2534:	773b      	strb	r3, [r7, #28]
    2536:	b009      	add	sp, #36	; 0x24
    2538:	bdf0      	pop	{r4, r5, r6, r7, pc}
    253a:	46c0      	nop			; (mov r8, r8)
    253c:	0000234d 	.word	0x0000234d
    2540:	42003800 	.word	0x42003800
    2544:	20000208 	.word	0x20000208
    2548:	00003c30 	.word	0x00003c30
    254c:	ff8fffff 	.word	0xff8fffff
    2550:	fffffcff 	.word	0xfffffcff
    2554:	fff8ffff 	.word	0xfff8ffff
    2558:	20000128 	.word	0x20000128
    255c:	20000204 	.word	0x20000204
    2560:	42003810 	.word	0x42003810

00002564 <qtm_ptc_init_acquisition_module>:
    2564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2566:	0001      	movs	r1, r0
    2568:	200b      	movs	r0, #11
    256a:	2900      	cmp	r1, #0
    256c:	d053      	beq.n	2616 <qtm_ptc_init_acquisition_module+0xb2>
    256e:	680b      	ldr	r3, [r1, #0]
    2570:	240c      	movs	r4, #12
    2572:	8818      	ldrh	r0, [r3, #0]
    2574:	2300      	movs	r3, #0
    2576:	001d      	movs	r5, r3
    2578:	001f      	movs	r7, r3
    257a:	b29a      	uxth	r2, r3
    257c:	4290      	cmp	r0, r2
    257e:	d909      	bls.n	2594 <qtm_ptc_init_acquisition_module+0x30>
    2580:	0022      	movs	r2, r4
    2582:	435a      	muls	r2, r3
    2584:	684e      	ldr	r6, [r1, #4]
    2586:	3301      	adds	r3, #1
    2588:	18b2      	adds	r2, r6, r2
    258a:	6816      	ldr	r6, [r2, #0]
    258c:	6852      	ldr	r2, [r2, #4]
    258e:	4337      	orrs	r7, r6
    2590:	4315      	orrs	r5, r2
    2592:	e7f2      	b.n	257a <qtm_ptc_init_acquisition_module+0x16>
    2594:	2002      	movs	r0, #2
    2596:	2d00      	cmp	r5, #0
    2598:	d03d      	beq.n	2616 <qtm_ptc_init_acquisition_module+0xb2>
    259a:	2400      	movs	r4, #0
    259c:	2601      	movs	r6, #1
    259e:	043b      	lsls	r3, r7, #16
    25a0:	432b      	orrs	r3, r5
    25a2:	9301      	str	r3, [sp, #4]
    25a4:	9b01      	ldr	r3, [sp, #4]
    25a6:	40e3      	lsrs	r3, r4
    25a8:	4233      	tst	r3, r6
    25aa:	d010      	beq.n	25ce <qtm_ptc_init_acquisition_module+0x6a>
    25ac:	4b1a      	ldr	r3, [pc, #104]	; (2618 <qtm_ptc_init_acquisition_module+0xb4>)
    25ae:	4a1b      	ldr	r2, [pc, #108]	; (261c <qtm_ptc_init_acquisition_module+0xb8>)
    25b0:	330e      	adds	r3, #14
    25b2:	5ce3      	ldrb	r3, [r4, r3]
    25b4:	2000      	movs	r0, #0
    25b6:	1e19      	subs	r1, r3, #0
    25b8:	291f      	cmp	r1, #31
    25ba:	d907      	bls.n	25cc <qtm_ptc_init_acquisition_module+0x68>
    25bc:	3920      	subs	r1, #32
    25be:	b2c9      	uxtb	r1, r1
    25c0:	2001      	movs	r0, #1
    25c2:	291f      	cmp	r1, #31
    25c4:	d902      	bls.n	25cc <qtm_ptc_init_acquisition_module+0x68>
    25c6:	2002      	movs	r0, #2
    25c8:	3b40      	subs	r3, #64	; 0x40
    25ca:	b2d9      	uxtb	r1, r3
    25cc:	4790      	blx	r2
    25ce:	3401      	adds	r4, #1
    25d0:	2c20      	cmp	r4, #32
    25d2:	d1e7      	bne.n	25a4 <qtm_ptc_init_acquisition_module+0x40>
    25d4:	4e12      	ldr	r6, [pc, #72]	; (2620 <qtm_ptc_init_acquisition_module+0xbc>)
    25d6:	47b0      	blx	r6
    25d8:	2300      	movs	r3, #0
    25da:	4c12      	ldr	r4, [pc, #72]	; (2624 <qtm_ptc_init_acquisition_module+0xc0>)
    25dc:	8023      	strh	r3, [r4, #0]
    25de:	4b12      	ldr	r3, [pc, #72]	; (2628 <qtm_ptc_init_acquisition_module+0xc4>)
    25e0:	7a1b      	ldrb	r3, [r3, #8]
    25e2:	9301      	str	r3, [sp, #4]
    25e4:	2b00      	cmp	r3, #0
    25e6:	d10d      	bne.n	2604 <qtm_ptc_init_acquisition_module+0xa0>
    25e8:	47b0      	blx	r6
    25ea:	9b01      	ldr	r3, [sp, #4]
    25ec:	61a3      	str	r3, [r4, #24]
    25ee:	69a3      	ldr	r3, [r4, #24]
    25f0:	431f      	orrs	r7, r3
    25f2:	61a7      	str	r7, [r4, #24]
    25f4:	47b0      	blx	r6
    25f6:	69a3      	ldr	r3, [r4, #24]
    25f8:	4a0b      	ldr	r2, [pc, #44]	; (2628 <qtm_ptc_init_acquisition_module+0xc4>)
    25fa:	431d      	orrs	r5, r3
    25fc:	2301      	movs	r3, #1
    25fe:	61a5      	str	r5, [r4, #24]
    2600:	7213      	strb	r3, [r2, #8]
    2602:	e007      	b.n	2614 <qtm_ptc_init_acquisition_module+0xb0>
    2604:	47b0      	blx	r6
    2606:	69a3      	ldr	r3, [r4, #24]
    2608:	431f      	orrs	r7, r3
    260a:	61a7      	str	r7, [r4, #24]
    260c:	47b0      	blx	r6
    260e:	69a3      	ldr	r3, [r4, #24]
    2610:	431d      	orrs	r5, r3
    2612:	61a5      	str	r5, [r4, #24]
    2614:	2000      	movs	r0, #0
    2616:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2618:	00003c30 	.word	0x00003c30
    261c:	0000230d 	.word	0x0000230d
    2620:	0000234d 	.word	0x0000234d
    2624:	42003800 	.word	0x42003800
    2628:	20000128 	.word	0x20000128

0000262c <qtm_ptc_qtlib_assign_signal_memory>:
    262c:	230b      	movs	r3, #11
    262e:	2800      	cmp	r0, #0
    2630:	d002      	beq.n	2638 <qtm_ptc_qtlib_assign_signal_memory+0xc>
    2632:	4b02      	ldr	r3, [pc, #8]	; (263c <qtm_ptc_qtlib_assign_signal_memory+0x10>)
    2634:	6018      	str	r0, [r3, #0]
    2636:	2300      	movs	r3, #0
    2638:	0018      	movs	r0, r3
    263a:	4770      	bx	lr
    263c:	2000020c 	.word	0x2000020c

00002640 <qtm_enable_sensor_node>:
    2640:	230b      	movs	r3, #11
    2642:	2800      	cmp	r0, #0
    2644:	d00a      	beq.n	265c <qtm_enable_sensor_node+0x1c>
    2646:	6803      	ldr	r3, [r0, #0]
    2648:	881a      	ldrh	r2, [r3, #0]
    264a:	2302      	movs	r3, #2
    264c:	428a      	cmp	r2, r1
    264e:	d305      	bcc.n	265c <qtm_enable_sensor_node+0x1c>
    2650:	3304      	adds	r3, #4
    2652:	4359      	muls	r1, r3
    2654:	6882      	ldr	r2, [r0, #8]
    2656:	3b05      	subs	r3, #5
    2658:	548b      	strb	r3, [r1, r2]
    265a:	2300      	movs	r3, #0
    265c:	0018      	movs	r0, r3
    265e:	4770      	bx	lr

00002660 <qtm_calibrate_sensor_node>:
    2660:	0002      	movs	r2, r0
    2662:	b510      	push	{r4, lr}
    2664:	200b      	movs	r0, #11
    2666:	2a00      	cmp	r2, #0
    2668:	d01f      	beq.n	26aa <qtm_calibrate_sensor_node+0x4a>
    266a:	6813      	ldr	r3, [r2, #0]
    266c:	3809      	subs	r0, #9
    266e:	881c      	ldrh	r4, [r3, #0]
    2670:	428c      	cmp	r4, r1
    2672:	d31a      	bcc.n	26aa <qtm_calibrate_sensor_node+0x4a>
    2674:	789b      	ldrb	r3, [r3, #2]
    2676:	6892      	ldr	r2, [r2, #8]
    2678:	2b40      	cmp	r3, #64	; 0x40
    267a:	d105      	bne.n	2688 <qtm_calibrate_sensor_node+0x28>
    267c:	208d      	movs	r0, #141	; 0x8d
    267e:	3b3a      	subs	r3, #58	; 0x3a
    2680:	434b      	muls	r3, r1
    2682:	0080      	lsls	r0, r0, #2
    2684:	18d3      	adds	r3, r2, r3
    2686:	e007      	b.n	2698 <qtm_calibrate_sensor_node+0x38>
    2688:	3b80      	subs	r3, #128	; 0x80
    268a:	b2db      	uxtb	r3, r3
    268c:	2b01      	cmp	r3, #1
    268e:	d805      	bhi.n	269c <qtm_calibrate_sensor_node+0x3c>
    2690:	2306      	movs	r3, #6
    2692:	434b      	muls	r3, r1
    2694:	4805      	ldr	r0, [pc, #20]	; (26ac <qtm_calibrate_sensor_node+0x4c>)
    2696:	18d3      	adds	r3, r2, r3
    2698:	8098      	strh	r0, [r3, #4]
    269a:	2000      	movs	r0, #0
    269c:	2306      	movs	r3, #6
    269e:	4359      	muls	r1, r3
    26a0:	1851      	adds	r1, r2, r1
    26a2:	2202      	movs	r2, #2
    26a4:	780b      	ldrb	r3, [r1, #0]
    26a6:	4313      	orrs	r3, r2
    26a8:	700b      	strb	r3, [r1, #0]
    26aa:	bd10      	pop	{r4, pc}
    26ac:	00000567 	.word	0x00000567

000026b0 <qtm_ptc_clear_interrupt>:
    26b0:	2002      	movs	r0, #2
    26b2:	4b07      	ldr	r3, [pc, #28]	; (26d0 <qtm_ptc_clear_interrupt+0x20>)
    26b4:	7a9a      	ldrb	r2, [r3, #10]
    26b6:	b2d2      	uxtb	r2, r2
    26b8:	4202      	tst	r2, r0
    26ba:	d002      	beq.n	26c2 <qtm_ptc_clear_interrupt+0x12>
    26bc:	7a99      	ldrb	r1, [r3, #10]
    26be:	4301      	orrs	r1, r0
    26c0:	7299      	strb	r1, [r3, #10]
    26c2:	2101      	movs	r1, #1
    26c4:	420a      	tst	r2, r1
    26c6:	d002      	beq.n	26ce <qtm_ptc_clear_interrupt+0x1e>
    26c8:	7a9a      	ldrb	r2, [r3, #10]
    26ca:	430a      	orrs	r2, r1
    26cc:	729a      	strb	r2, [r3, #10]
    26ce:	4770      	bx	lr
    26d0:	42003800 	.word	0x42003800

000026d4 <qtm_saml22_ptc_handler_eoc>:
    26d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26d6:	4b23      	ldr	r3, [pc, #140]	; (2764 <qtm_saml22_ptc_handler_eoc+0x90>)
    26d8:	4798      	blx	r3
    26da:	2102      	movs	r1, #2
    26dc:	4a22      	ldr	r2, [pc, #136]	; (2768 <qtm_saml22_ptc_handler_eoc+0x94>)
    26de:	8813      	ldrh	r3, [r2, #0]
    26e0:	438b      	bics	r3, r1
    26e2:	8013      	strh	r3, [r2, #0]
    26e4:	4b21      	ldr	r3, [pc, #132]	; (276c <qtm_saml22_ptc_handler_eoc+0x98>)
    26e6:	4798      	blx	r3
    26e8:	4b21      	ldr	r3, [pc, #132]	; (2770 <qtm_saml22_ptc_handler_eoc+0x9c>)
    26ea:	4c22      	ldr	r4, [pc, #136]	; (2774 <qtm_saml22_ptc_handler_eoc+0xa0>)
    26ec:	4a22      	ldr	r2, [pc, #136]	; (2778 <qtm_saml22_ptc_handler_eoc+0xa4>)
    26ee:	8819      	ldrh	r1, [r3, #0]
    26f0:	8818      	ldrh	r0, [r3, #0]
    26f2:	8823      	ldrh	r3, [r4, #0]
    26f4:	6812      	ldr	r2, [r2, #0]
    26f6:	005b      	lsls	r3, r3, #1
    26f8:	52d0      	strh	r0, [r2, r3]
    26fa:	4b20      	ldr	r3, [pc, #128]	; (277c <qtm_saml22_ptc_handler_eoc+0xa8>)
    26fc:	b289      	uxth	r1, r1
    26fe:	781b      	ldrb	r3, [r3, #0]
    2700:	0020      	movs	r0, r4
    2702:	2b01      	cmp	r3, #1
    2704:	d002      	beq.n	270c <qtm_saml22_ptc_handler_eoc+0x38>
    2706:	2b02      	cmp	r3, #2
    2708:	d00f      	beq.n	272a <qtm_saml22_ptc_handler_eoc+0x56>
    270a:	e029      	b.n	2760 <qtm_saml22_ptc_handler_eoc+0x8c>
    270c:	8823      	ldrh	r3, [r4, #0]
    270e:	3301      	adds	r3, #1
    2710:	8023      	strh	r3, [r4, #0]
    2712:	4b1b      	ldr	r3, [pc, #108]	; (2780 <qtm_saml22_ptc_handler_eoc+0xac>)
    2714:	4798      	blx	r3
    2716:	2800      	cmp	r0, #0
    2718:	d105      	bne.n	2726 <qtm_saml22_ptc_handler_eoc+0x52>
    271a:	4b1a      	ldr	r3, [pc, #104]	; (2784 <qtm_saml22_ptc_handler_eoc+0xb0>)
    271c:	8820      	ldrh	r0, [r4, #0]
    271e:	4798      	blx	r3
    2720:	2304      	movs	r3, #4
    2722:	7223      	strb	r3, [r4, #8]
    2724:	e01c      	b.n	2760 <qtm_saml22_ptc_handler_eoc+0x8c>
    2726:	68e3      	ldr	r3, [r4, #12]
    2728:	e019      	b.n	275e <qtm_saml22_ptc_handler_eoc+0x8a>
    272a:	4b17      	ldr	r3, [pc, #92]	; (2788 <qtm_saml22_ptc_handler_eoc+0xb4>)
    272c:	8824      	ldrh	r4, [r4, #0]
    272e:	681d      	ldr	r5, [r3, #0]
    2730:	230c      	movs	r3, #12
    2732:	4363      	muls	r3, r4
    2734:	686a      	ldr	r2, [r5, #4]
    2736:	2700      	movs	r7, #0
    2738:	18d3      	adds	r3, r2, r3
    273a:	220f      	movs	r2, #15
    273c:	7a9e      	ldrb	r6, [r3, #10]
    273e:	4016      	ands	r6, r2
    2740:	7ada      	ldrb	r2, [r3, #11]
    2742:	4296      	cmp	r6, r2
    2744:	d201      	bcs.n	274a <qtm_saml22_ptc_handler_eoc+0x76>
    2746:	1b92      	subs	r2, r2, r6
    2748:	b2d7      	uxtb	r7, r2
    274a:	2206      	movs	r2, #6
    274c:	0013      	movs	r3, r2
    274e:	40f9      	lsrs	r1, r7
    2750:	4363      	muls	r3, r4
    2752:	68ad      	ldr	r5, [r5, #8]
    2754:	18eb      	adds	r3, r5, r3
    2756:	8059      	strh	r1, [r3, #2]
    2758:	2302      	movs	r3, #2
    275a:	7203      	strb	r3, [r0, #8]
    275c:	6903      	ldr	r3, [r0, #16]
    275e:	4798      	blx	r3
    2760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2762:	46c0      	nop			; (mov r8, r8)
    2764:	0000234d 	.word	0x0000234d
    2768:	42003800 	.word	0x42003800
    276c:	000026b1 	.word	0x000026b1
    2770:	42003858 	.word	0x42003858
    2774:	20000128 	.word	0x20000128
    2778:	2000020c 	.word	0x2000020c
    277c:	2000007a 	.word	0x2000007a
    2780:	0000235d 	.word	0x0000235d
    2784:	0000239d 	.word	0x0000239d
    2788:	20000208 	.word	0x20000208

0000278c <__udivsi3>:
    278c:	2200      	movs	r2, #0
    278e:	0843      	lsrs	r3, r0, #1
    2790:	428b      	cmp	r3, r1
    2792:	d374      	bcc.n	287e <__udivsi3+0xf2>
    2794:	0903      	lsrs	r3, r0, #4
    2796:	428b      	cmp	r3, r1
    2798:	d35f      	bcc.n	285a <__udivsi3+0xce>
    279a:	0a03      	lsrs	r3, r0, #8
    279c:	428b      	cmp	r3, r1
    279e:	d344      	bcc.n	282a <__udivsi3+0x9e>
    27a0:	0b03      	lsrs	r3, r0, #12
    27a2:	428b      	cmp	r3, r1
    27a4:	d328      	bcc.n	27f8 <__udivsi3+0x6c>
    27a6:	0c03      	lsrs	r3, r0, #16
    27a8:	428b      	cmp	r3, r1
    27aa:	d30d      	bcc.n	27c8 <__udivsi3+0x3c>
    27ac:	22ff      	movs	r2, #255	; 0xff
    27ae:	0209      	lsls	r1, r1, #8
    27b0:	ba12      	rev	r2, r2
    27b2:	0c03      	lsrs	r3, r0, #16
    27b4:	428b      	cmp	r3, r1
    27b6:	d302      	bcc.n	27be <__udivsi3+0x32>
    27b8:	1212      	asrs	r2, r2, #8
    27ba:	0209      	lsls	r1, r1, #8
    27bc:	d065      	beq.n	288a <__udivsi3+0xfe>
    27be:	0b03      	lsrs	r3, r0, #12
    27c0:	428b      	cmp	r3, r1
    27c2:	d319      	bcc.n	27f8 <__udivsi3+0x6c>
    27c4:	e000      	b.n	27c8 <__udivsi3+0x3c>
    27c6:	0a09      	lsrs	r1, r1, #8
    27c8:	0bc3      	lsrs	r3, r0, #15
    27ca:	428b      	cmp	r3, r1
    27cc:	d301      	bcc.n	27d2 <__udivsi3+0x46>
    27ce:	03cb      	lsls	r3, r1, #15
    27d0:	1ac0      	subs	r0, r0, r3
    27d2:	4152      	adcs	r2, r2
    27d4:	0b83      	lsrs	r3, r0, #14
    27d6:	428b      	cmp	r3, r1
    27d8:	d301      	bcc.n	27de <__udivsi3+0x52>
    27da:	038b      	lsls	r3, r1, #14
    27dc:	1ac0      	subs	r0, r0, r3
    27de:	4152      	adcs	r2, r2
    27e0:	0b43      	lsrs	r3, r0, #13
    27e2:	428b      	cmp	r3, r1
    27e4:	d301      	bcc.n	27ea <__udivsi3+0x5e>
    27e6:	034b      	lsls	r3, r1, #13
    27e8:	1ac0      	subs	r0, r0, r3
    27ea:	4152      	adcs	r2, r2
    27ec:	0b03      	lsrs	r3, r0, #12
    27ee:	428b      	cmp	r3, r1
    27f0:	d301      	bcc.n	27f6 <__udivsi3+0x6a>
    27f2:	030b      	lsls	r3, r1, #12
    27f4:	1ac0      	subs	r0, r0, r3
    27f6:	4152      	adcs	r2, r2
    27f8:	0ac3      	lsrs	r3, r0, #11
    27fa:	428b      	cmp	r3, r1
    27fc:	d301      	bcc.n	2802 <__udivsi3+0x76>
    27fe:	02cb      	lsls	r3, r1, #11
    2800:	1ac0      	subs	r0, r0, r3
    2802:	4152      	adcs	r2, r2
    2804:	0a83      	lsrs	r3, r0, #10
    2806:	428b      	cmp	r3, r1
    2808:	d301      	bcc.n	280e <__udivsi3+0x82>
    280a:	028b      	lsls	r3, r1, #10
    280c:	1ac0      	subs	r0, r0, r3
    280e:	4152      	adcs	r2, r2
    2810:	0a43      	lsrs	r3, r0, #9
    2812:	428b      	cmp	r3, r1
    2814:	d301      	bcc.n	281a <__udivsi3+0x8e>
    2816:	024b      	lsls	r3, r1, #9
    2818:	1ac0      	subs	r0, r0, r3
    281a:	4152      	adcs	r2, r2
    281c:	0a03      	lsrs	r3, r0, #8
    281e:	428b      	cmp	r3, r1
    2820:	d301      	bcc.n	2826 <__udivsi3+0x9a>
    2822:	020b      	lsls	r3, r1, #8
    2824:	1ac0      	subs	r0, r0, r3
    2826:	4152      	adcs	r2, r2
    2828:	d2cd      	bcs.n	27c6 <__udivsi3+0x3a>
    282a:	09c3      	lsrs	r3, r0, #7
    282c:	428b      	cmp	r3, r1
    282e:	d301      	bcc.n	2834 <__udivsi3+0xa8>
    2830:	01cb      	lsls	r3, r1, #7
    2832:	1ac0      	subs	r0, r0, r3
    2834:	4152      	adcs	r2, r2
    2836:	0983      	lsrs	r3, r0, #6
    2838:	428b      	cmp	r3, r1
    283a:	d301      	bcc.n	2840 <__udivsi3+0xb4>
    283c:	018b      	lsls	r3, r1, #6
    283e:	1ac0      	subs	r0, r0, r3
    2840:	4152      	adcs	r2, r2
    2842:	0943      	lsrs	r3, r0, #5
    2844:	428b      	cmp	r3, r1
    2846:	d301      	bcc.n	284c <__udivsi3+0xc0>
    2848:	014b      	lsls	r3, r1, #5
    284a:	1ac0      	subs	r0, r0, r3
    284c:	4152      	adcs	r2, r2
    284e:	0903      	lsrs	r3, r0, #4
    2850:	428b      	cmp	r3, r1
    2852:	d301      	bcc.n	2858 <__udivsi3+0xcc>
    2854:	010b      	lsls	r3, r1, #4
    2856:	1ac0      	subs	r0, r0, r3
    2858:	4152      	adcs	r2, r2
    285a:	08c3      	lsrs	r3, r0, #3
    285c:	428b      	cmp	r3, r1
    285e:	d301      	bcc.n	2864 <__udivsi3+0xd8>
    2860:	00cb      	lsls	r3, r1, #3
    2862:	1ac0      	subs	r0, r0, r3
    2864:	4152      	adcs	r2, r2
    2866:	0883      	lsrs	r3, r0, #2
    2868:	428b      	cmp	r3, r1
    286a:	d301      	bcc.n	2870 <__udivsi3+0xe4>
    286c:	008b      	lsls	r3, r1, #2
    286e:	1ac0      	subs	r0, r0, r3
    2870:	4152      	adcs	r2, r2
    2872:	0843      	lsrs	r3, r0, #1
    2874:	428b      	cmp	r3, r1
    2876:	d301      	bcc.n	287c <__udivsi3+0xf0>
    2878:	004b      	lsls	r3, r1, #1
    287a:	1ac0      	subs	r0, r0, r3
    287c:	4152      	adcs	r2, r2
    287e:	1a41      	subs	r1, r0, r1
    2880:	d200      	bcs.n	2884 <__udivsi3+0xf8>
    2882:	4601      	mov	r1, r0
    2884:	4152      	adcs	r2, r2
    2886:	4610      	mov	r0, r2
    2888:	4770      	bx	lr
    288a:	e7ff      	b.n	288c <__udivsi3+0x100>
    288c:	b501      	push	{r0, lr}
    288e:	2000      	movs	r0, #0
    2890:	f000 f806 	bl	28a0 <__aeabi_idiv0>
    2894:	bd02      	pop	{r1, pc}
    2896:	46c0      	nop			; (mov r8, r8)

00002898 <__aeabi_uidivmod>:
    2898:	2900      	cmp	r1, #0
    289a:	d0f7      	beq.n	288c <__udivsi3+0x100>
    289c:	e776      	b.n	278c <__udivsi3>
    289e:	4770      	bx	lr

000028a0 <__aeabi_idiv0>:
    28a0:	4770      	bx	lr
    28a2:	46c0      	nop			; (mov r8, r8)

000028a4 <__libc_init_array>:
    28a4:	b570      	push	{r4, r5, r6, lr}
    28a6:	2600      	movs	r6, #0
    28a8:	4d0c      	ldr	r5, [pc, #48]	; (28dc <__libc_init_array+0x38>)
    28aa:	4c0d      	ldr	r4, [pc, #52]	; (28e0 <__libc_init_array+0x3c>)
    28ac:	1b64      	subs	r4, r4, r5
    28ae:	10a4      	asrs	r4, r4, #2
    28b0:	42a6      	cmp	r6, r4
    28b2:	d109      	bne.n	28c8 <__libc_init_array+0x24>
    28b4:	2600      	movs	r6, #0
    28b6:	f001 fa1f 	bl	3cf8 <_init>
    28ba:	4d0a      	ldr	r5, [pc, #40]	; (28e4 <__libc_init_array+0x40>)
    28bc:	4c0a      	ldr	r4, [pc, #40]	; (28e8 <__libc_init_array+0x44>)
    28be:	1b64      	subs	r4, r4, r5
    28c0:	10a4      	asrs	r4, r4, #2
    28c2:	42a6      	cmp	r6, r4
    28c4:	d105      	bne.n	28d2 <__libc_init_array+0x2e>
    28c6:	bd70      	pop	{r4, r5, r6, pc}
    28c8:	00b3      	lsls	r3, r6, #2
    28ca:	58eb      	ldr	r3, [r5, r3]
    28cc:	4798      	blx	r3
    28ce:	3601      	adds	r6, #1
    28d0:	e7ee      	b.n	28b0 <__libc_init_array+0xc>
    28d2:	00b3      	lsls	r3, r6, #2
    28d4:	58eb      	ldr	r3, [r5, r3]
    28d6:	4798      	blx	r3
    28d8:	3601      	adds	r6, #1
    28da:	e7f2      	b.n	28c2 <__libc_init_array+0x1e>
    28dc:	00003d04 	.word	0x00003d04
    28e0:	00003d04 	.word	0x00003d04
    28e4:	00003d04 	.word	0x00003d04
    28e8:	00003d08 	.word	0x00003d08

000028ec <memset>:
    28ec:	0003      	movs	r3, r0
    28ee:	1882      	adds	r2, r0, r2
    28f0:	4293      	cmp	r3, r2
    28f2:	d100      	bne.n	28f6 <memset+0xa>
    28f4:	4770      	bx	lr
    28f6:	7019      	strb	r1, [r3, #0]
    28f8:	3301      	adds	r3, #1
    28fa:	e7f9      	b.n	28f0 <memset+0x4>

000028fc <iprintf>:
    28fc:	b40f      	push	{r0, r1, r2, r3}
    28fe:	4b0b      	ldr	r3, [pc, #44]	; (292c <iprintf+0x30>)
    2900:	b513      	push	{r0, r1, r4, lr}
    2902:	681c      	ldr	r4, [r3, #0]
    2904:	2c00      	cmp	r4, #0
    2906:	d005      	beq.n	2914 <iprintf+0x18>
    2908:	69a3      	ldr	r3, [r4, #24]
    290a:	2b00      	cmp	r3, #0
    290c:	d102      	bne.n	2914 <iprintf+0x18>
    290e:	0020      	movs	r0, r4
    2910:	f000 fa88 	bl	2e24 <__sinit>
    2914:	ab05      	add	r3, sp, #20
    2916:	9a04      	ldr	r2, [sp, #16]
    2918:	68a1      	ldr	r1, [r4, #8]
    291a:	0020      	movs	r0, r4
    291c:	9301      	str	r3, [sp, #4]
    291e:	f000 fc5d 	bl	31dc <_vfiprintf_r>
    2922:	bc16      	pop	{r1, r2, r4}
    2924:	bc08      	pop	{r3}
    2926:	b004      	add	sp, #16
    2928:	4718      	bx	r3
    292a:	46c0      	nop			; (mov r8, r8)
    292c:	2000007c 	.word	0x2000007c

00002930 <setbuf>:
    2930:	424a      	negs	r2, r1
    2932:	414a      	adcs	r2, r1
    2934:	2380      	movs	r3, #128	; 0x80
    2936:	b510      	push	{r4, lr}
    2938:	0052      	lsls	r2, r2, #1
    293a:	00db      	lsls	r3, r3, #3
    293c:	f000 f802 	bl	2944 <setvbuf>
    2940:	bd10      	pop	{r4, pc}
	...

00002944 <setvbuf>:
    2944:	b5f0      	push	{r4, r5, r6, r7, lr}
    2946:	001d      	movs	r5, r3
    2948:	4b4f      	ldr	r3, [pc, #316]	; (2a88 <setvbuf+0x144>)
    294a:	b085      	sub	sp, #20
    294c:	681e      	ldr	r6, [r3, #0]
    294e:	0004      	movs	r4, r0
    2950:	000f      	movs	r7, r1
    2952:	9200      	str	r2, [sp, #0]
    2954:	2e00      	cmp	r6, #0
    2956:	d005      	beq.n	2964 <setvbuf+0x20>
    2958:	69b3      	ldr	r3, [r6, #24]
    295a:	2b00      	cmp	r3, #0
    295c:	d102      	bne.n	2964 <setvbuf+0x20>
    295e:	0030      	movs	r0, r6
    2960:	f000 fa60 	bl	2e24 <__sinit>
    2964:	4b49      	ldr	r3, [pc, #292]	; (2a8c <setvbuf+0x148>)
    2966:	429c      	cmp	r4, r3
    2968:	d150      	bne.n	2a0c <setvbuf+0xc8>
    296a:	6874      	ldr	r4, [r6, #4]
    296c:	9b00      	ldr	r3, [sp, #0]
    296e:	2b02      	cmp	r3, #2
    2970:	d005      	beq.n	297e <setvbuf+0x3a>
    2972:	2b01      	cmp	r3, #1
    2974:	d900      	bls.n	2978 <setvbuf+0x34>
    2976:	e084      	b.n	2a82 <setvbuf+0x13e>
    2978:	2d00      	cmp	r5, #0
    297a:	da00      	bge.n	297e <setvbuf+0x3a>
    297c:	e081      	b.n	2a82 <setvbuf+0x13e>
    297e:	0021      	movs	r1, r4
    2980:	0030      	movs	r0, r6
    2982:	f000 f9e1 	bl	2d48 <_fflush_r>
    2986:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2988:	2900      	cmp	r1, #0
    298a:	d008      	beq.n	299e <setvbuf+0x5a>
    298c:	0023      	movs	r3, r4
    298e:	3344      	adds	r3, #68	; 0x44
    2990:	4299      	cmp	r1, r3
    2992:	d002      	beq.n	299a <setvbuf+0x56>
    2994:	0030      	movs	r0, r6
    2996:	f000 fb51 	bl	303c <_free_r>
    299a:	2300      	movs	r3, #0
    299c:	6363      	str	r3, [r4, #52]	; 0x34
    299e:	2300      	movs	r3, #0
    29a0:	61a3      	str	r3, [r4, #24]
    29a2:	6063      	str	r3, [r4, #4]
    29a4:	89a3      	ldrh	r3, [r4, #12]
    29a6:	061b      	lsls	r3, r3, #24
    29a8:	d503      	bpl.n	29b2 <setvbuf+0x6e>
    29aa:	6921      	ldr	r1, [r4, #16]
    29ac:	0030      	movs	r0, r6
    29ae:	f000 fb45 	bl	303c <_free_r>
    29b2:	89a3      	ldrh	r3, [r4, #12]
    29b4:	4a36      	ldr	r2, [pc, #216]	; (2a90 <setvbuf+0x14c>)
    29b6:	4013      	ands	r3, r2
    29b8:	81a3      	strh	r3, [r4, #12]
    29ba:	9b00      	ldr	r3, [sp, #0]
    29bc:	2b02      	cmp	r3, #2
    29be:	d05a      	beq.n	2a76 <setvbuf+0x132>
    29c0:	ab03      	add	r3, sp, #12
    29c2:	aa02      	add	r2, sp, #8
    29c4:	0021      	movs	r1, r4
    29c6:	0030      	movs	r0, r6
    29c8:	f000 fac2 	bl	2f50 <__swhatbuf_r>
    29cc:	89a3      	ldrh	r3, [r4, #12]
    29ce:	4318      	orrs	r0, r3
    29d0:	81a0      	strh	r0, [r4, #12]
    29d2:	2d00      	cmp	r5, #0
    29d4:	d124      	bne.n	2a20 <setvbuf+0xdc>
    29d6:	9d02      	ldr	r5, [sp, #8]
    29d8:	0028      	movs	r0, r5
    29da:	f000 fb25 	bl	3028 <malloc>
    29de:	9501      	str	r5, [sp, #4]
    29e0:	1e07      	subs	r7, r0, #0
    29e2:	d142      	bne.n	2a6a <setvbuf+0x126>
    29e4:	9b02      	ldr	r3, [sp, #8]
    29e6:	9301      	str	r3, [sp, #4]
    29e8:	42ab      	cmp	r3, r5
    29ea:	d139      	bne.n	2a60 <setvbuf+0x11c>
    29ec:	2001      	movs	r0, #1
    29ee:	4240      	negs	r0, r0
    29f0:	2302      	movs	r3, #2
    29f2:	89a2      	ldrh	r2, [r4, #12]
    29f4:	4313      	orrs	r3, r2
    29f6:	81a3      	strh	r3, [r4, #12]
    29f8:	2300      	movs	r3, #0
    29fa:	60a3      	str	r3, [r4, #8]
    29fc:	0023      	movs	r3, r4
    29fe:	3347      	adds	r3, #71	; 0x47
    2a00:	6023      	str	r3, [r4, #0]
    2a02:	6123      	str	r3, [r4, #16]
    2a04:	2301      	movs	r3, #1
    2a06:	6163      	str	r3, [r4, #20]
    2a08:	b005      	add	sp, #20
    2a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a0c:	4b21      	ldr	r3, [pc, #132]	; (2a94 <setvbuf+0x150>)
    2a0e:	429c      	cmp	r4, r3
    2a10:	d101      	bne.n	2a16 <setvbuf+0xd2>
    2a12:	68b4      	ldr	r4, [r6, #8]
    2a14:	e7aa      	b.n	296c <setvbuf+0x28>
    2a16:	4b20      	ldr	r3, [pc, #128]	; (2a98 <setvbuf+0x154>)
    2a18:	429c      	cmp	r4, r3
    2a1a:	d1a7      	bne.n	296c <setvbuf+0x28>
    2a1c:	68f4      	ldr	r4, [r6, #12]
    2a1e:	e7a5      	b.n	296c <setvbuf+0x28>
    2a20:	2f00      	cmp	r7, #0
    2a22:	d0d9      	beq.n	29d8 <setvbuf+0x94>
    2a24:	69b3      	ldr	r3, [r6, #24]
    2a26:	2b00      	cmp	r3, #0
    2a28:	d102      	bne.n	2a30 <setvbuf+0xec>
    2a2a:	0030      	movs	r0, r6
    2a2c:	f000 f9fa 	bl	2e24 <__sinit>
    2a30:	9b00      	ldr	r3, [sp, #0]
    2a32:	2b01      	cmp	r3, #1
    2a34:	d103      	bne.n	2a3e <setvbuf+0xfa>
    2a36:	89a3      	ldrh	r3, [r4, #12]
    2a38:	9a00      	ldr	r2, [sp, #0]
    2a3a:	431a      	orrs	r2, r3
    2a3c:	81a2      	strh	r2, [r4, #12]
    2a3e:	2008      	movs	r0, #8
    2a40:	89a3      	ldrh	r3, [r4, #12]
    2a42:	6027      	str	r7, [r4, #0]
    2a44:	6127      	str	r7, [r4, #16]
    2a46:	6165      	str	r5, [r4, #20]
    2a48:	4018      	ands	r0, r3
    2a4a:	d018      	beq.n	2a7e <setvbuf+0x13a>
    2a4c:	2001      	movs	r0, #1
    2a4e:	4018      	ands	r0, r3
    2a50:	2300      	movs	r3, #0
    2a52:	4298      	cmp	r0, r3
    2a54:	d011      	beq.n	2a7a <setvbuf+0x136>
    2a56:	426d      	negs	r5, r5
    2a58:	60a3      	str	r3, [r4, #8]
    2a5a:	61a5      	str	r5, [r4, #24]
    2a5c:	0018      	movs	r0, r3
    2a5e:	e7d3      	b.n	2a08 <setvbuf+0xc4>
    2a60:	9801      	ldr	r0, [sp, #4]
    2a62:	f000 fae1 	bl	3028 <malloc>
    2a66:	1e07      	subs	r7, r0, #0
    2a68:	d0c0      	beq.n	29ec <setvbuf+0xa8>
    2a6a:	2380      	movs	r3, #128	; 0x80
    2a6c:	89a2      	ldrh	r2, [r4, #12]
    2a6e:	9d01      	ldr	r5, [sp, #4]
    2a70:	4313      	orrs	r3, r2
    2a72:	81a3      	strh	r3, [r4, #12]
    2a74:	e7d6      	b.n	2a24 <setvbuf+0xe0>
    2a76:	2000      	movs	r0, #0
    2a78:	e7ba      	b.n	29f0 <setvbuf+0xac>
    2a7a:	60a5      	str	r5, [r4, #8]
    2a7c:	e7c4      	b.n	2a08 <setvbuf+0xc4>
    2a7e:	60a0      	str	r0, [r4, #8]
    2a80:	e7c2      	b.n	2a08 <setvbuf+0xc4>
    2a82:	2001      	movs	r0, #1
    2a84:	4240      	negs	r0, r0
    2a86:	e7bf      	b.n	2a08 <setvbuf+0xc4>
    2a88:	2000007c 	.word	0x2000007c
    2a8c:	00003c84 	.word	0x00003c84
    2a90:	fffff35c 	.word	0xfffff35c
    2a94:	00003ca4 	.word	0x00003ca4
    2a98:	00003c64 	.word	0x00003c64

00002a9c <__swbuf_r>:
    2a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a9e:	0005      	movs	r5, r0
    2aa0:	000e      	movs	r6, r1
    2aa2:	0014      	movs	r4, r2
    2aa4:	2800      	cmp	r0, #0
    2aa6:	d004      	beq.n	2ab2 <__swbuf_r+0x16>
    2aa8:	6983      	ldr	r3, [r0, #24]
    2aaa:	2b00      	cmp	r3, #0
    2aac:	d101      	bne.n	2ab2 <__swbuf_r+0x16>
    2aae:	f000 f9b9 	bl	2e24 <__sinit>
    2ab2:	4b22      	ldr	r3, [pc, #136]	; (2b3c <__swbuf_r+0xa0>)
    2ab4:	429c      	cmp	r4, r3
    2ab6:	d12d      	bne.n	2b14 <__swbuf_r+0x78>
    2ab8:	686c      	ldr	r4, [r5, #4]
    2aba:	69a3      	ldr	r3, [r4, #24]
    2abc:	60a3      	str	r3, [r4, #8]
    2abe:	89a3      	ldrh	r3, [r4, #12]
    2ac0:	071b      	lsls	r3, r3, #28
    2ac2:	d531      	bpl.n	2b28 <__swbuf_r+0x8c>
    2ac4:	6923      	ldr	r3, [r4, #16]
    2ac6:	2b00      	cmp	r3, #0
    2ac8:	d02e      	beq.n	2b28 <__swbuf_r+0x8c>
    2aca:	6823      	ldr	r3, [r4, #0]
    2acc:	6922      	ldr	r2, [r4, #16]
    2ace:	b2f7      	uxtb	r7, r6
    2ad0:	1a98      	subs	r0, r3, r2
    2ad2:	6963      	ldr	r3, [r4, #20]
    2ad4:	b2f6      	uxtb	r6, r6
    2ad6:	4298      	cmp	r0, r3
    2ad8:	db05      	blt.n	2ae6 <__swbuf_r+0x4a>
    2ada:	0021      	movs	r1, r4
    2adc:	0028      	movs	r0, r5
    2ade:	f000 f933 	bl	2d48 <_fflush_r>
    2ae2:	2800      	cmp	r0, #0
    2ae4:	d126      	bne.n	2b34 <__swbuf_r+0x98>
    2ae6:	68a3      	ldr	r3, [r4, #8]
    2ae8:	3001      	adds	r0, #1
    2aea:	3b01      	subs	r3, #1
    2aec:	60a3      	str	r3, [r4, #8]
    2aee:	6823      	ldr	r3, [r4, #0]
    2af0:	1c5a      	adds	r2, r3, #1
    2af2:	6022      	str	r2, [r4, #0]
    2af4:	701f      	strb	r7, [r3, #0]
    2af6:	6963      	ldr	r3, [r4, #20]
    2af8:	4298      	cmp	r0, r3
    2afa:	d004      	beq.n	2b06 <__swbuf_r+0x6a>
    2afc:	89a3      	ldrh	r3, [r4, #12]
    2afe:	07db      	lsls	r3, r3, #31
    2b00:	d51a      	bpl.n	2b38 <__swbuf_r+0x9c>
    2b02:	2e0a      	cmp	r6, #10
    2b04:	d118      	bne.n	2b38 <__swbuf_r+0x9c>
    2b06:	0021      	movs	r1, r4
    2b08:	0028      	movs	r0, r5
    2b0a:	f000 f91d 	bl	2d48 <_fflush_r>
    2b0e:	2800      	cmp	r0, #0
    2b10:	d012      	beq.n	2b38 <__swbuf_r+0x9c>
    2b12:	e00f      	b.n	2b34 <__swbuf_r+0x98>
    2b14:	4b0a      	ldr	r3, [pc, #40]	; (2b40 <__swbuf_r+0xa4>)
    2b16:	429c      	cmp	r4, r3
    2b18:	d101      	bne.n	2b1e <__swbuf_r+0x82>
    2b1a:	68ac      	ldr	r4, [r5, #8]
    2b1c:	e7cd      	b.n	2aba <__swbuf_r+0x1e>
    2b1e:	4b09      	ldr	r3, [pc, #36]	; (2b44 <__swbuf_r+0xa8>)
    2b20:	429c      	cmp	r4, r3
    2b22:	d1ca      	bne.n	2aba <__swbuf_r+0x1e>
    2b24:	68ec      	ldr	r4, [r5, #12]
    2b26:	e7c8      	b.n	2aba <__swbuf_r+0x1e>
    2b28:	0021      	movs	r1, r4
    2b2a:	0028      	movs	r0, r5
    2b2c:	f000 f80c 	bl	2b48 <__swsetup_r>
    2b30:	2800      	cmp	r0, #0
    2b32:	d0ca      	beq.n	2aca <__swbuf_r+0x2e>
    2b34:	2601      	movs	r6, #1
    2b36:	4276      	negs	r6, r6
    2b38:	0030      	movs	r0, r6
    2b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b3c:	00003c84 	.word	0x00003c84
    2b40:	00003ca4 	.word	0x00003ca4
    2b44:	00003c64 	.word	0x00003c64

00002b48 <__swsetup_r>:
    2b48:	4b36      	ldr	r3, [pc, #216]	; (2c24 <__swsetup_r+0xdc>)
    2b4a:	b570      	push	{r4, r5, r6, lr}
    2b4c:	681d      	ldr	r5, [r3, #0]
    2b4e:	0006      	movs	r6, r0
    2b50:	000c      	movs	r4, r1
    2b52:	2d00      	cmp	r5, #0
    2b54:	d005      	beq.n	2b62 <__swsetup_r+0x1a>
    2b56:	69ab      	ldr	r3, [r5, #24]
    2b58:	2b00      	cmp	r3, #0
    2b5a:	d102      	bne.n	2b62 <__swsetup_r+0x1a>
    2b5c:	0028      	movs	r0, r5
    2b5e:	f000 f961 	bl	2e24 <__sinit>
    2b62:	4b31      	ldr	r3, [pc, #196]	; (2c28 <__swsetup_r+0xe0>)
    2b64:	429c      	cmp	r4, r3
    2b66:	d10f      	bne.n	2b88 <__swsetup_r+0x40>
    2b68:	686c      	ldr	r4, [r5, #4]
    2b6a:	230c      	movs	r3, #12
    2b6c:	5ee2      	ldrsh	r2, [r4, r3]
    2b6e:	b293      	uxth	r3, r2
    2b70:	0719      	lsls	r1, r3, #28
    2b72:	d42d      	bmi.n	2bd0 <__swsetup_r+0x88>
    2b74:	06d9      	lsls	r1, r3, #27
    2b76:	d411      	bmi.n	2b9c <__swsetup_r+0x54>
    2b78:	2309      	movs	r3, #9
    2b7a:	2001      	movs	r0, #1
    2b7c:	6033      	str	r3, [r6, #0]
    2b7e:	3337      	adds	r3, #55	; 0x37
    2b80:	4313      	orrs	r3, r2
    2b82:	81a3      	strh	r3, [r4, #12]
    2b84:	4240      	negs	r0, r0
    2b86:	bd70      	pop	{r4, r5, r6, pc}
    2b88:	4b28      	ldr	r3, [pc, #160]	; (2c2c <__swsetup_r+0xe4>)
    2b8a:	429c      	cmp	r4, r3
    2b8c:	d101      	bne.n	2b92 <__swsetup_r+0x4a>
    2b8e:	68ac      	ldr	r4, [r5, #8]
    2b90:	e7eb      	b.n	2b6a <__swsetup_r+0x22>
    2b92:	4b27      	ldr	r3, [pc, #156]	; (2c30 <__swsetup_r+0xe8>)
    2b94:	429c      	cmp	r4, r3
    2b96:	d1e8      	bne.n	2b6a <__swsetup_r+0x22>
    2b98:	68ec      	ldr	r4, [r5, #12]
    2b9a:	e7e6      	b.n	2b6a <__swsetup_r+0x22>
    2b9c:	075b      	lsls	r3, r3, #29
    2b9e:	d513      	bpl.n	2bc8 <__swsetup_r+0x80>
    2ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2ba2:	2900      	cmp	r1, #0
    2ba4:	d008      	beq.n	2bb8 <__swsetup_r+0x70>
    2ba6:	0023      	movs	r3, r4
    2ba8:	3344      	adds	r3, #68	; 0x44
    2baa:	4299      	cmp	r1, r3
    2bac:	d002      	beq.n	2bb4 <__swsetup_r+0x6c>
    2bae:	0030      	movs	r0, r6
    2bb0:	f000 fa44 	bl	303c <_free_r>
    2bb4:	2300      	movs	r3, #0
    2bb6:	6363      	str	r3, [r4, #52]	; 0x34
    2bb8:	2224      	movs	r2, #36	; 0x24
    2bba:	89a3      	ldrh	r3, [r4, #12]
    2bbc:	4393      	bics	r3, r2
    2bbe:	81a3      	strh	r3, [r4, #12]
    2bc0:	2300      	movs	r3, #0
    2bc2:	6063      	str	r3, [r4, #4]
    2bc4:	6923      	ldr	r3, [r4, #16]
    2bc6:	6023      	str	r3, [r4, #0]
    2bc8:	2308      	movs	r3, #8
    2bca:	89a2      	ldrh	r2, [r4, #12]
    2bcc:	4313      	orrs	r3, r2
    2bce:	81a3      	strh	r3, [r4, #12]
    2bd0:	6923      	ldr	r3, [r4, #16]
    2bd2:	2b00      	cmp	r3, #0
    2bd4:	d10b      	bne.n	2bee <__swsetup_r+0xa6>
    2bd6:	21a0      	movs	r1, #160	; 0xa0
    2bd8:	2280      	movs	r2, #128	; 0x80
    2bda:	89a3      	ldrh	r3, [r4, #12]
    2bdc:	0089      	lsls	r1, r1, #2
    2bde:	0092      	lsls	r2, r2, #2
    2be0:	400b      	ands	r3, r1
    2be2:	4293      	cmp	r3, r2
    2be4:	d003      	beq.n	2bee <__swsetup_r+0xa6>
    2be6:	0021      	movs	r1, r4
    2be8:	0030      	movs	r0, r6
    2bea:	f000 f9d9 	bl	2fa0 <__smakebuf_r>
    2bee:	2301      	movs	r3, #1
    2bf0:	89a2      	ldrh	r2, [r4, #12]
    2bf2:	4013      	ands	r3, r2
    2bf4:	d011      	beq.n	2c1a <__swsetup_r+0xd2>
    2bf6:	2300      	movs	r3, #0
    2bf8:	60a3      	str	r3, [r4, #8]
    2bfa:	6963      	ldr	r3, [r4, #20]
    2bfc:	425b      	negs	r3, r3
    2bfe:	61a3      	str	r3, [r4, #24]
    2c00:	2000      	movs	r0, #0
    2c02:	6923      	ldr	r3, [r4, #16]
    2c04:	4283      	cmp	r3, r0
    2c06:	d1be      	bne.n	2b86 <__swsetup_r+0x3e>
    2c08:	230c      	movs	r3, #12
    2c0a:	5ee2      	ldrsh	r2, [r4, r3]
    2c0c:	0613      	lsls	r3, r2, #24
    2c0e:	d5ba      	bpl.n	2b86 <__swsetup_r+0x3e>
    2c10:	2340      	movs	r3, #64	; 0x40
    2c12:	4313      	orrs	r3, r2
    2c14:	81a3      	strh	r3, [r4, #12]
    2c16:	3801      	subs	r0, #1
    2c18:	e7b5      	b.n	2b86 <__swsetup_r+0x3e>
    2c1a:	0792      	lsls	r2, r2, #30
    2c1c:	d400      	bmi.n	2c20 <__swsetup_r+0xd8>
    2c1e:	6963      	ldr	r3, [r4, #20]
    2c20:	60a3      	str	r3, [r4, #8]
    2c22:	e7ed      	b.n	2c00 <__swsetup_r+0xb8>
    2c24:	2000007c 	.word	0x2000007c
    2c28:	00003c84 	.word	0x00003c84
    2c2c:	00003ca4 	.word	0x00003ca4
    2c30:	00003c64 	.word	0x00003c64

00002c34 <__sflush_r>:
    2c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2c36:	898a      	ldrh	r2, [r1, #12]
    2c38:	0005      	movs	r5, r0
    2c3a:	000c      	movs	r4, r1
    2c3c:	0713      	lsls	r3, r2, #28
    2c3e:	d460      	bmi.n	2d02 <__sflush_r+0xce>
    2c40:	684b      	ldr	r3, [r1, #4]
    2c42:	2b00      	cmp	r3, #0
    2c44:	dc04      	bgt.n	2c50 <__sflush_r+0x1c>
    2c46:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2c48:	2b00      	cmp	r3, #0
    2c4a:	dc01      	bgt.n	2c50 <__sflush_r+0x1c>
    2c4c:	2000      	movs	r0, #0
    2c4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2c50:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2c52:	2f00      	cmp	r7, #0
    2c54:	d0fa      	beq.n	2c4c <__sflush_r+0x18>
    2c56:	2300      	movs	r3, #0
    2c58:	682e      	ldr	r6, [r5, #0]
    2c5a:	602b      	str	r3, [r5, #0]
    2c5c:	2380      	movs	r3, #128	; 0x80
    2c5e:	015b      	lsls	r3, r3, #5
    2c60:	401a      	ands	r2, r3
    2c62:	d034      	beq.n	2cce <__sflush_r+0x9a>
    2c64:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2c66:	89a3      	ldrh	r3, [r4, #12]
    2c68:	075b      	lsls	r3, r3, #29
    2c6a:	d506      	bpl.n	2c7a <__sflush_r+0x46>
    2c6c:	6863      	ldr	r3, [r4, #4]
    2c6e:	1ac0      	subs	r0, r0, r3
    2c70:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2c72:	2b00      	cmp	r3, #0
    2c74:	d001      	beq.n	2c7a <__sflush_r+0x46>
    2c76:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2c78:	1ac0      	subs	r0, r0, r3
    2c7a:	0002      	movs	r2, r0
    2c7c:	6a21      	ldr	r1, [r4, #32]
    2c7e:	2300      	movs	r3, #0
    2c80:	0028      	movs	r0, r5
    2c82:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2c84:	47b8      	blx	r7
    2c86:	89a1      	ldrh	r1, [r4, #12]
    2c88:	1c43      	adds	r3, r0, #1
    2c8a:	d106      	bne.n	2c9a <__sflush_r+0x66>
    2c8c:	682b      	ldr	r3, [r5, #0]
    2c8e:	2b1d      	cmp	r3, #29
    2c90:	d831      	bhi.n	2cf6 <__sflush_r+0xc2>
    2c92:	4a2c      	ldr	r2, [pc, #176]	; (2d44 <__sflush_r+0x110>)
    2c94:	40da      	lsrs	r2, r3
    2c96:	07d3      	lsls	r3, r2, #31
    2c98:	d52d      	bpl.n	2cf6 <__sflush_r+0xc2>
    2c9a:	2300      	movs	r3, #0
    2c9c:	6063      	str	r3, [r4, #4]
    2c9e:	6923      	ldr	r3, [r4, #16]
    2ca0:	6023      	str	r3, [r4, #0]
    2ca2:	04cb      	lsls	r3, r1, #19
    2ca4:	d505      	bpl.n	2cb2 <__sflush_r+0x7e>
    2ca6:	1c43      	adds	r3, r0, #1
    2ca8:	d102      	bne.n	2cb0 <__sflush_r+0x7c>
    2caa:	682b      	ldr	r3, [r5, #0]
    2cac:	2b00      	cmp	r3, #0
    2cae:	d100      	bne.n	2cb2 <__sflush_r+0x7e>
    2cb0:	6560      	str	r0, [r4, #84]	; 0x54
    2cb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2cb4:	602e      	str	r6, [r5, #0]
    2cb6:	2900      	cmp	r1, #0
    2cb8:	d0c8      	beq.n	2c4c <__sflush_r+0x18>
    2cba:	0023      	movs	r3, r4
    2cbc:	3344      	adds	r3, #68	; 0x44
    2cbe:	4299      	cmp	r1, r3
    2cc0:	d002      	beq.n	2cc8 <__sflush_r+0x94>
    2cc2:	0028      	movs	r0, r5
    2cc4:	f000 f9ba 	bl	303c <_free_r>
    2cc8:	2000      	movs	r0, #0
    2cca:	6360      	str	r0, [r4, #52]	; 0x34
    2ccc:	e7bf      	b.n	2c4e <__sflush_r+0x1a>
    2cce:	2301      	movs	r3, #1
    2cd0:	6a21      	ldr	r1, [r4, #32]
    2cd2:	0028      	movs	r0, r5
    2cd4:	47b8      	blx	r7
    2cd6:	1c43      	adds	r3, r0, #1
    2cd8:	d1c5      	bne.n	2c66 <__sflush_r+0x32>
    2cda:	682b      	ldr	r3, [r5, #0]
    2cdc:	2b00      	cmp	r3, #0
    2cde:	d0c2      	beq.n	2c66 <__sflush_r+0x32>
    2ce0:	2b1d      	cmp	r3, #29
    2ce2:	d001      	beq.n	2ce8 <__sflush_r+0xb4>
    2ce4:	2b16      	cmp	r3, #22
    2ce6:	d101      	bne.n	2cec <__sflush_r+0xb8>
    2ce8:	602e      	str	r6, [r5, #0]
    2cea:	e7af      	b.n	2c4c <__sflush_r+0x18>
    2cec:	2340      	movs	r3, #64	; 0x40
    2cee:	89a2      	ldrh	r2, [r4, #12]
    2cf0:	4313      	orrs	r3, r2
    2cf2:	81a3      	strh	r3, [r4, #12]
    2cf4:	e7ab      	b.n	2c4e <__sflush_r+0x1a>
    2cf6:	2340      	movs	r3, #64	; 0x40
    2cf8:	430b      	orrs	r3, r1
    2cfa:	2001      	movs	r0, #1
    2cfc:	81a3      	strh	r3, [r4, #12]
    2cfe:	4240      	negs	r0, r0
    2d00:	e7a5      	b.n	2c4e <__sflush_r+0x1a>
    2d02:	690f      	ldr	r7, [r1, #16]
    2d04:	2f00      	cmp	r7, #0
    2d06:	d0a1      	beq.n	2c4c <__sflush_r+0x18>
    2d08:	680b      	ldr	r3, [r1, #0]
    2d0a:	600f      	str	r7, [r1, #0]
    2d0c:	1bdb      	subs	r3, r3, r7
    2d0e:	9301      	str	r3, [sp, #4]
    2d10:	2300      	movs	r3, #0
    2d12:	0792      	lsls	r2, r2, #30
    2d14:	d100      	bne.n	2d18 <__sflush_r+0xe4>
    2d16:	694b      	ldr	r3, [r1, #20]
    2d18:	60a3      	str	r3, [r4, #8]
    2d1a:	9b01      	ldr	r3, [sp, #4]
    2d1c:	2b00      	cmp	r3, #0
    2d1e:	dc00      	bgt.n	2d22 <__sflush_r+0xee>
    2d20:	e794      	b.n	2c4c <__sflush_r+0x18>
    2d22:	9b01      	ldr	r3, [sp, #4]
    2d24:	003a      	movs	r2, r7
    2d26:	6a21      	ldr	r1, [r4, #32]
    2d28:	0028      	movs	r0, r5
    2d2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2d2c:	47b0      	blx	r6
    2d2e:	2800      	cmp	r0, #0
    2d30:	dc03      	bgt.n	2d3a <__sflush_r+0x106>
    2d32:	2340      	movs	r3, #64	; 0x40
    2d34:	89a2      	ldrh	r2, [r4, #12]
    2d36:	4313      	orrs	r3, r2
    2d38:	e7df      	b.n	2cfa <__sflush_r+0xc6>
    2d3a:	9b01      	ldr	r3, [sp, #4]
    2d3c:	183f      	adds	r7, r7, r0
    2d3e:	1a1b      	subs	r3, r3, r0
    2d40:	9301      	str	r3, [sp, #4]
    2d42:	e7ea      	b.n	2d1a <__sflush_r+0xe6>
    2d44:	20400001 	.word	0x20400001

00002d48 <_fflush_r>:
    2d48:	690b      	ldr	r3, [r1, #16]
    2d4a:	b570      	push	{r4, r5, r6, lr}
    2d4c:	0005      	movs	r5, r0
    2d4e:	000c      	movs	r4, r1
    2d50:	2b00      	cmp	r3, #0
    2d52:	d101      	bne.n	2d58 <_fflush_r+0x10>
    2d54:	2000      	movs	r0, #0
    2d56:	bd70      	pop	{r4, r5, r6, pc}
    2d58:	2800      	cmp	r0, #0
    2d5a:	d004      	beq.n	2d66 <_fflush_r+0x1e>
    2d5c:	6983      	ldr	r3, [r0, #24]
    2d5e:	2b00      	cmp	r3, #0
    2d60:	d101      	bne.n	2d66 <_fflush_r+0x1e>
    2d62:	f000 f85f 	bl	2e24 <__sinit>
    2d66:	4b0b      	ldr	r3, [pc, #44]	; (2d94 <_fflush_r+0x4c>)
    2d68:	429c      	cmp	r4, r3
    2d6a:	d109      	bne.n	2d80 <_fflush_r+0x38>
    2d6c:	686c      	ldr	r4, [r5, #4]
    2d6e:	220c      	movs	r2, #12
    2d70:	5ea3      	ldrsh	r3, [r4, r2]
    2d72:	2b00      	cmp	r3, #0
    2d74:	d0ee      	beq.n	2d54 <_fflush_r+0xc>
    2d76:	0021      	movs	r1, r4
    2d78:	0028      	movs	r0, r5
    2d7a:	f7ff ff5b 	bl	2c34 <__sflush_r>
    2d7e:	e7ea      	b.n	2d56 <_fflush_r+0xe>
    2d80:	4b05      	ldr	r3, [pc, #20]	; (2d98 <_fflush_r+0x50>)
    2d82:	429c      	cmp	r4, r3
    2d84:	d101      	bne.n	2d8a <_fflush_r+0x42>
    2d86:	68ac      	ldr	r4, [r5, #8]
    2d88:	e7f1      	b.n	2d6e <_fflush_r+0x26>
    2d8a:	4b04      	ldr	r3, [pc, #16]	; (2d9c <_fflush_r+0x54>)
    2d8c:	429c      	cmp	r4, r3
    2d8e:	d1ee      	bne.n	2d6e <_fflush_r+0x26>
    2d90:	68ec      	ldr	r4, [r5, #12]
    2d92:	e7ec      	b.n	2d6e <_fflush_r+0x26>
    2d94:	00003c84 	.word	0x00003c84
    2d98:	00003ca4 	.word	0x00003ca4
    2d9c:	00003c64 	.word	0x00003c64

00002da0 <_cleanup_r>:
    2da0:	b510      	push	{r4, lr}
    2da2:	4902      	ldr	r1, [pc, #8]	; (2dac <_cleanup_r+0xc>)
    2da4:	f000 f8b2 	bl	2f0c <_fwalk_reent>
    2da8:	bd10      	pop	{r4, pc}
    2daa:	46c0      	nop			; (mov r8, r8)
    2dac:	00002d49 	.word	0x00002d49

00002db0 <std.isra.0>:
    2db0:	2300      	movs	r3, #0
    2db2:	b510      	push	{r4, lr}
    2db4:	0004      	movs	r4, r0
    2db6:	6003      	str	r3, [r0, #0]
    2db8:	6043      	str	r3, [r0, #4]
    2dba:	6083      	str	r3, [r0, #8]
    2dbc:	8181      	strh	r1, [r0, #12]
    2dbe:	6643      	str	r3, [r0, #100]	; 0x64
    2dc0:	81c2      	strh	r2, [r0, #14]
    2dc2:	6103      	str	r3, [r0, #16]
    2dc4:	6143      	str	r3, [r0, #20]
    2dc6:	6183      	str	r3, [r0, #24]
    2dc8:	0019      	movs	r1, r3
    2dca:	2208      	movs	r2, #8
    2dcc:	305c      	adds	r0, #92	; 0x5c
    2dce:	f7ff fd8d 	bl	28ec <memset>
    2dd2:	4b05      	ldr	r3, [pc, #20]	; (2de8 <std.isra.0+0x38>)
    2dd4:	6224      	str	r4, [r4, #32]
    2dd6:	6263      	str	r3, [r4, #36]	; 0x24
    2dd8:	4b04      	ldr	r3, [pc, #16]	; (2dec <std.isra.0+0x3c>)
    2dda:	62a3      	str	r3, [r4, #40]	; 0x28
    2ddc:	4b04      	ldr	r3, [pc, #16]	; (2df0 <std.isra.0+0x40>)
    2dde:	62e3      	str	r3, [r4, #44]	; 0x2c
    2de0:	4b04      	ldr	r3, [pc, #16]	; (2df4 <std.isra.0+0x44>)
    2de2:	6323      	str	r3, [r4, #48]	; 0x30
    2de4:	bd10      	pop	{r4, pc}
    2de6:	46c0      	nop			; (mov r8, r8)
    2de8:	00003749 	.word	0x00003749
    2dec:	00003771 	.word	0x00003771
    2df0:	000037a9 	.word	0x000037a9
    2df4:	000037d5 	.word	0x000037d5

00002df8 <__sfmoreglue>:
    2df8:	b570      	push	{r4, r5, r6, lr}
    2dfa:	2568      	movs	r5, #104	; 0x68
    2dfc:	1e4a      	subs	r2, r1, #1
    2dfe:	4355      	muls	r5, r2
    2e00:	000e      	movs	r6, r1
    2e02:	0029      	movs	r1, r5
    2e04:	3174      	adds	r1, #116	; 0x74
    2e06:	f000 f963 	bl	30d0 <_malloc_r>
    2e0a:	1e04      	subs	r4, r0, #0
    2e0c:	d008      	beq.n	2e20 <__sfmoreglue+0x28>
    2e0e:	2100      	movs	r1, #0
    2e10:	002a      	movs	r2, r5
    2e12:	6001      	str	r1, [r0, #0]
    2e14:	6046      	str	r6, [r0, #4]
    2e16:	300c      	adds	r0, #12
    2e18:	60a0      	str	r0, [r4, #8]
    2e1a:	3268      	adds	r2, #104	; 0x68
    2e1c:	f7ff fd66 	bl	28ec <memset>
    2e20:	0020      	movs	r0, r4
    2e22:	bd70      	pop	{r4, r5, r6, pc}

00002e24 <__sinit>:
    2e24:	6983      	ldr	r3, [r0, #24]
    2e26:	b513      	push	{r0, r1, r4, lr}
    2e28:	0004      	movs	r4, r0
    2e2a:	2b00      	cmp	r3, #0
    2e2c:	d128      	bne.n	2e80 <__sinit+0x5c>
    2e2e:	6483      	str	r3, [r0, #72]	; 0x48
    2e30:	64c3      	str	r3, [r0, #76]	; 0x4c
    2e32:	6503      	str	r3, [r0, #80]	; 0x50
    2e34:	4b13      	ldr	r3, [pc, #76]	; (2e84 <__sinit+0x60>)
    2e36:	4a14      	ldr	r2, [pc, #80]	; (2e88 <__sinit+0x64>)
    2e38:	681b      	ldr	r3, [r3, #0]
    2e3a:	6282      	str	r2, [r0, #40]	; 0x28
    2e3c:	9301      	str	r3, [sp, #4]
    2e3e:	4298      	cmp	r0, r3
    2e40:	d101      	bne.n	2e46 <__sinit+0x22>
    2e42:	2301      	movs	r3, #1
    2e44:	6183      	str	r3, [r0, #24]
    2e46:	0020      	movs	r0, r4
    2e48:	f000 f820 	bl	2e8c <__sfp>
    2e4c:	6060      	str	r0, [r4, #4]
    2e4e:	0020      	movs	r0, r4
    2e50:	f000 f81c 	bl	2e8c <__sfp>
    2e54:	60a0      	str	r0, [r4, #8]
    2e56:	0020      	movs	r0, r4
    2e58:	f000 f818 	bl	2e8c <__sfp>
    2e5c:	2200      	movs	r2, #0
    2e5e:	60e0      	str	r0, [r4, #12]
    2e60:	2104      	movs	r1, #4
    2e62:	6860      	ldr	r0, [r4, #4]
    2e64:	f7ff ffa4 	bl	2db0 <std.isra.0>
    2e68:	2201      	movs	r2, #1
    2e6a:	2109      	movs	r1, #9
    2e6c:	68a0      	ldr	r0, [r4, #8]
    2e6e:	f7ff ff9f 	bl	2db0 <std.isra.0>
    2e72:	2202      	movs	r2, #2
    2e74:	2112      	movs	r1, #18
    2e76:	68e0      	ldr	r0, [r4, #12]
    2e78:	f7ff ff9a 	bl	2db0 <std.isra.0>
    2e7c:	2301      	movs	r3, #1
    2e7e:	61a3      	str	r3, [r4, #24]
    2e80:	bd13      	pop	{r0, r1, r4, pc}
    2e82:	46c0      	nop			; (mov r8, r8)
    2e84:	00003c60 	.word	0x00003c60
    2e88:	00002da1 	.word	0x00002da1

00002e8c <__sfp>:
    2e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e8e:	4b1e      	ldr	r3, [pc, #120]	; (2f08 <__sfp+0x7c>)
    2e90:	0007      	movs	r7, r0
    2e92:	681e      	ldr	r6, [r3, #0]
    2e94:	69b3      	ldr	r3, [r6, #24]
    2e96:	2b00      	cmp	r3, #0
    2e98:	d102      	bne.n	2ea0 <__sfp+0x14>
    2e9a:	0030      	movs	r0, r6
    2e9c:	f7ff ffc2 	bl	2e24 <__sinit>
    2ea0:	3648      	adds	r6, #72	; 0x48
    2ea2:	68b4      	ldr	r4, [r6, #8]
    2ea4:	6873      	ldr	r3, [r6, #4]
    2ea6:	3b01      	subs	r3, #1
    2ea8:	d504      	bpl.n	2eb4 <__sfp+0x28>
    2eaa:	6833      	ldr	r3, [r6, #0]
    2eac:	2b00      	cmp	r3, #0
    2eae:	d007      	beq.n	2ec0 <__sfp+0x34>
    2eb0:	6836      	ldr	r6, [r6, #0]
    2eb2:	e7f6      	b.n	2ea2 <__sfp+0x16>
    2eb4:	220c      	movs	r2, #12
    2eb6:	5ea5      	ldrsh	r5, [r4, r2]
    2eb8:	2d00      	cmp	r5, #0
    2eba:	d00d      	beq.n	2ed8 <__sfp+0x4c>
    2ebc:	3468      	adds	r4, #104	; 0x68
    2ebe:	e7f2      	b.n	2ea6 <__sfp+0x1a>
    2ec0:	2104      	movs	r1, #4
    2ec2:	0038      	movs	r0, r7
    2ec4:	f7ff ff98 	bl	2df8 <__sfmoreglue>
    2ec8:	6030      	str	r0, [r6, #0]
    2eca:	2800      	cmp	r0, #0
    2ecc:	d1f0      	bne.n	2eb0 <__sfp+0x24>
    2ece:	230c      	movs	r3, #12
    2ed0:	0004      	movs	r4, r0
    2ed2:	603b      	str	r3, [r7, #0]
    2ed4:	0020      	movs	r0, r4
    2ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ed8:	2301      	movs	r3, #1
    2eda:	0020      	movs	r0, r4
    2edc:	425b      	negs	r3, r3
    2ede:	81e3      	strh	r3, [r4, #14]
    2ee0:	3302      	adds	r3, #2
    2ee2:	81a3      	strh	r3, [r4, #12]
    2ee4:	6665      	str	r5, [r4, #100]	; 0x64
    2ee6:	6025      	str	r5, [r4, #0]
    2ee8:	60a5      	str	r5, [r4, #8]
    2eea:	6065      	str	r5, [r4, #4]
    2eec:	6125      	str	r5, [r4, #16]
    2eee:	6165      	str	r5, [r4, #20]
    2ef0:	61a5      	str	r5, [r4, #24]
    2ef2:	2208      	movs	r2, #8
    2ef4:	0029      	movs	r1, r5
    2ef6:	305c      	adds	r0, #92	; 0x5c
    2ef8:	f7ff fcf8 	bl	28ec <memset>
    2efc:	6365      	str	r5, [r4, #52]	; 0x34
    2efe:	63a5      	str	r5, [r4, #56]	; 0x38
    2f00:	64a5      	str	r5, [r4, #72]	; 0x48
    2f02:	64e5      	str	r5, [r4, #76]	; 0x4c
    2f04:	e7e6      	b.n	2ed4 <__sfp+0x48>
    2f06:	46c0      	nop			; (mov r8, r8)
    2f08:	00003c60 	.word	0x00003c60

00002f0c <_fwalk_reent>:
    2f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2f0e:	0004      	movs	r4, r0
    2f10:	0007      	movs	r7, r0
    2f12:	2600      	movs	r6, #0
    2f14:	9101      	str	r1, [sp, #4]
    2f16:	3448      	adds	r4, #72	; 0x48
    2f18:	2c00      	cmp	r4, #0
    2f1a:	d101      	bne.n	2f20 <_fwalk_reent+0x14>
    2f1c:	0030      	movs	r0, r6
    2f1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2f20:	6863      	ldr	r3, [r4, #4]
    2f22:	68a5      	ldr	r5, [r4, #8]
    2f24:	9300      	str	r3, [sp, #0]
    2f26:	9b00      	ldr	r3, [sp, #0]
    2f28:	3b01      	subs	r3, #1
    2f2a:	9300      	str	r3, [sp, #0]
    2f2c:	d501      	bpl.n	2f32 <_fwalk_reent+0x26>
    2f2e:	6824      	ldr	r4, [r4, #0]
    2f30:	e7f2      	b.n	2f18 <_fwalk_reent+0xc>
    2f32:	89ab      	ldrh	r3, [r5, #12]
    2f34:	2b01      	cmp	r3, #1
    2f36:	d908      	bls.n	2f4a <_fwalk_reent+0x3e>
    2f38:	220e      	movs	r2, #14
    2f3a:	5eab      	ldrsh	r3, [r5, r2]
    2f3c:	3301      	adds	r3, #1
    2f3e:	d004      	beq.n	2f4a <_fwalk_reent+0x3e>
    2f40:	0029      	movs	r1, r5
    2f42:	0038      	movs	r0, r7
    2f44:	9b01      	ldr	r3, [sp, #4]
    2f46:	4798      	blx	r3
    2f48:	4306      	orrs	r6, r0
    2f4a:	3568      	adds	r5, #104	; 0x68
    2f4c:	e7eb      	b.n	2f26 <_fwalk_reent+0x1a>
	...

00002f50 <__swhatbuf_r>:
    2f50:	b570      	push	{r4, r5, r6, lr}
    2f52:	000e      	movs	r6, r1
    2f54:	001d      	movs	r5, r3
    2f56:	230e      	movs	r3, #14
    2f58:	5ec9      	ldrsh	r1, [r1, r3]
    2f5a:	b090      	sub	sp, #64	; 0x40
    2f5c:	0014      	movs	r4, r2
    2f5e:	2900      	cmp	r1, #0
    2f60:	da07      	bge.n	2f72 <__swhatbuf_r+0x22>
    2f62:	2300      	movs	r3, #0
    2f64:	602b      	str	r3, [r5, #0]
    2f66:	89b3      	ldrh	r3, [r6, #12]
    2f68:	061b      	lsls	r3, r3, #24
    2f6a:	d411      	bmi.n	2f90 <__swhatbuf_r+0x40>
    2f6c:	2380      	movs	r3, #128	; 0x80
    2f6e:	00db      	lsls	r3, r3, #3
    2f70:	e00f      	b.n	2f92 <__swhatbuf_r+0x42>
    2f72:	aa01      	add	r2, sp, #4
    2f74:	f000 fc5a 	bl	382c <_fstat_r>
    2f78:	2800      	cmp	r0, #0
    2f7a:	dbf2      	blt.n	2f62 <__swhatbuf_r+0x12>
    2f7c:	22f0      	movs	r2, #240	; 0xf0
    2f7e:	9b02      	ldr	r3, [sp, #8]
    2f80:	0212      	lsls	r2, r2, #8
    2f82:	4013      	ands	r3, r2
    2f84:	4a05      	ldr	r2, [pc, #20]	; (2f9c <__swhatbuf_r+0x4c>)
    2f86:	189b      	adds	r3, r3, r2
    2f88:	425a      	negs	r2, r3
    2f8a:	4153      	adcs	r3, r2
    2f8c:	602b      	str	r3, [r5, #0]
    2f8e:	e7ed      	b.n	2f6c <__swhatbuf_r+0x1c>
    2f90:	2340      	movs	r3, #64	; 0x40
    2f92:	2000      	movs	r0, #0
    2f94:	6023      	str	r3, [r4, #0]
    2f96:	b010      	add	sp, #64	; 0x40
    2f98:	bd70      	pop	{r4, r5, r6, pc}
    2f9a:	46c0      	nop			; (mov r8, r8)
    2f9c:	ffffe000 	.word	0xffffe000

00002fa0 <__smakebuf_r>:
    2fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2fa2:	2602      	movs	r6, #2
    2fa4:	898b      	ldrh	r3, [r1, #12]
    2fa6:	0005      	movs	r5, r0
    2fa8:	000c      	movs	r4, r1
    2faa:	4233      	tst	r3, r6
    2fac:	d006      	beq.n	2fbc <__smakebuf_r+0x1c>
    2fae:	0023      	movs	r3, r4
    2fb0:	3347      	adds	r3, #71	; 0x47
    2fb2:	6023      	str	r3, [r4, #0]
    2fb4:	6123      	str	r3, [r4, #16]
    2fb6:	2301      	movs	r3, #1
    2fb8:	6163      	str	r3, [r4, #20]
    2fba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2fbc:	ab01      	add	r3, sp, #4
    2fbe:	466a      	mov	r2, sp
    2fc0:	f7ff ffc6 	bl	2f50 <__swhatbuf_r>
    2fc4:	9900      	ldr	r1, [sp, #0]
    2fc6:	0007      	movs	r7, r0
    2fc8:	0028      	movs	r0, r5
    2fca:	f000 f881 	bl	30d0 <_malloc_r>
    2fce:	2800      	cmp	r0, #0
    2fd0:	d108      	bne.n	2fe4 <__smakebuf_r+0x44>
    2fd2:	220c      	movs	r2, #12
    2fd4:	5ea3      	ldrsh	r3, [r4, r2]
    2fd6:	059a      	lsls	r2, r3, #22
    2fd8:	d4ef      	bmi.n	2fba <__smakebuf_r+0x1a>
    2fda:	2203      	movs	r2, #3
    2fdc:	4393      	bics	r3, r2
    2fde:	431e      	orrs	r6, r3
    2fe0:	81a6      	strh	r6, [r4, #12]
    2fe2:	e7e4      	b.n	2fae <__smakebuf_r+0xe>
    2fe4:	4b0f      	ldr	r3, [pc, #60]	; (3024 <__smakebuf_r+0x84>)
    2fe6:	62ab      	str	r3, [r5, #40]	; 0x28
    2fe8:	2380      	movs	r3, #128	; 0x80
    2fea:	89a2      	ldrh	r2, [r4, #12]
    2fec:	6020      	str	r0, [r4, #0]
    2fee:	4313      	orrs	r3, r2
    2ff0:	81a3      	strh	r3, [r4, #12]
    2ff2:	9b00      	ldr	r3, [sp, #0]
    2ff4:	6120      	str	r0, [r4, #16]
    2ff6:	6163      	str	r3, [r4, #20]
    2ff8:	9b01      	ldr	r3, [sp, #4]
    2ffa:	2b00      	cmp	r3, #0
    2ffc:	d00d      	beq.n	301a <__smakebuf_r+0x7a>
    2ffe:	230e      	movs	r3, #14
    3000:	5ee1      	ldrsh	r1, [r4, r3]
    3002:	0028      	movs	r0, r5
    3004:	f000 fc24 	bl	3850 <_isatty_r>
    3008:	2800      	cmp	r0, #0
    300a:	d006      	beq.n	301a <__smakebuf_r+0x7a>
    300c:	2203      	movs	r2, #3
    300e:	89a3      	ldrh	r3, [r4, #12]
    3010:	4393      	bics	r3, r2
    3012:	001a      	movs	r2, r3
    3014:	2301      	movs	r3, #1
    3016:	4313      	orrs	r3, r2
    3018:	81a3      	strh	r3, [r4, #12]
    301a:	89a0      	ldrh	r0, [r4, #12]
    301c:	4338      	orrs	r0, r7
    301e:	81a0      	strh	r0, [r4, #12]
    3020:	e7cb      	b.n	2fba <__smakebuf_r+0x1a>
    3022:	46c0      	nop			; (mov r8, r8)
    3024:	00002da1 	.word	0x00002da1

00003028 <malloc>:
    3028:	b510      	push	{r4, lr}
    302a:	4b03      	ldr	r3, [pc, #12]	; (3038 <malloc+0x10>)
    302c:	0001      	movs	r1, r0
    302e:	6818      	ldr	r0, [r3, #0]
    3030:	f000 f84e 	bl	30d0 <_malloc_r>
    3034:	bd10      	pop	{r4, pc}
    3036:	46c0      	nop			; (mov r8, r8)
    3038:	2000007c 	.word	0x2000007c

0000303c <_free_r>:
    303c:	b570      	push	{r4, r5, r6, lr}
    303e:	0005      	movs	r5, r0
    3040:	2900      	cmp	r1, #0
    3042:	d010      	beq.n	3066 <_free_r+0x2a>
    3044:	1f0c      	subs	r4, r1, #4
    3046:	6823      	ldr	r3, [r4, #0]
    3048:	2b00      	cmp	r3, #0
    304a:	da00      	bge.n	304e <_free_r+0x12>
    304c:	18e4      	adds	r4, r4, r3
    304e:	0028      	movs	r0, r5
    3050:	f000 fc2f 	bl	38b2 <__malloc_lock>
    3054:	4a1d      	ldr	r2, [pc, #116]	; (30cc <_free_r+0x90>)
    3056:	6813      	ldr	r3, [r2, #0]
    3058:	2b00      	cmp	r3, #0
    305a:	d105      	bne.n	3068 <_free_r+0x2c>
    305c:	6063      	str	r3, [r4, #4]
    305e:	6014      	str	r4, [r2, #0]
    3060:	0028      	movs	r0, r5
    3062:	f000 fc27 	bl	38b4 <__malloc_unlock>
    3066:	bd70      	pop	{r4, r5, r6, pc}
    3068:	42a3      	cmp	r3, r4
    306a:	d909      	bls.n	3080 <_free_r+0x44>
    306c:	6821      	ldr	r1, [r4, #0]
    306e:	1860      	adds	r0, r4, r1
    3070:	4283      	cmp	r3, r0
    3072:	d1f3      	bne.n	305c <_free_r+0x20>
    3074:	6818      	ldr	r0, [r3, #0]
    3076:	685b      	ldr	r3, [r3, #4]
    3078:	1841      	adds	r1, r0, r1
    307a:	6021      	str	r1, [r4, #0]
    307c:	e7ee      	b.n	305c <_free_r+0x20>
    307e:	0013      	movs	r3, r2
    3080:	685a      	ldr	r2, [r3, #4]
    3082:	2a00      	cmp	r2, #0
    3084:	d001      	beq.n	308a <_free_r+0x4e>
    3086:	42a2      	cmp	r2, r4
    3088:	d9f9      	bls.n	307e <_free_r+0x42>
    308a:	6819      	ldr	r1, [r3, #0]
    308c:	1858      	adds	r0, r3, r1
    308e:	42a0      	cmp	r0, r4
    3090:	d10b      	bne.n	30aa <_free_r+0x6e>
    3092:	6820      	ldr	r0, [r4, #0]
    3094:	1809      	adds	r1, r1, r0
    3096:	1858      	adds	r0, r3, r1
    3098:	6019      	str	r1, [r3, #0]
    309a:	4282      	cmp	r2, r0
    309c:	d1e0      	bne.n	3060 <_free_r+0x24>
    309e:	6810      	ldr	r0, [r2, #0]
    30a0:	6852      	ldr	r2, [r2, #4]
    30a2:	1841      	adds	r1, r0, r1
    30a4:	6019      	str	r1, [r3, #0]
    30a6:	605a      	str	r2, [r3, #4]
    30a8:	e7da      	b.n	3060 <_free_r+0x24>
    30aa:	42a0      	cmp	r0, r4
    30ac:	d902      	bls.n	30b4 <_free_r+0x78>
    30ae:	230c      	movs	r3, #12
    30b0:	602b      	str	r3, [r5, #0]
    30b2:	e7d5      	b.n	3060 <_free_r+0x24>
    30b4:	6821      	ldr	r1, [r4, #0]
    30b6:	1860      	adds	r0, r4, r1
    30b8:	4282      	cmp	r2, r0
    30ba:	d103      	bne.n	30c4 <_free_r+0x88>
    30bc:	6810      	ldr	r0, [r2, #0]
    30be:	6852      	ldr	r2, [r2, #4]
    30c0:	1841      	adds	r1, r0, r1
    30c2:	6021      	str	r1, [r4, #0]
    30c4:	6062      	str	r2, [r4, #4]
    30c6:	605c      	str	r4, [r3, #4]
    30c8:	e7ca      	b.n	3060 <_free_r+0x24>
    30ca:	46c0      	nop			; (mov r8, r8)
    30cc:	20000140 	.word	0x20000140

000030d0 <_malloc_r>:
    30d0:	2303      	movs	r3, #3
    30d2:	b570      	push	{r4, r5, r6, lr}
    30d4:	1ccd      	adds	r5, r1, #3
    30d6:	439d      	bics	r5, r3
    30d8:	3508      	adds	r5, #8
    30da:	0006      	movs	r6, r0
    30dc:	2d0c      	cmp	r5, #12
    30de:	d21e      	bcs.n	311e <_malloc_r+0x4e>
    30e0:	250c      	movs	r5, #12
    30e2:	42a9      	cmp	r1, r5
    30e4:	d81d      	bhi.n	3122 <_malloc_r+0x52>
    30e6:	0030      	movs	r0, r6
    30e8:	f000 fbe3 	bl	38b2 <__malloc_lock>
    30ec:	4a25      	ldr	r2, [pc, #148]	; (3184 <_malloc_r+0xb4>)
    30ee:	6814      	ldr	r4, [r2, #0]
    30f0:	0021      	movs	r1, r4
    30f2:	2900      	cmp	r1, #0
    30f4:	d119      	bne.n	312a <_malloc_r+0x5a>
    30f6:	4c24      	ldr	r4, [pc, #144]	; (3188 <_malloc_r+0xb8>)
    30f8:	6823      	ldr	r3, [r4, #0]
    30fa:	2b00      	cmp	r3, #0
    30fc:	d103      	bne.n	3106 <_malloc_r+0x36>
    30fe:	0030      	movs	r0, r6
    3100:	f000 fb10 	bl	3724 <_sbrk_r>
    3104:	6020      	str	r0, [r4, #0]
    3106:	0029      	movs	r1, r5
    3108:	0030      	movs	r0, r6
    310a:	f000 fb0b 	bl	3724 <_sbrk_r>
    310e:	1c43      	adds	r3, r0, #1
    3110:	d12c      	bne.n	316c <_malloc_r+0x9c>
    3112:	230c      	movs	r3, #12
    3114:	0030      	movs	r0, r6
    3116:	6033      	str	r3, [r6, #0]
    3118:	f000 fbcc 	bl	38b4 <__malloc_unlock>
    311c:	e003      	b.n	3126 <_malloc_r+0x56>
    311e:	2d00      	cmp	r5, #0
    3120:	dadf      	bge.n	30e2 <_malloc_r+0x12>
    3122:	230c      	movs	r3, #12
    3124:	6033      	str	r3, [r6, #0]
    3126:	2000      	movs	r0, #0
    3128:	bd70      	pop	{r4, r5, r6, pc}
    312a:	680b      	ldr	r3, [r1, #0]
    312c:	1b5b      	subs	r3, r3, r5
    312e:	d41a      	bmi.n	3166 <_malloc_r+0x96>
    3130:	2b0b      	cmp	r3, #11
    3132:	d903      	bls.n	313c <_malloc_r+0x6c>
    3134:	600b      	str	r3, [r1, #0]
    3136:	18cc      	adds	r4, r1, r3
    3138:	6025      	str	r5, [r4, #0]
    313a:	e003      	b.n	3144 <_malloc_r+0x74>
    313c:	428c      	cmp	r4, r1
    313e:	d10e      	bne.n	315e <_malloc_r+0x8e>
    3140:	6863      	ldr	r3, [r4, #4]
    3142:	6013      	str	r3, [r2, #0]
    3144:	0030      	movs	r0, r6
    3146:	f000 fbb5 	bl	38b4 <__malloc_unlock>
    314a:	0020      	movs	r0, r4
    314c:	2207      	movs	r2, #7
    314e:	300b      	adds	r0, #11
    3150:	1d23      	adds	r3, r4, #4
    3152:	4390      	bics	r0, r2
    3154:	1ac3      	subs	r3, r0, r3
    3156:	d0e7      	beq.n	3128 <_malloc_r+0x58>
    3158:	425a      	negs	r2, r3
    315a:	50e2      	str	r2, [r4, r3]
    315c:	e7e4      	b.n	3128 <_malloc_r+0x58>
    315e:	684b      	ldr	r3, [r1, #4]
    3160:	6063      	str	r3, [r4, #4]
    3162:	000c      	movs	r4, r1
    3164:	e7ee      	b.n	3144 <_malloc_r+0x74>
    3166:	000c      	movs	r4, r1
    3168:	6849      	ldr	r1, [r1, #4]
    316a:	e7c2      	b.n	30f2 <_malloc_r+0x22>
    316c:	2303      	movs	r3, #3
    316e:	1cc4      	adds	r4, r0, #3
    3170:	439c      	bics	r4, r3
    3172:	42a0      	cmp	r0, r4
    3174:	d0e0      	beq.n	3138 <_malloc_r+0x68>
    3176:	1a21      	subs	r1, r4, r0
    3178:	0030      	movs	r0, r6
    317a:	f000 fad3 	bl	3724 <_sbrk_r>
    317e:	1c43      	adds	r3, r0, #1
    3180:	d1da      	bne.n	3138 <_malloc_r+0x68>
    3182:	e7c6      	b.n	3112 <_malloc_r+0x42>
    3184:	20000140 	.word	0x20000140
    3188:	20000144 	.word	0x20000144

0000318c <__sfputc_r>:
    318c:	6893      	ldr	r3, [r2, #8]
    318e:	b510      	push	{r4, lr}
    3190:	3b01      	subs	r3, #1
    3192:	6093      	str	r3, [r2, #8]
    3194:	2b00      	cmp	r3, #0
    3196:	da05      	bge.n	31a4 <__sfputc_r+0x18>
    3198:	6994      	ldr	r4, [r2, #24]
    319a:	42a3      	cmp	r3, r4
    319c:	db08      	blt.n	31b0 <__sfputc_r+0x24>
    319e:	b2cb      	uxtb	r3, r1
    31a0:	2b0a      	cmp	r3, #10
    31a2:	d005      	beq.n	31b0 <__sfputc_r+0x24>
    31a4:	6813      	ldr	r3, [r2, #0]
    31a6:	1c58      	adds	r0, r3, #1
    31a8:	6010      	str	r0, [r2, #0]
    31aa:	7019      	strb	r1, [r3, #0]
    31ac:	b2c8      	uxtb	r0, r1
    31ae:	bd10      	pop	{r4, pc}
    31b0:	f7ff fc74 	bl	2a9c <__swbuf_r>
    31b4:	e7fb      	b.n	31ae <__sfputc_r+0x22>

000031b6 <__sfputs_r>:
    31b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31b8:	0006      	movs	r6, r0
    31ba:	000f      	movs	r7, r1
    31bc:	0014      	movs	r4, r2
    31be:	18d5      	adds	r5, r2, r3
    31c0:	42ac      	cmp	r4, r5
    31c2:	d101      	bne.n	31c8 <__sfputs_r+0x12>
    31c4:	2000      	movs	r0, #0
    31c6:	e007      	b.n	31d8 <__sfputs_r+0x22>
    31c8:	7821      	ldrb	r1, [r4, #0]
    31ca:	003a      	movs	r2, r7
    31cc:	0030      	movs	r0, r6
    31ce:	f7ff ffdd 	bl	318c <__sfputc_r>
    31d2:	3401      	adds	r4, #1
    31d4:	1c43      	adds	r3, r0, #1
    31d6:	d1f3      	bne.n	31c0 <__sfputs_r+0xa>
    31d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000031dc <_vfiprintf_r>:
    31dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    31de:	b09f      	sub	sp, #124	; 0x7c
    31e0:	0006      	movs	r6, r0
    31e2:	000f      	movs	r7, r1
    31e4:	0014      	movs	r4, r2
    31e6:	9305      	str	r3, [sp, #20]
    31e8:	2800      	cmp	r0, #0
    31ea:	d004      	beq.n	31f6 <_vfiprintf_r+0x1a>
    31ec:	6983      	ldr	r3, [r0, #24]
    31ee:	2b00      	cmp	r3, #0
    31f0:	d101      	bne.n	31f6 <_vfiprintf_r+0x1a>
    31f2:	f7ff fe17 	bl	2e24 <__sinit>
    31f6:	4b7f      	ldr	r3, [pc, #508]	; (33f4 <_vfiprintf_r+0x218>)
    31f8:	429f      	cmp	r7, r3
    31fa:	d15c      	bne.n	32b6 <_vfiprintf_r+0xda>
    31fc:	6877      	ldr	r7, [r6, #4]
    31fe:	89bb      	ldrh	r3, [r7, #12]
    3200:	071b      	lsls	r3, r3, #28
    3202:	d562      	bpl.n	32ca <_vfiprintf_r+0xee>
    3204:	693b      	ldr	r3, [r7, #16]
    3206:	2b00      	cmp	r3, #0
    3208:	d05f      	beq.n	32ca <_vfiprintf_r+0xee>
    320a:	2300      	movs	r3, #0
    320c:	ad06      	add	r5, sp, #24
    320e:	616b      	str	r3, [r5, #20]
    3210:	3320      	adds	r3, #32
    3212:	766b      	strb	r3, [r5, #25]
    3214:	3310      	adds	r3, #16
    3216:	76ab      	strb	r3, [r5, #26]
    3218:	9402      	str	r4, [sp, #8]
    321a:	9c02      	ldr	r4, [sp, #8]
    321c:	7823      	ldrb	r3, [r4, #0]
    321e:	2b00      	cmp	r3, #0
    3220:	d15d      	bne.n	32de <_vfiprintf_r+0x102>
    3222:	9b02      	ldr	r3, [sp, #8]
    3224:	1ae3      	subs	r3, r4, r3
    3226:	9304      	str	r3, [sp, #16]
    3228:	d00d      	beq.n	3246 <_vfiprintf_r+0x6a>
    322a:	9b04      	ldr	r3, [sp, #16]
    322c:	9a02      	ldr	r2, [sp, #8]
    322e:	0039      	movs	r1, r7
    3230:	0030      	movs	r0, r6
    3232:	f7ff ffc0 	bl	31b6 <__sfputs_r>
    3236:	1c43      	adds	r3, r0, #1
    3238:	d100      	bne.n	323c <_vfiprintf_r+0x60>
    323a:	e0cc      	b.n	33d6 <_vfiprintf_r+0x1fa>
    323c:	696a      	ldr	r2, [r5, #20]
    323e:	9b04      	ldr	r3, [sp, #16]
    3240:	4694      	mov	ip, r2
    3242:	4463      	add	r3, ip
    3244:	616b      	str	r3, [r5, #20]
    3246:	7823      	ldrb	r3, [r4, #0]
    3248:	2b00      	cmp	r3, #0
    324a:	d100      	bne.n	324e <_vfiprintf_r+0x72>
    324c:	e0c3      	b.n	33d6 <_vfiprintf_r+0x1fa>
    324e:	2201      	movs	r2, #1
    3250:	2300      	movs	r3, #0
    3252:	4252      	negs	r2, r2
    3254:	606a      	str	r2, [r5, #4]
    3256:	a902      	add	r1, sp, #8
    3258:	3254      	adds	r2, #84	; 0x54
    325a:	1852      	adds	r2, r2, r1
    325c:	3401      	adds	r4, #1
    325e:	602b      	str	r3, [r5, #0]
    3260:	60eb      	str	r3, [r5, #12]
    3262:	60ab      	str	r3, [r5, #8]
    3264:	7013      	strb	r3, [r2, #0]
    3266:	65ab      	str	r3, [r5, #88]	; 0x58
    3268:	7821      	ldrb	r1, [r4, #0]
    326a:	2205      	movs	r2, #5
    326c:	4862      	ldr	r0, [pc, #392]	; (33f8 <_vfiprintf_r+0x21c>)
    326e:	f000 fb15 	bl	389c <memchr>
    3272:	1c63      	adds	r3, r4, #1
    3274:	469c      	mov	ip, r3
    3276:	2800      	cmp	r0, #0
    3278:	d135      	bne.n	32e6 <_vfiprintf_r+0x10a>
    327a:	6829      	ldr	r1, [r5, #0]
    327c:	06cb      	lsls	r3, r1, #27
    327e:	d504      	bpl.n	328a <_vfiprintf_r+0xae>
    3280:	2353      	movs	r3, #83	; 0x53
    3282:	aa02      	add	r2, sp, #8
    3284:	3020      	adds	r0, #32
    3286:	189b      	adds	r3, r3, r2
    3288:	7018      	strb	r0, [r3, #0]
    328a:	070b      	lsls	r3, r1, #28
    328c:	d504      	bpl.n	3298 <_vfiprintf_r+0xbc>
    328e:	2353      	movs	r3, #83	; 0x53
    3290:	202b      	movs	r0, #43	; 0x2b
    3292:	aa02      	add	r2, sp, #8
    3294:	189b      	adds	r3, r3, r2
    3296:	7018      	strb	r0, [r3, #0]
    3298:	7823      	ldrb	r3, [r4, #0]
    329a:	2b2a      	cmp	r3, #42	; 0x2a
    329c:	d02c      	beq.n	32f8 <_vfiprintf_r+0x11c>
    329e:	2000      	movs	r0, #0
    32a0:	210a      	movs	r1, #10
    32a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    32a4:	7822      	ldrb	r2, [r4, #0]
    32a6:	3a30      	subs	r2, #48	; 0x30
    32a8:	2a09      	cmp	r2, #9
    32aa:	d800      	bhi.n	32ae <_vfiprintf_r+0xd2>
    32ac:	e06b      	b.n	3386 <_vfiprintf_r+0x1aa>
    32ae:	2800      	cmp	r0, #0
    32b0:	d02a      	beq.n	3308 <_vfiprintf_r+0x12c>
    32b2:	9309      	str	r3, [sp, #36]	; 0x24
    32b4:	e028      	b.n	3308 <_vfiprintf_r+0x12c>
    32b6:	4b51      	ldr	r3, [pc, #324]	; (33fc <_vfiprintf_r+0x220>)
    32b8:	429f      	cmp	r7, r3
    32ba:	d101      	bne.n	32c0 <_vfiprintf_r+0xe4>
    32bc:	68b7      	ldr	r7, [r6, #8]
    32be:	e79e      	b.n	31fe <_vfiprintf_r+0x22>
    32c0:	4b4f      	ldr	r3, [pc, #316]	; (3400 <_vfiprintf_r+0x224>)
    32c2:	429f      	cmp	r7, r3
    32c4:	d19b      	bne.n	31fe <_vfiprintf_r+0x22>
    32c6:	68f7      	ldr	r7, [r6, #12]
    32c8:	e799      	b.n	31fe <_vfiprintf_r+0x22>
    32ca:	0039      	movs	r1, r7
    32cc:	0030      	movs	r0, r6
    32ce:	f7ff fc3b 	bl	2b48 <__swsetup_r>
    32d2:	2800      	cmp	r0, #0
    32d4:	d099      	beq.n	320a <_vfiprintf_r+0x2e>
    32d6:	2001      	movs	r0, #1
    32d8:	4240      	negs	r0, r0
    32da:	b01f      	add	sp, #124	; 0x7c
    32dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32de:	2b25      	cmp	r3, #37	; 0x25
    32e0:	d09f      	beq.n	3222 <_vfiprintf_r+0x46>
    32e2:	3401      	adds	r4, #1
    32e4:	e79a      	b.n	321c <_vfiprintf_r+0x40>
    32e6:	4b44      	ldr	r3, [pc, #272]	; (33f8 <_vfiprintf_r+0x21c>)
    32e8:	6829      	ldr	r1, [r5, #0]
    32ea:	1ac0      	subs	r0, r0, r3
    32ec:	2301      	movs	r3, #1
    32ee:	4083      	lsls	r3, r0
    32f0:	430b      	orrs	r3, r1
    32f2:	602b      	str	r3, [r5, #0]
    32f4:	4664      	mov	r4, ip
    32f6:	e7b7      	b.n	3268 <_vfiprintf_r+0x8c>
    32f8:	9b05      	ldr	r3, [sp, #20]
    32fa:	1d18      	adds	r0, r3, #4
    32fc:	681b      	ldr	r3, [r3, #0]
    32fe:	9005      	str	r0, [sp, #20]
    3300:	2b00      	cmp	r3, #0
    3302:	db3a      	blt.n	337a <_vfiprintf_r+0x19e>
    3304:	9309      	str	r3, [sp, #36]	; 0x24
    3306:	4664      	mov	r4, ip
    3308:	7823      	ldrb	r3, [r4, #0]
    330a:	2b2e      	cmp	r3, #46	; 0x2e
    330c:	d10b      	bne.n	3326 <_vfiprintf_r+0x14a>
    330e:	7863      	ldrb	r3, [r4, #1]
    3310:	1c62      	adds	r2, r4, #1
    3312:	2b2a      	cmp	r3, #42	; 0x2a
    3314:	d13f      	bne.n	3396 <_vfiprintf_r+0x1ba>
    3316:	9b05      	ldr	r3, [sp, #20]
    3318:	3402      	adds	r4, #2
    331a:	1d1a      	adds	r2, r3, #4
    331c:	681b      	ldr	r3, [r3, #0]
    331e:	9205      	str	r2, [sp, #20]
    3320:	2b00      	cmp	r3, #0
    3322:	db35      	blt.n	3390 <_vfiprintf_r+0x1b4>
    3324:	9307      	str	r3, [sp, #28]
    3326:	7821      	ldrb	r1, [r4, #0]
    3328:	2203      	movs	r2, #3
    332a:	4836      	ldr	r0, [pc, #216]	; (3404 <_vfiprintf_r+0x228>)
    332c:	f000 fab6 	bl	389c <memchr>
    3330:	2800      	cmp	r0, #0
    3332:	d007      	beq.n	3344 <_vfiprintf_r+0x168>
    3334:	4b33      	ldr	r3, [pc, #204]	; (3404 <_vfiprintf_r+0x228>)
    3336:	682a      	ldr	r2, [r5, #0]
    3338:	1ac0      	subs	r0, r0, r3
    333a:	2340      	movs	r3, #64	; 0x40
    333c:	4083      	lsls	r3, r0
    333e:	4313      	orrs	r3, r2
    3340:	602b      	str	r3, [r5, #0]
    3342:	3401      	adds	r4, #1
    3344:	7821      	ldrb	r1, [r4, #0]
    3346:	1c63      	adds	r3, r4, #1
    3348:	2206      	movs	r2, #6
    334a:	482f      	ldr	r0, [pc, #188]	; (3408 <_vfiprintf_r+0x22c>)
    334c:	9302      	str	r3, [sp, #8]
    334e:	7629      	strb	r1, [r5, #24]
    3350:	f000 faa4 	bl	389c <memchr>
    3354:	2800      	cmp	r0, #0
    3356:	d044      	beq.n	33e2 <_vfiprintf_r+0x206>
    3358:	4b2c      	ldr	r3, [pc, #176]	; (340c <_vfiprintf_r+0x230>)
    335a:	2b00      	cmp	r3, #0
    335c:	d12f      	bne.n	33be <_vfiprintf_r+0x1e2>
    335e:	6829      	ldr	r1, [r5, #0]
    3360:	9b05      	ldr	r3, [sp, #20]
    3362:	2207      	movs	r2, #7
    3364:	05c9      	lsls	r1, r1, #23
    3366:	d528      	bpl.n	33ba <_vfiprintf_r+0x1de>
    3368:	189b      	adds	r3, r3, r2
    336a:	4393      	bics	r3, r2
    336c:	3308      	adds	r3, #8
    336e:	9305      	str	r3, [sp, #20]
    3370:	696b      	ldr	r3, [r5, #20]
    3372:	9a03      	ldr	r2, [sp, #12]
    3374:	189b      	adds	r3, r3, r2
    3376:	616b      	str	r3, [r5, #20]
    3378:	e74f      	b.n	321a <_vfiprintf_r+0x3e>
    337a:	425b      	negs	r3, r3
    337c:	60eb      	str	r3, [r5, #12]
    337e:	2302      	movs	r3, #2
    3380:	430b      	orrs	r3, r1
    3382:	602b      	str	r3, [r5, #0]
    3384:	e7bf      	b.n	3306 <_vfiprintf_r+0x12a>
    3386:	434b      	muls	r3, r1
    3388:	3401      	adds	r4, #1
    338a:	189b      	adds	r3, r3, r2
    338c:	2001      	movs	r0, #1
    338e:	e789      	b.n	32a4 <_vfiprintf_r+0xc8>
    3390:	2301      	movs	r3, #1
    3392:	425b      	negs	r3, r3
    3394:	e7c6      	b.n	3324 <_vfiprintf_r+0x148>
    3396:	2300      	movs	r3, #0
    3398:	0014      	movs	r4, r2
    339a:	200a      	movs	r0, #10
    339c:	001a      	movs	r2, r3
    339e:	606b      	str	r3, [r5, #4]
    33a0:	7821      	ldrb	r1, [r4, #0]
    33a2:	3930      	subs	r1, #48	; 0x30
    33a4:	2909      	cmp	r1, #9
    33a6:	d903      	bls.n	33b0 <_vfiprintf_r+0x1d4>
    33a8:	2b00      	cmp	r3, #0
    33aa:	d0bc      	beq.n	3326 <_vfiprintf_r+0x14a>
    33ac:	9207      	str	r2, [sp, #28]
    33ae:	e7ba      	b.n	3326 <_vfiprintf_r+0x14a>
    33b0:	4342      	muls	r2, r0
    33b2:	3401      	adds	r4, #1
    33b4:	1852      	adds	r2, r2, r1
    33b6:	2301      	movs	r3, #1
    33b8:	e7f2      	b.n	33a0 <_vfiprintf_r+0x1c4>
    33ba:	3307      	adds	r3, #7
    33bc:	e7d5      	b.n	336a <_vfiprintf_r+0x18e>
    33be:	ab05      	add	r3, sp, #20
    33c0:	9300      	str	r3, [sp, #0]
    33c2:	003a      	movs	r2, r7
    33c4:	4b12      	ldr	r3, [pc, #72]	; (3410 <_vfiprintf_r+0x234>)
    33c6:	0029      	movs	r1, r5
    33c8:	0030      	movs	r0, r6
    33ca:	e000      	b.n	33ce <_vfiprintf_r+0x1f2>
    33cc:	bf00      	nop
    33ce:	9003      	str	r0, [sp, #12]
    33d0:	9b03      	ldr	r3, [sp, #12]
    33d2:	3301      	adds	r3, #1
    33d4:	d1cc      	bne.n	3370 <_vfiprintf_r+0x194>
    33d6:	89bb      	ldrh	r3, [r7, #12]
    33d8:	065b      	lsls	r3, r3, #25
    33da:	d500      	bpl.n	33de <_vfiprintf_r+0x202>
    33dc:	e77b      	b.n	32d6 <_vfiprintf_r+0xfa>
    33de:	980b      	ldr	r0, [sp, #44]	; 0x2c
    33e0:	e77b      	b.n	32da <_vfiprintf_r+0xfe>
    33e2:	ab05      	add	r3, sp, #20
    33e4:	9300      	str	r3, [sp, #0]
    33e6:	003a      	movs	r2, r7
    33e8:	4b09      	ldr	r3, [pc, #36]	; (3410 <_vfiprintf_r+0x234>)
    33ea:	0029      	movs	r1, r5
    33ec:	0030      	movs	r0, r6
    33ee:	f000 f87f 	bl	34f0 <_printf_i>
    33f2:	e7ec      	b.n	33ce <_vfiprintf_r+0x1f2>
    33f4:	00003c84 	.word	0x00003c84
    33f8:	00003cc4 	.word	0x00003cc4
    33fc:	00003ca4 	.word	0x00003ca4
    3400:	00003c64 	.word	0x00003c64
    3404:	00003cca 	.word	0x00003cca
    3408:	00003cce 	.word	0x00003cce
    340c:	00000000 	.word	0x00000000
    3410:	000031b7 	.word	0x000031b7

00003414 <_printf_common>:
    3414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3416:	0015      	movs	r5, r2
    3418:	9301      	str	r3, [sp, #4]
    341a:	688a      	ldr	r2, [r1, #8]
    341c:	690b      	ldr	r3, [r1, #16]
    341e:	9000      	str	r0, [sp, #0]
    3420:	000c      	movs	r4, r1
    3422:	4293      	cmp	r3, r2
    3424:	da00      	bge.n	3428 <_printf_common+0x14>
    3426:	0013      	movs	r3, r2
    3428:	0022      	movs	r2, r4
    342a:	602b      	str	r3, [r5, #0]
    342c:	3243      	adds	r2, #67	; 0x43
    342e:	7812      	ldrb	r2, [r2, #0]
    3430:	2a00      	cmp	r2, #0
    3432:	d001      	beq.n	3438 <_printf_common+0x24>
    3434:	3301      	adds	r3, #1
    3436:	602b      	str	r3, [r5, #0]
    3438:	6823      	ldr	r3, [r4, #0]
    343a:	069b      	lsls	r3, r3, #26
    343c:	d502      	bpl.n	3444 <_printf_common+0x30>
    343e:	682b      	ldr	r3, [r5, #0]
    3440:	3302      	adds	r3, #2
    3442:	602b      	str	r3, [r5, #0]
    3444:	2706      	movs	r7, #6
    3446:	6823      	ldr	r3, [r4, #0]
    3448:	401f      	ands	r7, r3
    344a:	d027      	beq.n	349c <_printf_common+0x88>
    344c:	0023      	movs	r3, r4
    344e:	3343      	adds	r3, #67	; 0x43
    3450:	781b      	ldrb	r3, [r3, #0]
    3452:	1e5a      	subs	r2, r3, #1
    3454:	4193      	sbcs	r3, r2
    3456:	6822      	ldr	r2, [r4, #0]
    3458:	0692      	lsls	r2, r2, #26
    345a:	d430      	bmi.n	34be <_printf_common+0xaa>
    345c:	0022      	movs	r2, r4
    345e:	9901      	ldr	r1, [sp, #4]
    3460:	3243      	adds	r2, #67	; 0x43
    3462:	9800      	ldr	r0, [sp, #0]
    3464:	9e08      	ldr	r6, [sp, #32]
    3466:	47b0      	blx	r6
    3468:	1c43      	adds	r3, r0, #1
    346a:	d025      	beq.n	34b8 <_printf_common+0xa4>
    346c:	2306      	movs	r3, #6
    346e:	6820      	ldr	r0, [r4, #0]
    3470:	682a      	ldr	r2, [r5, #0]
    3472:	68e1      	ldr	r1, [r4, #12]
    3474:	4003      	ands	r3, r0
    3476:	2500      	movs	r5, #0
    3478:	2b04      	cmp	r3, #4
    347a:	d103      	bne.n	3484 <_printf_common+0x70>
    347c:	1a8d      	subs	r5, r1, r2
    347e:	43eb      	mvns	r3, r5
    3480:	17db      	asrs	r3, r3, #31
    3482:	401d      	ands	r5, r3
    3484:	68a3      	ldr	r3, [r4, #8]
    3486:	6922      	ldr	r2, [r4, #16]
    3488:	4293      	cmp	r3, r2
    348a:	dd01      	ble.n	3490 <_printf_common+0x7c>
    348c:	1a9b      	subs	r3, r3, r2
    348e:	18ed      	adds	r5, r5, r3
    3490:	2700      	movs	r7, #0
    3492:	42bd      	cmp	r5, r7
    3494:	d120      	bne.n	34d8 <_printf_common+0xc4>
    3496:	2000      	movs	r0, #0
    3498:	e010      	b.n	34bc <_printf_common+0xa8>
    349a:	3701      	adds	r7, #1
    349c:	68e3      	ldr	r3, [r4, #12]
    349e:	682a      	ldr	r2, [r5, #0]
    34a0:	1a9b      	subs	r3, r3, r2
    34a2:	429f      	cmp	r7, r3
    34a4:	dad2      	bge.n	344c <_printf_common+0x38>
    34a6:	0022      	movs	r2, r4
    34a8:	2301      	movs	r3, #1
    34aa:	3219      	adds	r2, #25
    34ac:	9901      	ldr	r1, [sp, #4]
    34ae:	9800      	ldr	r0, [sp, #0]
    34b0:	9e08      	ldr	r6, [sp, #32]
    34b2:	47b0      	blx	r6
    34b4:	1c43      	adds	r3, r0, #1
    34b6:	d1f0      	bne.n	349a <_printf_common+0x86>
    34b8:	2001      	movs	r0, #1
    34ba:	4240      	negs	r0, r0
    34bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    34be:	2030      	movs	r0, #48	; 0x30
    34c0:	18e1      	adds	r1, r4, r3
    34c2:	3143      	adds	r1, #67	; 0x43
    34c4:	7008      	strb	r0, [r1, #0]
    34c6:	0021      	movs	r1, r4
    34c8:	1c5a      	adds	r2, r3, #1
    34ca:	3145      	adds	r1, #69	; 0x45
    34cc:	7809      	ldrb	r1, [r1, #0]
    34ce:	18a2      	adds	r2, r4, r2
    34d0:	3243      	adds	r2, #67	; 0x43
    34d2:	3302      	adds	r3, #2
    34d4:	7011      	strb	r1, [r2, #0]
    34d6:	e7c1      	b.n	345c <_printf_common+0x48>
    34d8:	0022      	movs	r2, r4
    34da:	2301      	movs	r3, #1
    34dc:	321a      	adds	r2, #26
    34de:	9901      	ldr	r1, [sp, #4]
    34e0:	9800      	ldr	r0, [sp, #0]
    34e2:	9e08      	ldr	r6, [sp, #32]
    34e4:	47b0      	blx	r6
    34e6:	1c43      	adds	r3, r0, #1
    34e8:	d0e6      	beq.n	34b8 <_printf_common+0xa4>
    34ea:	3701      	adds	r7, #1
    34ec:	e7d1      	b.n	3492 <_printf_common+0x7e>
	...

000034f0 <_printf_i>:
    34f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    34f2:	b08b      	sub	sp, #44	; 0x2c
    34f4:	9206      	str	r2, [sp, #24]
    34f6:	000a      	movs	r2, r1
    34f8:	3243      	adds	r2, #67	; 0x43
    34fa:	9307      	str	r3, [sp, #28]
    34fc:	9005      	str	r0, [sp, #20]
    34fe:	9204      	str	r2, [sp, #16]
    3500:	7e0a      	ldrb	r2, [r1, #24]
    3502:	000c      	movs	r4, r1
    3504:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3506:	2a6e      	cmp	r2, #110	; 0x6e
    3508:	d100      	bne.n	350c <_printf_i+0x1c>
    350a:	e08f      	b.n	362c <_printf_i+0x13c>
    350c:	d817      	bhi.n	353e <_printf_i+0x4e>
    350e:	2a63      	cmp	r2, #99	; 0x63
    3510:	d02c      	beq.n	356c <_printf_i+0x7c>
    3512:	d808      	bhi.n	3526 <_printf_i+0x36>
    3514:	2a00      	cmp	r2, #0
    3516:	d100      	bne.n	351a <_printf_i+0x2a>
    3518:	e099      	b.n	364e <_printf_i+0x15e>
    351a:	2a58      	cmp	r2, #88	; 0x58
    351c:	d054      	beq.n	35c8 <_printf_i+0xd8>
    351e:	0026      	movs	r6, r4
    3520:	3642      	adds	r6, #66	; 0x42
    3522:	7032      	strb	r2, [r6, #0]
    3524:	e029      	b.n	357a <_printf_i+0x8a>
    3526:	2a64      	cmp	r2, #100	; 0x64
    3528:	d001      	beq.n	352e <_printf_i+0x3e>
    352a:	2a69      	cmp	r2, #105	; 0x69
    352c:	d1f7      	bne.n	351e <_printf_i+0x2e>
    352e:	6821      	ldr	r1, [r4, #0]
    3530:	681a      	ldr	r2, [r3, #0]
    3532:	0608      	lsls	r0, r1, #24
    3534:	d523      	bpl.n	357e <_printf_i+0x8e>
    3536:	1d11      	adds	r1, r2, #4
    3538:	6019      	str	r1, [r3, #0]
    353a:	6815      	ldr	r5, [r2, #0]
    353c:	e025      	b.n	358a <_printf_i+0x9a>
    353e:	2a73      	cmp	r2, #115	; 0x73
    3540:	d100      	bne.n	3544 <_printf_i+0x54>
    3542:	e088      	b.n	3656 <_printf_i+0x166>
    3544:	d808      	bhi.n	3558 <_printf_i+0x68>
    3546:	2a6f      	cmp	r2, #111	; 0x6f
    3548:	d029      	beq.n	359e <_printf_i+0xae>
    354a:	2a70      	cmp	r2, #112	; 0x70
    354c:	d1e7      	bne.n	351e <_printf_i+0x2e>
    354e:	2220      	movs	r2, #32
    3550:	6809      	ldr	r1, [r1, #0]
    3552:	430a      	orrs	r2, r1
    3554:	6022      	str	r2, [r4, #0]
    3556:	e003      	b.n	3560 <_printf_i+0x70>
    3558:	2a75      	cmp	r2, #117	; 0x75
    355a:	d020      	beq.n	359e <_printf_i+0xae>
    355c:	2a78      	cmp	r2, #120	; 0x78
    355e:	d1de      	bne.n	351e <_printf_i+0x2e>
    3560:	0022      	movs	r2, r4
    3562:	2178      	movs	r1, #120	; 0x78
    3564:	3245      	adds	r2, #69	; 0x45
    3566:	7011      	strb	r1, [r2, #0]
    3568:	4a6c      	ldr	r2, [pc, #432]	; (371c <_printf_i+0x22c>)
    356a:	e030      	b.n	35ce <_printf_i+0xde>
    356c:	000e      	movs	r6, r1
    356e:	681a      	ldr	r2, [r3, #0]
    3570:	3642      	adds	r6, #66	; 0x42
    3572:	1d11      	adds	r1, r2, #4
    3574:	6019      	str	r1, [r3, #0]
    3576:	6813      	ldr	r3, [r2, #0]
    3578:	7033      	strb	r3, [r6, #0]
    357a:	2301      	movs	r3, #1
    357c:	e079      	b.n	3672 <_printf_i+0x182>
    357e:	0649      	lsls	r1, r1, #25
    3580:	d5d9      	bpl.n	3536 <_printf_i+0x46>
    3582:	1d11      	adds	r1, r2, #4
    3584:	6019      	str	r1, [r3, #0]
    3586:	2300      	movs	r3, #0
    3588:	5ed5      	ldrsh	r5, [r2, r3]
    358a:	2d00      	cmp	r5, #0
    358c:	da03      	bge.n	3596 <_printf_i+0xa6>
    358e:	232d      	movs	r3, #45	; 0x2d
    3590:	9a04      	ldr	r2, [sp, #16]
    3592:	426d      	negs	r5, r5
    3594:	7013      	strb	r3, [r2, #0]
    3596:	4b62      	ldr	r3, [pc, #392]	; (3720 <_printf_i+0x230>)
    3598:	270a      	movs	r7, #10
    359a:	9303      	str	r3, [sp, #12]
    359c:	e02f      	b.n	35fe <_printf_i+0x10e>
    359e:	6820      	ldr	r0, [r4, #0]
    35a0:	6819      	ldr	r1, [r3, #0]
    35a2:	0605      	lsls	r5, r0, #24
    35a4:	d503      	bpl.n	35ae <_printf_i+0xbe>
    35a6:	1d08      	adds	r0, r1, #4
    35a8:	6018      	str	r0, [r3, #0]
    35aa:	680d      	ldr	r5, [r1, #0]
    35ac:	e005      	b.n	35ba <_printf_i+0xca>
    35ae:	0640      	lsls	r0, r0, #25
    35b0:	d5f9      	bpl.n	35a6 <_printf_i+0xb6>
    35b2:	680d      	ldr	r5, [r1, #0]
    35b4:	1d08      	adds	r0, r1, #4
    35b6:	6018      	str	r0, [r3, #0]
    35b8:	b2ad      	uxth	r5, r5
    35ba:	4b59      	ldr	r3, [pc, #356]	; (3720 <_printf_i+0x230>)
    35bc:	2708      	movs	r7, #8
    35be:	9303      	str	r3, [sp, #12]
    35c0:	2a6f      	cmp	r2, #111	; 0x6f
    35c2:	d018      	beq.n	35f6 <_printf_i+0x106>
    35c4:	270a      	movs	r7, #10
    35c6:	e016      	b.n	35f6 <_printf_i+0x106>
    35c8:	3145      	adds	r1, #69	; 0x45
    35ca:	700a      	strb	r2, [r1, #0]
    35cc:	4a54      	ldr	r2, [pc, #336]	; (3720 <_printf_i+0x230>)
    35ce:	9203      	str	r2, [sp, #12]
    35d0:	681a      	ldr	r2, [r3, #0]
    35d2:	6821      	ldr	r1, [r4, #0]
    35d4:	1d10      	adds	r0, r2, #4
    35d6:	6018      	str	r0, [r3, #0]
    35d8:	6815      	ldr	r5, [r2, #0]
    35da:	0608      	lsls	r0, r1, #24
    35dc:	d522      	bpl.n	3624 <_printf_i+0x134>
    35de:	07cb      	lsls	r3, r1, #31
    35e0:	d502      	bpl.n	35e8 <_printf_i+0xf8>
    35e2:	2320      	movs	r3, #32
    35e4:	4319      	orrs	r1, r3
    35e6:	6021      	str	r1, [r4, #0]
    35e8:	2710      	movs	r7, #16
    35ea:	2d00      	cmp	r5, #0
    35ec:	d103      	bne.n	35f6 <_printf_i+0x106>
    35ee:	2320      	movs	r3, #32
    35f0:	6822      	ldr	r2, [r4, #0]
    35f2:	439a      	bics	r2, r3
    35f4:	6022      	str	r2, [r4, #0]
    35f6:	0023      	movs	r3, r4
    35f8:	2200      	movs	r2, #0
    35fa:	3343      	adds	r3, #67	; 0x43
    35fc:	701a      	strb	r2, [r3, #0]
    35fe:	6863      	ldr	r3, [r4, #4]
    3600:	60a3      	str	r3, [r4, #8]
    3602:	2b00      	cmp	r3, #0
    3604:	db5c      	blt.n	36c0 <_printf_i+0x1d0>
    3606:	2204      	movs	r2, #4
    3608:	6821      	ldr	r1, [r4, #0]
    360a:	4391      	bics	r1, r2
    360c:	6021      	str	r1, [r4, #0]
    360e:	2d00      	cmp	r5, #0
    3610:	d158      	bne.n	36c4 <_printf_i+0x1d4>
    3612:	9e04      	ldr	r6, [sp, #16]
    3614:	2b00      	cmp	r3, #0
    3616:	d064      	beq.n	36e2 <_printf_i+0x1f2>
    3618:	0026      	movs	r6, r4
    361a:	9b03      	ldr	r3, [sp, #12]
    361c:	3642      	adds	r6, #66	; 0x42
    361e:	781b      	ldrb	r3, [r3, #0]
    3620:	7033      	strb	r3, [r6, #0]
    3622:	e05e      	b.n	36e2 <_printf_i+0x1f2>
    3624:	0648      	lsls	r0, r1, #25
    3626:	d5da      	bpl.n	35de <_printf_i+0xee>
    3628:	b2ad      	uxth	r5, r5
    362a:	e7d8      	b.n	35de <_printf_i+0xee>
    362c:	6809      	ldr	r1, [r1, #0]
    362e:	681a      	ldr	r2, [r3, #0]
    3630:	0608      	lsls	r0, r1, #24
    3632:	d505      	bpl.n	3640 <_printf_i+0x150>
    3634:	1d11      	adds	r1, r2, #4
    3636:	6019      	str	r1, [r3, #0]
    3638:	6813      	ldr	r3, [r2, #0]
    363a:	6962      	ldr	r2, [r4, #20]
    363c:	601a      	str	r2, [r3, #0]
    363e:	e006      	b.n	364e <_printf_i+0x15e>
    3640:	0649      	lsls	r1, r1, #25
    3642:	d5f7      	bpl.n	3634 <_printf_i+0x144>
    3644:	1d11      	adds	r1, r2, #4
    3646:	6019      	str	r1, [r3, #0]
    3648:	6813      	ldr	r3, [r2, #0]
    364a:	8aa2      	ldrh	r2, [r4, #20]
    364c:	801a      	strh	r2, [r3, #0]
    364e:	2300      	movs	r3, #0
    3650:	9e04      	ldr	r6, [sp, #16]
    3652:	6123      	str	r3, [r4, #16]
    3654:	e054      	b.n	3700 <_printf_i+0x210>
    3656:	681a      	ldr	r2, [r3, #0]
    3658:	1d11      	adds	r1, r2, #4
    365a:	6019      	str	r1, [r3, #0]
    365c:	6816      	ldr	r6, [r2, #0]
    365e:	2100      	movs	r1, #0
    3660:	6862      	ldr	r2, [r4, #4]
    3662:	0030      	movs	r0, r6
    3664:	f000 f91a 	bl	389c <memchr>
    3668:	2800      	cmp	r0, #0
    366a:	d001      	beq.n	3670 <_printf_i+0x180>
    366c:	1b80      	subs	r0, r0, r6
    366e:	6060      	str	r0, [r4, #4]
    3670:	6863      	ldr	r3, [r4, #4]
    3672:	6123      	str	r3, [r4, #16]
    3674:	2300      	movs	r3, #0
    3676:	9a04      	ldr	r2, [sp, #16]
    3678:	7013      	strb	r3, [r2, #0]
    367a:	e041      	b.n	3700 <_printf_i+0x210>
    367c:	6923      	ldr	r3, [r4, #16]
    367e:	0032      	movs	r2, r6
    3680:	9906      	ldr	r1, [sp, #24]
    3682:	9805      	ldr	r0, [sp, #20]
    3684:	9d07      	ldr	r5, [sp, #28]
    3686:	47a8      	blx	r5
    3688:	1c43      	adds	r3, r0, #1
    368a:	d043      	beq.n	3714 <_printf_i+0x224>
    368c:	6823      	ldr	r3, [r4, #0]
    368e:	2500      	movs	r5, #0
    3690:	079b      	lsls	r3, r3, #30
    3692:	d40f      	bmi.n	36b4 <_printf_i+0x1c4>
    3694:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3696:	68e0      	ldr	r0, [r4, #12]
    3698:	4298      	cmp	r0, r3
    369a:	da3d      	bge.n	3718 <_printf_i+0x228>
    369c:	0018      	movs	r0, r3
    369e:	e03b      	b.n	3718 <_printf_i+0x228>
    36a0:	0022      	movs	r2, r4
    36a2:	2301      	movs	r3, #1
    36a4:	3219      	adds	r2, #25
    36a6:	9906      	ldr	r1, [sp, #24]
    36a8:	9805      	ldr	r0, [sp, #20]
    36aa:	9e07      	ldr	r6, [sp, #28]
    36ac:	47b0      	blx	r6
    36ae:	1c43      	adds	r3, r0, #1
    36b0:	d030      	beq.n	3714 <_printf_i+0x224>
    36b2:	3501      	adds	r5, #1
    36b4:	68e3      	ldr	r3, [r4, #12]
    36b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    36b8:	1a9b      	subs	r3, r3, r2
    36ba:	429d      	cmp	r5, r3
    36bc:	dbf0      	blt.n	36a0 <_printf_i+0x1b0>
    36be:	e7e9      	b.n	3694 <_printf_i+0x1a4>
    36c0:	2d00      	cmp	r5, #0
    36c2:	d0a9      	beq.n	3618 <_printf_i+0x128>
    36c4:	9e04      	ldr	r6, [sp, #16]
    36c6:	0028      	movs	r0, r5
    36c8:	0039      	movs	r1, r7
    36ca:	f7ff f8e5 	bl	2898 <__aeabi_uidivmod>
    36ce:	9b03      	ldr	r3, [sp, #12]
    36d0:	3e01      	subs	r6, #1
    36d2:	5c5b      	ldrb	r3, [r3, r1]
    36d4:	0028      	movs	r0, r5
    36d6:	7033      	strb	r3, [r6, #0]
    36d8:	0039      	movs	r1, r7
    36da:	f7ff f857 	bl	278c <__udivsi3>
    36de:	1e05      	subs	r5, r0, #0
    36e0:	d1f1      	bne.n	36c6 <_printf_i+0x1d6>
    36e2:	2f08      	cmp	r7, #8
    36e4:	d109      	bne.n	36fa <_printf_i+0x20a>
    36e6:	6823      	ldr	r3, [r4, #0]
    36e8:	07db      	lsls	r3, r3, #31
    36ea:	d506      	bpl.n	36fa <_printf_i+0x20a>
    36ec:	6863      	ldr	r3, [r4, #4]
    36ee:	6922      	ldr	r2, [r4, #16]
    36f0:	4293      	cmp	r3, r2
    36f2:	dc02      	bgt.n	36fa <_printf_i+0x20a>
    36f4:	2330      	movs	r3, #48	; 0x30
    36f6:	3e01      	subs	r6, #1
    36f8:	7033      	strb	r3, [r6, #0]
    36fa:	9b04      	ldr	r3, [sp, #16]
    36fc:	1b9b      	subs	r3, r3, r6
    36fe:	6123      	str	r3, [r4, #16]
    3700:	9b07      	ldr	r3, [sp, #28]
    3702:	aa09      	add	r2, sp, #36	; 0x24
    3704:	9300      	str	r3, [sp, #0]
    3706:	0021      	movs	r1, r4
    3708:	9b06      	ldr	r3, [sp, #24]
    370a:	9805      	ldr	r0, [sp, #20]
    370c:	f7ff fe82 	bl	3414 <_printf_common>
    3710:	1c43      	adds	r3, r0, #1
    3712:	d1b3      	bne.n	367c <_printf_i+0x18c>
    3714:	2001      	movs	r0, #1
    3716:	4240      	negs	r0, r0
    3718:	b00b      	add	sp, #44	; 0x2c
    371a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    371c:	00003ce6 	.word	0x00003ce6
    3720:	00003cd5 	.word	0x00003cd5

00003724 <_sbrk_r>:
    3724:	2300      	movs	r3, #0
    3726:	b570      	push	{r4, r5, r6, lr}
    3728:	4c06      	ldr	r4, [pc, #24]	; (3744 <_sbrk_r+0x20>)
    372a:	0005      	movs	r5, r0
    372c:	0008      	movs	r0, r1
    372e:	6023      	str	r3, [r4, #0]
    3730:	f7fd fc2a 	bl	f88 <_sbrk>
    3734:	1c43      	adds	r3, r0, #1
    3736:	d103      	bne.n	3740 <_sbrk_r+0x1c>
    3738:	6823      	ldr	r3, [r4, #0]
    373a:	2b00      	cmp	r3, #0
    373c:	d000      	beq.n	3740 <_sbrk_r+0x1c>
    373e:	602b      	str	r3, [r5, #0]
    3740:	bd70      	pop	{r4, r5, r6, pc}
    3742:	46c0      	nop			; (mov r8, r8)
    3744:	20000210 	.word	0x20000210

00003748 <__sread>:
    3748:	b570      	push	{r4, r5, r6, lr}
    374a:	000c      	movs	r4, r1
    374c:	250e      	movs	r5, #14
    374e:	5f49      	ldrsh	r1, [r1, r5]
    3750:	f000 f8b2 	bl	38b8 <_read_r>
    3754:	2800      	cmp	r0, #0
    3756:	db03      	blt.n	3760 <__sread+0x18>
    3758:	6d63      	ldr	r3, [r4, #84]	; 0x54
    375a:	181b      	adds	r3, r3, r0
    375c:	6563      	str	r3, [r4, #84]	; 0x54
    375e:	bd70      	pop	{r4, r5, r6, pc}
    3760:	89a3      	ldrh	r3, [r4, #12]
    3762:	4a02      	ldr	r2, [pc, #8]	; (376c <__sread+0x24>)
    3764:	4013      	ands	r3, r2
    3766:	81a3      	strh	r3, [r4, #12]
    3768:	e7f9      	b.n	375e <__sread+0x16>
    376a:	46c0      	nop			; (mov r8, r8)
    376c:	ffffefff 	.word	0xffffefff

00003770 <__swrite>:
    3770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3772:	001f      	movs	r7, r3
    3774:	898b      	ldrh	r3, [r1, #12]
    3776:	0005      	movs	r5, r0
    3778:	000c      	movs	r4, r1
    377a:	0016      	movs	r6, r2
    377c:	05db      	lsls	r3, r3, #23
    377e:	d505      	bpl.n	378c <__swrite+0x1c>
    3780:	230e      	movs	r3, #14
    3782:	5ec9      	ldrsh	r1, [r1, r3]
    3784:	2200      	movs	r2, #0
    3786:	2302      	movs	r3, #2
    3788:	f000 f874 	bl	3874 <_lseek_r>
    378c:	89a3      	ldrh	r3, [r4, #12]
    378e:	4a05      	ldr	r2, [pc, #20]	; (37a4 <__swrite+0x34>)
    3790:	0028      	movs	r0, r5
    3792:	4013      	ands	r3, r2
    3794:	81a3      	strh	r3, [r4, #12]
    3796:	0032      	movs	r2, r6
    3798:	230e      	movs	r3, #14
    379a:	5ee1      	ldrsh	r1, [r4, r3]
    379c:	003b      	movs	r3, r7
    379e:	f000 f81f 	bl	37e0 <_write_r>
    37a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37a4:	ffffefff 	.word	0xffffefff

000037a8 <__sseek>:
    37a8:	b570      	push	{r4, r5, r6, lr}
    37aa:	000c      	movs	r4, r1
    37ac:	250e      	movs	r5, #14
    37ae:	5f49      	ldrsh	r1, [r1, r5]
    37b0:	f000 f860 	bl	3874 <_lseek_r>
    37b4:	89a3      	ldrh	r3, [r4, #12]
    37b6:	1c42      	adds	r2, r0, #1
    37b8:	d103      	bne.n	37c2 <__sseek+0x1a>
    37ba:	4a05      	ldr	r2, [pc, #20]	; (37d0 <__sseek+0x28>)
    37bc:	4013      	ands	r3, r2
    37be:	81a3      	strh	r3, [r4, #12]
    37c0:	bd70      	pop	{r4, r5, r6, pc}
    37c2:	2280      	movs	r2, #128	; 0x80
    37c4:	0152      	lsls	r2, r2, #5
    37c6:	4313      	orrs	r3, r2
    37c8:	81a3      	strh	r3, [r4, #12]
    37ca:	6560      	str	r0, [r4, #84]	; 0x54
    37cc:	e7f8      	b.n	37c0 <__sseek+0x18>
    37ce:	46c0      	nop			; (mov r8, r8)
    37d0:	ffffefff 	.word	0xffffefff

000037d4 <__sclose>:
    37d4:	b510      	push	{r4, lr}
    37d6:	230e      	movs	r3, #14
    37d8:	5ec9      	ldrsh	r1, [r1, r3]
    37da:	f000 f815 	bl	3808 <_close_r>
    37de:	bd10      	pop	{r4, pc}

000037e0 <_write_r>:
    37e0:	b570      	push	{r4, r5, r6, lr}
    37e2:	0005      	movs	r5, r0
    37e4:	0008      	movs	r0, r1
    37e6:	0011      	movs	r1, r2
    37e8:	2200      	movs	r2, #0
    37ea:	4c06      	ldr	r4, [pc, #24]	; (3804 <_write_r+0x24>)
    37ec:	6022      	str	r2, [r4, #0]
    37ee:	001a      	movs	r2, r3
    37f0:	f7fe fd12 	bl	2218 <_write>
    37f4:	1c43      	adds	r3, r0, #1
    37f6:	d103      	bne.n	3800 <_write_r+0x20>
    37f8:	6823      	ldr	r3, [r4, #0]
    37fa:	2b00      	cmp	r3, #0
    37fc:	d000      	beq.n	3800 <_write_r+0x20>
    37fe:	602b      	str	r3, [r5, #0]
    3800:	bd70      	pop	{r4, r5, r6, pc}
    3802:	46c0      	nop			; (mov r8, r8)
    3804:	20000210 	.word	0x20000210

00003808 <_close_r>:
    3808:	2300      	movs	r3, #0
    380a:	b570      	push	{r4, r5, r6, lr}
    380c:	4c06      	ldr	r4, [pc, #24]	; (3828 <_close_r+0x20>)
    380e:	0005      	movs	r5, r0
    3810:	0008      	movs	r0, r1
    3812:	6023      	str	r3, [r4, #0]
    3814:	f7fd fbca 	bl	fac <_close>
    3818:	1c43      	adds	r3, r0, #1
    381a:	d103      	bne.n	3824 <_close_r+0x1c>
    381c:	6823      	ldr	r3, [r4, #0]
    381e:	2b00      	cmp	r3, #0
    3820:	d000      	beq.n	3824 <_close_r+0x1c>
    3822:	602b      	str	r3, [r5, #0]
    3824:	bd70      	pop	{r4, r5, r6, pc}
    3826:	46c0      	nop			; (mov r8, r8)
    3828:	20000210 	.word	0x20000210

0000382c <_fstat_r>:
    382c:	2300      	movs	r3, #0
    382e:	b570      	push	{r4, r5, r6, lr}
    3830:	4c06      	ldr	r4, [pc, #24]	; (384c <_fstat_r+0x20>)
    3832:	0005      	movs	r5, r0
    3834:	0008      	movs	r0, r1
    3836:	0011      	movs	r1, r2
    3838:	6023      	str	r3, [r4, #0]
    383a:	f7fd fbba 	bl	fb2 <_fstat>
    383e:	1c43      	adds	r3, r0, #1
    3840:	d103      	bne.n	384a <_fstat_r+0x1e>
    3842:	6823      	ldr	r3, [r4, #0]
    3844:	2b00      	cmp	r3, #0
    3846:	d000      	beq.n	384a <_fstat_r+0x1e>
    3848:	602b      	str	r3, [r5, #0]
    384a:	bd70      	pop	{r4, r5, r6, pc}
    384c:	20000210 	.word	0x20000210

00003850 <_isatty_r>:
    3850:	2300      	movs	r3, #0
    3852:	b570      	push	{r4, r5, r6, lr}
    3854:	4c06      	ldr	r4, [pc, #24]	; (3870 <_isatty_r+0x20>)
    3856:	0005      	movs	r5, r0
    3858:	0008      	movs	r0, r1
    385a:	6023      	str	r3, [r4, #0]
    385c:	f7fd fbae 	bl	fbc <_isatty>
    3860:	1c43      	adds	r3, r0, #1
    3862:	d103      	bne.n	386c <_isatty_r+0x1c>
    3864:	6823      	ldr	r3, [r4, #0]
    3866:	2b00      	cmp	r3, #0
    3868:	d000      	beq.n	386c <_isatty_r+0x1c>
    386a:	602b      	str	r3, [r5, #0]
    386c:	bd70      	pop	{r4, r5, r6, pc}
    386e:	46c0      	nop			; (mov r8, r8)
    3870:	20000210 	.word	0x20000210

00003874 <_lseek_r>:
    3874:	b570      	push	{r4, r5, r6, lr}
    3876:	0005      	movs	r5, r0
    3878:	0008      	movs	r0, r1
    387a:	0011      	movs	r1, r2
    387c:	2200      	movs	r2, #0
    387e:	4c06      	ldr	r4, [pc, #24]	; (3898 <_lseek_r+0x24>)
    3880:	6022      	str	r2, [r4, #0]
    3882:	001a      	movs	r2, r3
    3884:	f7fd fb9c 	bl	fc0 <_lseek>
    3888:	1c43      	adds	r3, r0, #1
    388a:	d103      	bne.n	3894 <_lseek_r+0x20>
    388c:	6823      	ldr	r3, [r4, #0]
    388e:	2b00      	cmp	r3, #0
    3890:	d000      	beq.n	3894 <_lseek_r+0x20>
    3892:	602b      	str	r3, [r5, #0]
    3894:	bd70      	pop	{r4, r5, r6, pc}
    3896:	46c0      	nop			; (mov r8, r8)
    3898:	20000210 	.word	0x20000210

0000389c <memchr>:
    389c:	b2c9      	uxtb	r1, r1
    389e:	1882      	adds	r2, r0, r2
    38a0:	4290      	cmp	r0, r2
    38a2:	d101      	bne.n	38a8 <memchr+0xc>
    38a4:	2000      	movs	r0, #0
    38a6:	4770      	bx	lr
    38a8:	7803      	ldrb	r3, [r0, #0]
    38aa:	428b      	cmp	r3, r1
    38ac:	d0fb      	beq.n	38a6 <memchr+0xa>
    38ae:	3001      	adds	r0, #1
    38b0:	e7f6      	b.n	38a0 <memchr+0x4>

000038b2 <__malloc_lock>:
    38b2:	4770      	bx	lr

000038b4 <__malloc_unlock>:
    38b4:	4770      	bx	lr
	...

000038b8 <_read_r>:
    38b8:	b570      	push	{r4, r5, r6, lr}
    38ba:	0005      	movs	r5, r0
    38bc:	0008      	movs	r0, r1
    38be:	0011      	movs	r1, r2
    38c0:	2200      	movs	r2, #0
    38c2:	4c06      	ldr	r4, [pc, #24]	; (38dc <_read_r+0x24>)
    38c4:	6022      	str	r2, [r4, #0]
    38c6:	001a      	movs	r2, r3
    38c8:	f7fe fc92 	bl	21f0 <_read>
    38cc:	1c43      	adds	r3, r0, #1
    38ce:	d103      	bne.n	38d8 <_read_r+0x20>
    38d0:	6823      	ldr	r3, [r4, #0]
    38d2:	2b00      	cmp	r3, #0
    38d4:	d000      	beq.n	38d8 <_read_r+0x20>
    38d6:	602b      	str	r3, [r5, #0]
    38d8:	bd70      	pop	{r4, r5, r6, pc}
    38da:	46c0      	nop			; (mov r8, r8)
    38dc:	20000210 	.word	0x20000210
    38e0:	682f2e2e 	.word	0x682f2e2e
    38e4:	732f6c61 	.word	0x732f6c61
    38e8:	682f6372 	.word	0x682f6372
    38ec:	695f6c61 	.word	0x695f6c61
    38f0:	6d5f6332 	.word	0x6d5f6332
    38f4:	6e79735f 	.word	0x6e79735f
    38f8:	00632e63 	.word	0x00632e63
    38fc:	682f2e2e 	.word	0x682f2e2e
    3900:	732f6c61 	.word	0x732f6c61
    3904:	682f6372 	.word	0x682f6372
    3908:	695f6c61 	.word	0x695f6c61
    390c:	00632e6f 	.word	0x00632e6f
    3910:	682f2e2e 	.word	0x682f2e2e
    3914:	732f6c61 	.word	0x732f6c61
    3918:	682f6372 	.word	0x682f6372
    391c:	735f6c61 	.word	0x735f6c61
    3920:	5f64636c 	.word	0x5f64636c
    3924:	636e7973 	.word	0x636e7973
    3928:	0000632e 	.word	0x0000632e
    392c:	682f2e2e 	.word	0x682f2e2e
    3930:	732f6c61 	.word	0x732f6c61
    3934:	682f6372 	.word	0x682f6372
    3938:	745f6c61 	.word	0x745f6c61
    393c:	72656d69 	.word	0x72656d69
    3940:	0000632e 	.word	0x0000632e
    3944:	682f2e2e 	.word	0x682f2e2e
    3948:	732f6c61 	.word	0x732f6c61
    394c:	682f6372 	.word	0x682f6372
    3950:	755f6c61 	.word	0x755f6c61
    3954:	74726173 	.word	0x74726173
    3958:	6e79735f 	.word	0x6e79735f
    395c:	00632e63 	.word	0x00632e63
    3960:	682f2e2e 	.word	0x682f2e2e
    3964:	752f6c61 	.word	0x752f6c61
    3968:	736c6974 	.word	0x736c6974
    396c:	6372732f 	.word	0x6372732f
    3970:	6974752f 	.word	0x6974752f
    3974:	6c5f736c 	.word	0x6c5f736c
    3978:	2e747369 	.word	0x2e747369
    397c:	00000063 	.word	0x00000063
    3980:	682f2e2e 	.word	0x682f2e2e
    3984:	722f6c70 	.word	0x722f6c70
    3988:	682f6374 	.word	0x682f6374
    398c:	725f6c70 	.word	0x725f6c70
    3990:	632e6374 	.word	0x632e6374
    3994:	00000000 	.word	0x00000000

00003998 <_i2cms>:
    3998:	00000001 00200014 00000100 00000049     ...... .....I...
    39a8:	00d70000 00f42400 682f2e2e 732f6c70     .....$..../hpl/s
    39b8:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    39c8:	0000632e                                .c..

000039cc <cm_setting>:
    39cc:	07000100 07000400 07000500 07000600     ................
    39dc:	07000700 0e010801 0e010a01 0e010c01     ................
    39ec:	0e010e01 0e011001 0e011201 0e011401     ................
    39fc:	0e011601 07000100 07000100 07000100     ................
    3a0c:	07000100 07000100 07000100 07000100     ................
    3a1c:	07000100 07000100 07000100 07000100     ................
    3a2c:	07000100 07000100 07000100 07000100     ................
    3a3c:	07000100 07000100 07000100 07000100     ................
    3a4c:	07000100 07000100 07000100 07000100     ................
    3a5c:	07000100 07000100 07000100 07000100     ................
    3a6c:	07000100 07000100 07000100 07000100     ................

00003a7c <cm7_lut>:
    3a7c:	00000000 00007730 00002431 00005d32     ....0w..1$..2]..
    3a8c:	00006d33 00002e34 00006b35 00007b36     3m..4...5k..6{..
    3a9c:	00002537 00007f38 00002f39 00003f61     7%..8...9/..a?..
    3aac:	00007a62 00005363 00007c64 00005b65     bz..cS..d|..e[..
    3abc:	00001b66                                f...

00003ac0 <cm14_lut>:
    3ac0:	003a1730 00080231 0028c532 0028c333     0.:.1...2.(.3.(.
    3ad0:	0018c234 0030c335 0030c736 00280237     4...5.0.6.0.7.(.
    3ae0:	0038c738 0038c339 0038c661 0029a362     8.8.9.8.a.8.b.).
    3af0:	00300563 00292364 0030c565 0030c466     c.0.d#).e.0.f.0.
    3b00:	00308767 0018c668 0018c669 0008076a     g.0.h...i...j...
    3b10:	00124c6b 0010056c 001e066d 001c0e6e     kL..l...m...n...
    3b20:	0038076f 0038c470 00380f71 0038cc72     o.8.p.8.q.8.r.8.
    3b30:	00304973 00212074 00180775 00121476     sI0.t !.u...v...
    3b40:	00181e77 00061878 0018c379 0022117a     w...x...y...z.".
    3b50:	0000c02d 0001e02b 0002102f 0000c13d     -...+.../...=...
    3b60:	0009e323 0006182a 00000827 00041029     #...*...'...)...
    3b70:	00020828 00284f40 0031e324 00121225     (...@O(.$.1.%...
    3b80:	0004085c 0000015f 00000000 00000002     \..._...........
    3b90:	00000003 00010002 00010003 00040002     ................
    3ba0:	00040003 00050002 00050003 6c786461     ............adxl
    3bb0:	5f353433 5f766564 74696e69 3d202928     345_dev_init() =
    3bc0:	6425203e 0000000a 6c786461 5f353433     > %d....adxl345_
    3bd0:	74696e69 3d202928 6425203e 0000000a     init() => %d....
    3be0:	00343332 64636261 68676665 00000000     234.abcdefgh....
    3bf0:	6c786461 5f353433 72617473 20292874     adxl345_start() 
    3c00:	25203e3d 00000a64 73676572 6425203a     => %d...regs: %d
    3c10:	32302520 32302578 30252078 30257832      %02x%02x %02x%0
    3c20:	25207832 25783230 0a783230 00000000     2x %02x%02x.....

00003c30 <multipliers_tau_calc>:
    3c30:	00130007 00900035                       ....5...

00003c38 <gain_setting_int_cap>:
    3c38:	050b1c3f 0a0b0103                                ?.....

00003c3e <PTC_XY_PINS>:
    3c3e:	08090a0b 43424645 25240302 29282726     ....EFBC..$%&'()
    3c4e:	17161514 1f1e1b5c 07060504 13121110     ....\...........
	...

00003c60 <_global_impure_ptr>:
    3c60:	20000080                                ... 

00003c64 <__sf_fake_stderr>:
	...

00003c84 <__sf_fake_stdin>:
	...

00003ca4 <__sf_fake_stdout>:
	...
    3cc4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3cd4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3ce4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    3cf4:	00006665                                ef..

00003cf8 <_init>:
    3cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cfa:	46c0      	nop			; (mov r8, r8)
    3cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3cfe:	bc08      	pop	{r3}
    3d00:	469e      	mov	lr, r3
    3d02:	4770      	bx	lr

00003d04 <__init_array_start>:
    3d04:	000000d1 	.word	0x000000d1

00003d08 <_fini>:
    3d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d0a:	46c0      	nop			; (mov r8, r8)
    3d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3d0e:	bc08      	pop	{r3}
    3d10:	469e      	mov	lr, r3
    3d12:	4770      	bx	lr

00003d14 <__fini_array_start>:
    3d14:	000000a9 	.word	0x000000a9
